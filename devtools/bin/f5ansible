#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017 F5 Networks Inc.
# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import absolute_import, division, print_function
__metaclass__ = type

import click
import os
import re
import shutil
import subprocess
import sys
import yaml
from invoke import run


from os.path import abspath
from os.path import dirname
from six import iteritems

import logging
logging.basicConfig()
logger = logging.getLogger('f5ansible')


try:
    from jinja2 import Environment
    from jinja2 import FileSystemLoader
    HAS_JINJA = True
except ImportError:
    HAS_JINJA = False


TOP_LEVEL_DIR = dirname(dirname(dirname(abspath(__file__))))

if HAS_JINJA:
    # Stubber related
    JINJA_ENV = Environment(
        loader=FileSystemLoader([
            os.path.join(os.path.dirname(os.path.dirname(__file__)),'stubs')
        ])
    )

# Used for copying files upstream
UPSTREAM_FIXTURE_FILE = '{0}/test/units/modules/network/f5/fixtures/{1}'
UPSTREAM_UNIT_TEST = '{0}/test/units/modules/network/f5/test_{1}.py'
UPSTREAM_INTEGRATION_TEST = '{0}/test/integration/targets/{1}'
UPSTREAM_MODULE = '{0}/lib/ansible/modules/network/f5/{1}.py'
DOWNSTREAM_FIXTURE_FILE = '{0}/test/unit/fixtures/{1}'
DOWNSTREAM_UNIT_TEST = '{0}/test/unit/test_{1}.py'
DOWNSTREAM_INTEGRATION_TEST = '{0}/test/integration/targets/{1}'
DOWNSTREAM_MODULE = '{0}/library/modules/{1}.py'



def list_available_docker_compose_services():
    result = []
    compose_yaml = '{0}/devtools/docker-compose.yaml'.format(TOP_LEVEL_DIR)
    with open(compose_yaml) as fh:
        content = yaml.load(fh)
    if 'services' not in content:
        click.echo("docker-compose file is missing 'services' section", err=True)
        sys.exit(1)
    for k, v in iteritems(content['services']):
        result.append(k)
    result.sort()
    result = list(set(result))
    return result


def _start_container(service, site_override):
    compose_file = '{0}/devtools/docker-compose.yaml'.format(TOP_LEVEL_DIR)
    if site_override:
        extend_file = site_override
        if not os.path.exists(extend_file):
            click.echo("The specified override '{0}' was found found".format(extend_file), err=True)
            sys.exit(1)
    else:
        extend_file = '{0}/devtools/docker-compose.site.yaml'.format(TOP_LEVEL_DIR)
    cmd = ['docker-compose', '-f', compose_file]
    if os.path.exists(extend_file):
        cmd += ['-f', extend_file]
    cmd += ['run', '--rm', service]
    logger.debug('Run command "{0}"'.format(' '.join(cmd)))
    proc = subprocess.Popen(cmd)
    stdout, stderr = proc.communicate()
    if int(proc.returncode) != 0:
        if stderr:
            click.echo(stderr.decode('utf-8'), err=True)
            sys.exit(1)


def _build_container(service, site_override):
    compose_file = '{0}/devtools/docker-compose.yaml'.format(TOP_LEVEL_DIR)
    if site_override:
        extend_file = site_override
        if not os.path.exists(extend_file):
            click.echo("The specified override '{0}' was found found".format(extend_file), err=True)
            sys.exit(1)
    else:
        extend_file = '{0}/devtools/docker-compose.site.yaml'.format(TOP_LEVEL_DIR)
    cmd = ['docker-compose', '-f', compose_file]
    if os.path.exists(extend_file):
        cmd += ['-f', extend_file]
    cmd += ['build', '--force-rm', '--no-cache', service]
    logger.debug('Run command "{0}"'.format(' '.join(cmd)))
    proc = subprocess.Popen(cmd)
    stdout, stderr = proc.communicate()
    if proc.returncode != 0:
        click.echo(stderr.decode('utf-8'), err=True)
        sys.exit(1)


def module_file_present(module):
    module_file = '{0}/library/modules/{1}.py'.format(TOP_LEVEL_DIR, module)
    if os.path.exists(module_file):
        logger.debug('Module file "{0}" exists'.format(module_file))
        return True
    return False


def module_file_absent(module):
    result = module_file_present(module)
    return not result


def module_name(module):
    filename, extension = os.path.splitext(module)
    return filename


def get_fixtures(module):
    result = []

    # Handle deprecated modules
    if module.startswith('_'):
        module = module[1:]

    pattern1 = r"load_fixture\(\'(?P<fixture>[^']+)"
    pattern2 = r"fixtures\/(?P<fixture>[^']+)"
    pattern3 = r"fixture_path\,\s+\'(?P<fixture>[^']+)"
    p1 = subprocess.Popen(
        ['egrep', '(load_fixture|fixtures|fixture_path)', '{0}/test/unit/test_{1}.py'.format(TOP_LEVEL_DIR, module)],
        stdout=subprocess.PIPE
    )
    p2 = subprocess.Popen(
        ['egrep', '-v', '(def load_fixture|fixture_path\,\s+name)'],
        stdin=p1.stdout, stdout=subprocess.PIPE
    )
    p1.stdout.close()
    stdout, stderr = p2.communicate()
    stdout = stdout.decode('utf-8').split("\n")
    stdout = [x.strip() for x in stdout if x]

    for x in stdout:
        matches = re.search(pattern1, x)
        if matches:
            result.append(matches.group('fixture'))
            continue
        matches = re.search(pattern2, x)
        if matches:
            result.append(matches.group('fixture'))
            continue
        matches = re.search(pattern3, x)
        if matches:
            result.append(matches.group('fixture'))
            continue
    return result


def copy_module(module, upstream_dir):
    upstream = os.path.realpath(upstream_dir)
    dest = UPSTREAM_MODULE.format(upstream, module)
    src = DOWNSTREAM_MODULE.format(TOP_LEVEL_DIR, module)
    shutil.copy(src, dest)


def copy_unit_tests(module, upstream_dir):
    # Handle deprecated modules
    if module.startswith('_'):
        module = module[1:]

    upstream = os.path.realpath(upstream_dir)
    dest = UPSTREAM_UNIT_TEST.format(upstream, module)
    src = DOWNSTREAM_UNIT_TEST.format(TOP_LEVEL_DIR, module)
    shutil.copy(src, dest)


def copy_unit_test_fixtures(module, upstream_dir):
    # Handle deprecated modules
    if module.startswith('_'):
        module = module[1:]

    fixtures = get_fixtures(module)
    upstream = os.path.realpath(upstream_dir)
    for fixture in fixtures:
        dest = UPSTREAM_FIXTURE_FILE.format(upstream, fixture)
        src = DOWNSTREAM_FIXTURE_FILE.format(TOP_LEVEL_DIR, fixture)
        shutil.copy(src, dest)


def stub_roles_dirs(module):
    # Create role containing all of your future functional tests
    for dir in ['defaults', 'tasks']:
        directory = '{0}/test/integration/targets/{1}/{2}'.format(TOP_LEVEL_DIR, module, dir)
        if not os.path.exists(directory):
            os.makedirs(directory)


def stub_roles_yaml_files(module):
    # Create default vars to contain any playbook variables
    for dir in ['defaults', 'tasks']:
        defaults_file = '{0}/test/integration/targets/{1}/{2}/main.yaml'.format(TOP_LEVEL_DIR, module, dir)
        touch(defaults_file)
    for file in ['setup.yaml', 'teardown.yaml']:
        defaults_file = '{0}/test/integration/targets/{1}/tasks/{2}'.format(TOP_LEVEL_DIR, module, file)
        touch(defaults_file)
    main_tests = '{0}/test/integration/targets/{1}/tasks/main.yaml'.format(TOP_LEVEL_DIR, module)

    template = JINJA_ENV.get_template('test_integration_targets_main.yaml')
    content = template.render()

    with open(main_tests, 'w') as fh:
        fh.write(content)


def stub_playbook_file(module):
    # Stub out the test playbook
    playbook_file = '{0}/test/integration/{1}.yaml'.format(TOP_LEVEL_DIR, module)

    template = JINJA_ENV.get_template('playbooks_module.yaml')
    content = template.render(module=module)

    fh = open(playbook_file, 'w')
    fh.write(content)
    fh.close()


def stub_library_file(module, extension):
    # Create your new module python file
    library_file = '{0}/library/modules/{1}{2}'.format(TOP_LEVEL_DIR, module, extension)

    template = JINJA_ENV.get_template('library_module.py')
    content = template.render(module=module)

    fh = open(library_file, 'w')
    fh.write(content)
    fh.close()


def stub_module_documentation(module):
    # Create the documentation link for your module
    documentation_file = '{0}/docs/modules/{1}.rst'.format(TOP_LEVEL_DIR, module)
    touch(documentation_file)


def touch(fname, times=None):
    with open(fname, 'a'):
        os.utime(fname, times)


def stub_unit_test_file(module, extension):
    test_dir_path = '{0}/test/unit/'.format(TOP_LEVEL_DIR)
    if not os.path.exists(test_dir_path):
        os.makedirs(test_dir_path)
    test_file = '{0}/test/unit/test_{1}{2}'.format(
        TOP_LEVEL_DIR, module, extension
    )

    template = JINJA_ENV.get_template('tests_unit_module.py')
    content = template.render(module=module)

    fh = open(test_file, 'w')
    fh.write(content)
    fh.close()


def unstub_roles_dirs(module):
    for dir in ['defaults', 'tasks']:
        directory = '{0}/test/integration/targets/{1}/{2}'.format(TOP_LEVEL_DIR, module, dir)
        if os.path.exists(directory):
            shutil.rmtree(directory)


def unstub_playbook_file(module):
    playbook_file = '{0}/test/integration/{1}.yaml'.format(TOP_LEVEL_DIR, module)
    if os.path.exists(playbook_file):
        os.remove(playbook_file)


def unstub_library_file(module, extension):
    library_file = '{0}/library/modules/{1}{2}'.format(TOP_LEVEL_DIR, module, extension)
    if os.path.exists(library_file):
        os.remove(library_file)


def unstub_module_documentation(module):
    documentation_file = '{0}/docs/modules/{1}.rst'.format(TOP_LEVEL_DIR, module)
    if os.path.exists(documentation_file):
        os.remove(documentation_file)


def unstub_unit_test_file(module, extension):
    test_dir_path = '{0}/test/unit/'.format(TOP_LEVEL_DIR)
    if not os.path.exists(test_dir_path):
        os.makedirs(test_dir_path)
    test_file = '{0}/test/unit/test_{1}{2}'.format(
        TOP_LEVEL_DIR, module, extension
    )
    if os.path.exists(test_file):
        os.remove(test_file)


def in_container():
    """Check to see if we are running in a container

    :return:
    """
    try:
        with open('/proc/1/cgroup') as fh:
            lines = fh.readlines()
    except IOError:
        return False
    if any('/docker/' in x for x in lines):
        return True
    return False


@click.group()
@click.option('-v', '--verbose', count=True, default=0,
              envvar='F5ANSIBLE_VERBOSE')
@click.pass_context
def cli(ctx, verbose):
    ctx.obj = Root(verbose)


@cli.command(name='module-upstream')
@click.argument('module', required=True)
def module_upstream(module):
    module = module_name(module)
    root_dest = '{0}/local/ansible/'.format(TOP_LEVEL_DIR)
    if not os.path.exists(root_dest):
        click.echo("The specified upstream directory does not exist", err=True)
        sys.exit(1)

    try:
        copy_module(module, root_dest)
        copy_unit_tests(module, root_dest)
        copy_unit_test_fixtures(module, root_dest)
        click.echo("Copy complete")
    except Exception as ex:
        click.echo(str(ex), err=True)
        sys.exit()


@cli.command(name='module-stub')
@click.argument('module', required=True)
def stub_module(module):
    """Create module stubs

    This command can be used to create the stub files necessary to start
    work on a new module.
    """
    if not HAS_JINJA:
        click.echo("The jinja library is required", err=True)
        sys.exit(1)
    module, extension = os.path.splitext(module)
    extension = extension + '.py' if extension == '' else extension
    stub_roles_dirs(module)
    stub_roles_yaml_files(module)
    stub_playbook_file(module)
    stub_library_file(module, extension)
    stub_module_documentation(module)
    stub_unit_test_file(module, extension)


@cli.command(name='issue-stub')
@click.argument('module', required=True)
@click.argument('issue', required=True)
def stub_issue(module, issue):
    if not HAS_JINJA:
        click.echo("The jinja library is required", err=True)
        sys.exit(1)


@cli.command(name='module-unstub')
@click.argument('module', required=True)
def unstub_module(module):
    module, extension = os.path.splitext(module)
    extension = extension + '.py' if extension == '' else extension
    unstub_roles_dirs(module)
    unstub_playbook_file(module)
    unstub_library_file(module, extension)
    unstub_module_documentation(module)
    unstub_unit_test_file(module, extension)


@cli.command(name='issue-unstub')
@click.argument('module', required=True)
@click.argument('issue', required=True)
def unstub_issue(module, issue):
    pass


@cli.command(name='container-build')
@click.argument('service', nargs=-1)
@click.option('--site-override',
              default=None,
              help='Full path to a local docker-compose.site.yaml override. If this is specified, the default override file will not be used.')
def build_container(service, site_override):
    if in_container():
        click.echo("This command can only be run OUTSIDE a container", err=True)
        sys.exit(1)
    services = list_available_docker_compose_services()
    if service not in services:
        click.echo("The provided service is invalid.", err=True)
        click.echo("Available services are {0}".format(', '.join(services)))
        sys.exit(1)
    _build_container(service, site_override)


@cli.command(name='container-start')
@click.argument('service', required=True)
@click.option('--alias-host', default='1.2.3.4')
@click.option('--site-override',
              default=None,
              help='Full path to a local docker-compose.site.yaml override. If this is specified, the default override file will not be used.')
@click.pass_obj
def start_container(cli, service, alias_host, site_override):
    """Runs a given container

    Will start a named container (service) on the local host's docker.

    This command will take into account a user's docker site.yaml file
    should it exist.

    For the container to provide a link back to the host (for cases when
    you are communicating with a VM on the host) this command will attempt
    to add a local ifconfig alias for lo0; see `create_lo_interface_alias`.

    :param service:
    :param alias_host:
    :return:
    """
    if in_container():
        click.echo("This command can only be run OUTSIDE a container", err=True)
        sys.exit(1)
    delete_lo_interface_alias(alias_host)
    create_lo_interface_alias(alias_host)
    services = list_available_docker_compose_services()
    if service not in services:
        click.echo("The provided service is invalid.", err=True)
        click.echo("Available services are {0}".format(', '.join(services)))
        sys.exit(1)
    _start_container(service, site_override)


@cli.command(name='containers-fetch')
@click.option('--site-override',
              default=None,
              help='Full path to a local docker-compose.site.yaml override. If this is specified, the default override file will not be used.')
def fetch_containers(site_override):
    """Fetches containers for use in dev/test

    :return:
    """
    if in_container():
        click.echo("This command can only be run OUTSIDE a container", err=True)
        sys.exit(1)

    compose_file = '{0}/devtools/docker-compose.yaml'.format(TOP_LEVEL_DIR)
    if site_override:
        extend_file = site_override
        if not os.path.exists(extend_file):
            click.echo("The specified override '{0}' was found found".format(extend_file), err=True)
            sys.exit(1)
    else:
        extend_file = '{0}/devtools/docker-compose.site.yaml'.format(TOP_LEVEL_DIR)
    cmd = ['docker-compose', '-f', compose_file]
    if os.path.exists(extend_file):
        cmd += ['-f', extend_file]
    cmd += ['pull']

    proc = subprocess.Popen(cmd)
    stdout, stderr = proc.communicate()
    if proc.returncode != 0:
        click.echo(stderr.decode('utf-8'), err=True)
        sys.exit(1)


@cli.command(name='sanity-test')
@click.option('--test', default=None)
@click.option('--module', default=None)
@click.option('--python', default=None,
              help='The python version that you want to test against. This parameter is ignored if you are in a container.')
@click.option('--ansible', default=False, is_flag=True,
              help='Runs Ansible form of the unit tests. Requires an installation of ansible at "local/ansible".')
@click.option('--site-override',
              default=None,
              help='Full path to a local docker-compose.site.yaml override. If this is specified, the default override file will not be used.')
def test_sanity(test, module, python, ansible, site_override):
    """Run sanity tests

    """
    compose_file = None
    extend_file = None

    if in_container():
        if python:
            click.echo("Python parameter is ignored while in a container")
        python = '{0}.{1}'.format(sys.version_info.major, sys.version_info.minor)
    elif not in_container():
        if not python:
            python = '2.7'
        compose_file = '{0}/devtools/docker-compose.yaml'.format(TOP_LEVEL_DIR)
        if site_override:
            extend_file = site_override
            if not os.path.exists(extend_file):
                click.echo("The specified override '{0}' was found found".format(extend_file), err=True)
                sys.exit(1)
        else:
            extend_file = '{0}/devtools/docker-compose.site.yaml'.format(TOP_LEVEL_DIR)

    if ansible:
        if in_container():
            cmd = ['./local/ansible/test/runner/ansible-test', 'sanity', '--python', python, module]
            logger.debug('Run command "{0}"'.format(' '.join(cmd)))
            proc = subprocess.Popen(cmd)
            stdout, stderr = proc.communicate()
            if proc.returncode != 0:
                click.echo(stderr.decode('utf-8'), err=True)
                sys.exit(1)
        else:
            cmd = ['docker-compose', '-f', compose_file]
            if extend_file:
                cmd += ['-f', extend_file]
            cmd += [
                'run', '--rm', 'py{0}'.format(python),
                './local/ansible/test/runner/ansible-test',
                'sanity', '--python', python, module]
            logger.debug('Run command "{0}"'.format(' '.join(cmd)))
            proc = subprocess.Popen(cmd)
            stdout, stderr = proc.communicate()
            if proc.returncode != 0:
                click.echo(stderr.decode('utf-8'), err=True)
                sys.exit(1)
    else:
        if in_container():
            cmd = ['pytest', '-s', '/here/test/unit/test_{0}.py'.format(module)]
            logger.debug('Run command "{0}"'.format(' '.join(cmd)))
            proc = subprocess.Popen(cmd)
            stdout, stderr = proc.communicate()
            if proc.returncode != 0:
                click.echo(stderr.decode('utf-8'), err=True)
                sys.exit(1)
        else:
            cmd = ['docker-compose', '-f', compose_file]
            if extend_file:
                cmd += ['-f', extend_file]
            cmd += [
                'run', '--rm', 'py{0}'.format(python),
                'pytest', '-s', '/here/test/unit/test_{0}.py'.format(module)]
            logger.debug('Run command "{0}"'.format(' '.join(cmd)))
            proc = subprocess.Popen(cmd)
            stdout, stderr = proc.communicate()
            if proc.returncode != 0:
                click.echo(stderr.decode('utf-8'), err=True)
                sys.exit(1)


@cli.command(name='units-test')
@click.argument('module', required=True, default=None)
@click.option(
    '--python',
    default=None,
    help='The python version that you want to test against. '
         'This parameter is ignored if you are in a container.'
)
@click.option(
    '--ansible',
    default=False,
    is_flag=True,
    help='Runs Ansible form of the unit tests. '
         'Requires an installation of ansible at "local/ansible".'
)
@click.option(
    '--site-override',
    default=None,
    help='Full path to a local docker-compose.site.yaml override. '
         'If this is specified, the default override file will not be used.'
)
def test_unit(module, python, ansible, site_override):
    """Run unit tests of a given module

    The module parameter is used to select which unit tests you want to run.
    """
    compose_file = None
    extend_file = None

    if in_container():
        if python:
            click.echo("Python parameter is ignored while in a container")
        python = '{0}.{1}'.format(sys.version_info.major, sys.version_info.minor)
    elif not in_container():
        if not python:
            python = '2.7'
        compose_file = '{0}/devtools/docker-compose.yaml'.format(TOP_LEVEL_DIR)
        if site_override:
            extend_file = site_override
            if not os.path.exists(extend_file):
                click.echo("The specified override '{0}' was found found".format(extend_file), err=True)
                sys.exit(1)
        else:
            extend_file = '{0}/devtools/docker-compose.site.yaml'.format(TOP_LEVEL_DIR)

    if ansible:
        if in_container():
            cmd = './local/ansible/test/runner/ansible-test units --python {0} {1}'.format(python, module)
            result = run(cmd, hide=True, warn=True, pty=True)
            if not result.ok:
                click.echo(resutl.stderr, err=True)
                sys.exit(1)
        else:
            cmd = ['docker-compose', '-f', compose_file]
            if extend_file:
                cmd += ['-f', extend_file]
            cmd += [
                'run', '--rm', 'py{0}'.format(python),
                './local/ansible/test/runner/ansible-test',
                'units', '--python', python, module
            ]
            logger.debug('Run command "{0}"'.format(' '.join(cmd)))
            proc = subprocess.Popen(cmd)
            stdout, stderr = proc.communicate()
            if proc.returncode != 0:
                click.echo(stderr.decode('utf-8'), err=True)
                sys.exit(1)
    else:
        if in_container():
            cmd = 'pytest -s /here/test/unit/test_{0}.py'.format(module)
            result = run(cmd, hide=True, warn=True, pty=True)
            if not result.ok:
                click.echo(resutl.stderr, err=True)
                sys.exit(1)
        else:
            cmd = ['docker-compose', '-f', compose_file]
            if extend_file:
                cmd += ['-f', extend_file]
            cmd += [
                'run', '--rm', 'py{0}'.format(python),
                'pytest', '-s', '/here/test/unit/test_{0}.py'.format(module)]
            logger.debug('Run command "{0}"'.format(' '.join(cmd)))
            proc = subprocess.Popen(cmd)
            stdout, stderr = proc.communicate()
            if proc.returncode != 0:
                click.echo(stderr.decode('utf-8'), err=True)
                sys.exit(1)


if __name__ == '__main__':
    # list harness
    # show harness-command --harness-name
    # pull container
    # merge junit (use for DCI before uploading)
    # upload junit (send junit results to dci)
    # test integration (python ver, bigip ver, list of modules; default all)
    # test unit --sdk --no-sdk
    cli()
