# Copyright 2016. F5 Networks, Inc. See End User License Agreement (EULA) for
# license terms. Notwithstanding anything to the contrary in the EULA, Licensee
# may copy and modify this software product for its internal business purposes.
# Further, Licensee may upload, publish and distribute the modified version of
# the software product on devcentral.f5.com.

cli script f5.iapp.1.5.0.cli {

#  Initialization proc for all templates.
#  Parameters "start" and "stop" or "end".
proc iapp_template { action } {
    switch $action {
        start {
            catch { tmsh::modify sys scriptd log-level debug }
            set ::clock_clicks [clock clicks]
            puts "\nStarting iApp $tmsh::app_template_name [clock format \
                [clock seconds] -format {%m/%d/%Y %T}]\n"
            tmsh::log info "Starting iApp template $tmsh::app_template_name"
        }
        stop -
        end {
            if { [info exists ::substa_debug] } {
                puts $::substa_debug
            }
            puts "\nEnding iApp $tmsh::app_template_name [clock format \
                [clock seconds] -format {%m/%d/%Y %T}]\nRun time [expr \
                { ([clock clicks] - $::clock_clicks) / 1000 }] msec\n"
            tmsh::log info "Ending iApp template $tmsh::app_template_name"
        }
    }
    set ::HTTP_CONTENT_TYPES { application/(css\|css-stylesheet\|doc\|excel\|javascript\|json\|lotus123\|mdb\|mpp\|msaccess\|msexcel\|ms-excel\|mspowerpoint\|ms-powerpoint\|msproject\|msword\|ms-word\|photoshop\|postscript\|powerpoint\|ps\|psd\|quarkexpress\|rtf\|txt\|visio\|vnd\\.excel\|vnd\\.msaccess\|vnd\\.ms-access\|vnd\\.msexcel\|vnd\\.ms-excel\|vnd\\.mspowerpoint\|vnd\\.ms-powerpoint\|vnd\\.ms-pps\|vnd\\.ms-project\|vnd\\.msword\|vnd\\.ms-word\|vnd\\.ms-works\|vnd\\.ms-works-db\|vnd\\.powerpoint\|vnd\\.visio\|vnd\\.wap\\.cmlscriptc\|vnd\\.wap\\.wmlc\|vnd\\.wap\\.xhtml\\+xml\|vnd\\.word\|vsd\|winword\|wks\|word\|x-excel\|xhtml\\+xml\|x-java-jnlp-file\|x-javascript\|x-json\|x-lotus123\|xls\|x-mdb\|xml\|x-mscardfile\|x-msclip\|x-msexcel\|x-ms-excel\|x-mspowerpoint\|x-msproject\|x-ms-project\|x-msword\|x-msworks-db\|x-msworks-wps\|x-photoshop\|x-postscript\|x-powerpoint\|x-ps\|x-quark-express\|x-rtf\|x-vermeer-rpc\|x-visio\|x-vsd\|x-wks\|x-word\|x-xls\|x-xml) image/(photoshop\|psd\|x-photoshop\|x-vsd) text/(css\|html\|javascript\|json\|plain\|postscript\|richtext\|rtf\|vnd\\.wap\\.wml\|vnd\\.wap\\.wmlscript\|wap\|wml\|x-component\|xml\|x-vcalendar\|x-vcard) }
}

proc iapp_is { args } {
    set up_var [lindex $args 0]
    upvar $up_var var
    if { [info exists var] } {
        foreach val [lrange $args 1 end] {
            if { [subst $var] eq $val } {
                return 1
            }
        }
    }
    return 0
}

proc iapp_substa { args } {
    upvar substa_in  argx \
          substa_out rval
    set   argx $args

    # check the explicit value first.
    # multiple layers of variable substitution requires multiple subst.
    # error occurs here if any of the substituted variables do not exist
    # valid wildcard (*) array entries will fail here first.
    uplevel {
        append ::substa_debug "\n$substa_in"
        if { [info exists [set substa_in]] } {
            set substa_out [subst $$substa_in]
            set substa_out [subst $substa_out]
        } else {
            # since explicit value did not exist, try a wildcard value.
            # substitute "*" as the array key and repeat.
            set substa_tmp [split $substa_in "()"]
            set substa_in "[lindex $substa_tmp 0](*)"
            append ::substa_debug "*"
            if { [info exists [set substa_in]] } {
                set substa_out [subst $$substa_in]
                set substa_out [subst $substa_out]
            } else {
                error "substa \"$substa_in\" array value not found"
            }
        }
    }
    return $rval
}

proc iapp_conf { args } {

    # Return value $object_name is set to the first word in $arg that
    # contains an underscore, since the position of the object name in
    # tmsh syntax is not consistent.
    set args [join $args]
    set object_name [lindex $args [lsearch -glob $args "*_*"]]

    # Global array ::tmsh_history persists between calls to iapp_conf
    # in order to suppress duplicate commands.
    if { ![info exists ::tmsh_history($args)] } {
        set ::tmsh_history($args) 1
        iapp_debug $args
        switch -exact -- [string range $args 0 5] {
            create { tmsh::create [string range $args 7 end] }
            modify { tmsh::modify [string range $args 7 end] }
            delete { tmsh::delete [string range $args 7 end] }
            default { error "iapp_conf illegal parameter" }
        }
    }
    return $object_name
}

proc iapp_make_safe_password { password } {
    return [string map { \' \\\' \" \\\" \{ \\\{ \} \\\} \; \\\; \| \\\| \# \\\# \  \\\  \\ \\\\ } $password]
}

proc iapp_pull { loc items_list } {
    upvar $items_list items
    if { [set item [lindex $items $loc]] != "" } {
        set items [lreplace $items $loc $loc]
    }
    return $item
}

proc iapp_process_flags { flags_array args_list } {
    upvar $flags_array flags
    upvar $args_list args

    if { [set dubdash [lsearch $args "--"]] != -1 } {
        set args [lreplace $args $dubdash $dubdash];
    } else {
        set dubdash end
    }

    foreach flag [array names flags] {
        while { [set ptr [lsearch [lrange $args 0 $dubdash] $flag]] != -1 } {
            set args [lreplace $args $ptr $ptr];

            # we want to run the code in the flags_array at the calling
            # proc's level so that the variables that it sets up are
            # available there.
            set access_var [format "$%s(%s)" $flags_array $flag]
            set command [subst -nocommands { set ptr $ptr ; subst $access_var }]

            uplevel 1 $command
        }
    }
    return $args
}

proc iapp_tmos_version { args } {
    set cversion [tmsh::version]
    if { $cversion eq "" } {
        tmsh::log err "unable to determine TMOS version"
        error "unable to determine TMOS version"
    }

    # if no op+version was specified, just return the version
    if { $args eq "" } { return $cversion }
    if { [llength $args] > 2 } {
        error "Too many arguments"
    }

    set op [lindex $args 0]; # operator
    set NOTFOUND -1
    # constrain to valid operators - adding more is fine as long as
    # they are supported by [expr] (and makes sense)
    if { [lsearch -exact { < > <= >= == != } $op] == $NOTFOUND } {
        tmsh::log err "illegal operator: $op"
        error "illegal operator: $op"
    }

    set tversion [lindex $args 1]; # target version
    # one or two decimal digits, optionally followed by 0-2 complete groups of
    # dots followed by one or two decimal digits with nothing before or after
    set regex {^\d{1,2}(\.\d{1,2}){0,2}$}
    if { ! [regexp -- $regex $tversion] } {
        tmsh::log err "cannot parse version from: $tversion"
        error "cannot parse version from: $tversion"
    }

    # p=>prefix, c=>current, t=>target
    foreach p { c t } {
        # extract major/minor/point components
        scan [set [set p]version] "%d.%d.%d" [set p]mjr [set p]mnr [set p]pnt
        # ensure that these are each set to at least 0
        foreach level { mjr mnr pnt } {
            if { ! [info exists [set p]${level}] } { set [set p]${level} 0 }
        }
        # turn them into one big number that we can compare
        # leave room in-between just to be safe
        set [set p]num [expr {
            [set [set p]mjr]*1000000 +
            [set [set p]mnr]*10000 +
            [set [set p]pnt]*100
        }]
    }
    # a simple numeric comparison is all that is needed at this point
    return [eval expr $cnum $op $tnum ]
}

proc iapp_safe_display { args } {
    # strings sent to APL must be truncated to 65535 bytes, see BZ435592
    if { [string length [set [set args]]] > 65535 } {
        set last_newline [string last "\n" [set [set args]] 65500]
        return "[string range [set [set args]] 0 $last_newline]Error: Too many items for display"
    } else {
        return [set [set args]]
    }
}

proc iapp_get_items { args } {

    # Set default values.
    set error_msg  "iapp_get_items $args:"
    set do_binary  0
    set nocomplain 0
    set items      ""
    set join_char  "\n"
    set recursive  "recursive"
    set com_dir    "/Common"
    set loc_dir    "[tmsh::pwd]"

    # Set up flag-related work.
    array set flags  {
        -exists      { [set do_binary 1] }
        -nocomplain  { [set nocomplain 1] }
        -list        { [set join_char " "] }
        -norecursive { [set recursive ""] }
        -local       { [set com_dir   ""] }
        -dir         { [set loc_dir      [iapp_pull $ptr args]] }
        -filter      { [set filter_field [iapp_pull $ptr args]] \
                       [set filter_op    [iapp_pull $ptr args]] \
                       [set filter_value [iapp_pull $ptr args]] }
    }
    iapp_process_flags flags args

    # Get system object names in all requested directories.
    set save_dir [tmsh::pwd]
    foreach dir [lsort -unique "$com_dir $loc_dir"] {
        tmsh::cd $dir
        set tmsh_rval [catch {
            foreach obj [tmsh::get_config $args $recursive] {

                if { [info exists filter_field] } {
                    if { $filter_field eq "NAME" } {
                        set val [tmsh::get_name $obj]
                    } else {
                        # If get_field_value throws error, assume "none" value
                        if { [catch {
                            set val [tmsh::get_field_value $obj $filter_field]
                            # strip quotes per BZ442531
                            set val [string map {\" ""} $val]
                        }]} { set val none }
                    }
                    # Non-Tcl operators =~ and !~ added for extra flexibility
                    if { $filter_op eq "=~" } {
                        set filter "\[regexp \"$filter_value\" \"$val\"\]"
                    } elseif { $filter_op eq "!~" } {
                        set filter "!\[regexp \"$filter_value\" \"$val\"\]"
                    } else {
                        set filter "\\\"$val\\\" $filter_op \\\"$filter_value\\\""
                    }
                    # If filter fails, skip to next object
                    if { ![eval expr $filter] } {
                        continue
                    }
                }
                # string map catches /Common added by ltm profile ntlm,
                # which is unlike all other ltm profile return values.
                lappend items $dir/[string map {/Common/ ""} [tmsh::get_name $obj]]
            }
        } err ]
    }
    tmsh::cd $save_dir

    # array keys: $do_binary,$tmsh_rval,$nocomplain. Do not insert whitespace.
    array set rval {
        0,0,0 {[join $items $join_char]}
        0,0,1 {[join $items $join_char]}
        0,1,0 {[error "$error_msg $err"]}
        0,1,1 {}
        1,0,0 {[llength $items]}
        1,0,1 {[llength $items]}
        1,1,0 {0}
        1,1,1 {0}
    }

    return [subst $rval($do_binary,$tmsh_rval,$nocomplain)]
}

proc iapp_get_provisioned { args } {

    array set lnum {
        none      0
        minimum   1
        nominal   2
        dedicated 3
    }

    # Set defaults.
    set required minimum
    set do_binary 1

    # Set up flag-related work.
    array set flags  {
        -is          { [set required [iapp_pull $ptr args]] }
        -level       { [set do_binary 0] }
    }
    iapp_process_flags flags args
    if { [llength $args] > 1 } {
        error "Too many arguments"
    }

    # If checking for AM provisioning on TMOS < 11.4,
    # check for WAM provisioning instead.
    if { $args eq "am" && [iapp_tmos_version < 11.4] } {
        set args "wam"
    }

    # Get the provisioning level. If blank, assume none.
    # Proc only checks 1 module at a time, so only 1 object is returned.
    if { [catch {
        set obj [tmsh::get_config sys provision $args]
        set level [tmsh::get_field_value [lindex $obj 0] level]
    }]} { set level none }

    if { $do_binary } {
        return [expr { $lnum($level) >= $lnum($required) }]
    } else {
        return $level
    }
}

proc iapp_get_user { args } {

    # Set defaults.
    set do_role 0
    set do_binary 0

    # Set up flag-related work.
    array set flags  {
        -is_admin    { [set do_binary 1] }
    }
    iapp_process_flags flags args
    if { [llength $args] > 1 } {
        error "Too many arguments"
    }

    # Show user auth was introduced in v11.6
    set user "unknown"
    catch {
        set user [tmsh::show auth user field-fmt]
    } err
    if { $do_binary } {
        return [expr { $user == "unknown"
        || [string first "role " $user] == -1
        || [string first "role admin" $user] != -1
        || [string first "role resource-admin" $user] != -1 }]
    } else {
        return $user
    }
}

proc iapp_destination { args } {
    # Set defaults. Flag actions may overwrite defaults later.
    set route_domain    0
    set do_mask         0
    set port            0

    # Set up flag-based actions.
    array set flags  {
        -route_domain { [set route_domain [iapp_pull $ptr args]] }
        -mask         { [set do_mask 1] }
        -length       { [set cidr_bits [iapp_pull $ptr args]] }
    }

    if { [llength [set non_switches [iapp_process_flags flags args]]] > 2 } {
        error "Too many arguments"
    }
    if { [llength $non_switches] == 2 } { set port [lindex $non_switches 1] }
    set addr [lindex $non_switches 0]


    # Detect a CIDR mask and pull it off the addr string
    if { [set loc [string first "/" $addr end-4]] != -1 } {
        set cidr_bits [string range $addr [expr {$loc + 1}] end]
        set addr [string range $addr 0 [expr {$loc - 1}]]
    }

    # Pull the route-domain off the addr string, but only use it as the
    # route domain if it wasn't overridden by -route_domain flag.
    if { [string first "%" $addr] != -1 } {
        if { $route_domain == 0 } {
            # route-domain is still default, so use value from addr string
            set route_domain [lindex [split $addr "%"] 1]
        }
        set addr [lindex [split $addr "%"] 0]
    }

    if { $do_mask } {

        # Define the delta between ipv4 and ipv6.
        # length: ipv4 mask is 32 bits, ipv6 is 128 bits.
        # group: ipv4 is grouped in octets, ipv6 as 16 bit words.
        # format: ipv4 is decimal notation, ipv6 is hex.
        # format1 also has the delimiter, format2 does not.
        array set v {
            0,length  32
            0,group   8
            0,format1 d.
            0,format2 d
            1,length  128
            1,group   16
            1,format1 .4x:
            1,format2 .4x
        }
        set is_ipv6 [string match "*:*:*" $addr]

        # Soften result of an illegal -length parameter.
        if { ![info exists cidr_bits] || $cidr_bits > $v($is_ipv6,length) } {
            set cidr_bits $v($is_ipv6,length)
        } elseif { $cidr_bits < 0 } {
            set cidr_bits 0
        }

        # Loop on the full length of the mask: 32 bits for ipv4, 128 for ipv6
        for { set octet 0; set i 0 } { $i < $v($is_ipv6,length) } { incr i } {

           # Take a break at intervals to save the grouping and add delimiter.
           # Interval is 8 bits for ipv4 and 16 bits for ipv6.
           if { $i && ![expr {$i % $v($is_ipv6,group)}] } {

               # Add the grouping and delimiter to the mask, then reset.
               append mask [format %$v($is_ipv6,format1) $octet]
               set octet 0
           }
           # Shift the prior bits left by multiplying by 2.
           # Then add the current bit, which is 1 if part of the mask, 0 if not.
           # Current bit is part of the mask if $i < number of bits in the mask.
           set octet [expr { 2 * $octet + ($i < $cidr_bits) }]
        }
        # Add the final grouping, then return the finished mask.
        set ret_val [format $mask%$v($is_ipv6,format2) $octet]

    } else {

        # calculate a destination
        # the route domain might be a name and we need a number.
        if { ![string is integer $route_domain] } {
            set route_domains [tmsh::get_config "/ net route-domain $route_domain"]
            if { [llength $route_domains] != 1 } {
                error "no such route domain: $route_domain"
            }
            # since we have already determined that the list is 1 long,
            # this explicit reference to element 0 is safe
            set route_domain [tmsh::get_field_value [lindex $route_domains 0] "id"]
        }

        set route_domain [expr { $route_domain == 0 ? "" : "%$route_domain" }]

        # 0 and * represent wildcard port assignments in the GUI,
        # but TMSH requires the string 'any' to specify a wildcard.
        if { $port == 0 || $port == "*" } {
            set port any
        }

        # Build the final destination. Use ":" for node names even if ipv6.
        set is_ipv6_literal [string match "*:*:*" $addr]
        set addr_delimiter  [expr { $is_ipv6_literal ? "." : ":" }]
        set ret_val ${addr}${route_domain}${addr_delimiter}${port}
    }
    return $ret_val
}

proc iapp_pool_members { args } {

    # Set defaults.
    array set fields {
        address          addr
        port             port
        port-secure      port_secure
        connection-limit connection_limit
        priority-group   priority
        ratio            ratio
    }
    set route_domain ""
    set port_override -1
    set aaa_domain 0
    set aaa_priority -1
    set app_service ""
    # Set up flag-related work.
    array set flags {
        -fields       { [array set fields  [iapp_pull $ptr args]] }
        -route_domain { [set route_domain  [iapp_pull $ptr args]] }
        -port         { [set port_override [iapp_pull $ptr args]] }
        -aaa_domain   { [set aaa_domain    1] }
        -aaa_pool     { [set aaa_priority  0] }
        -noapp        { [set app_service " app-service none"] }
    }
    iapp_process_flags flags args

    # Identify the non-address/non-port fields. These go inside braces in tmsh.
    set nonport_fields [lsearch -all -not -inline -regexp \
        [array names fields] {address|port|port-secure}]

    set members ""
    foreach row [join $args] {

        # Skip invalid table rows.
        if { [llength [join $row]] %2 == 1 } {
            continue
        }

        # Import APL table into an array for processing.
        array unset columns
        array set columns [join $row]
        set addr $columns($fields(address))

        # Identify the port number, either from table columns or by -port flag.
        if { $port_override != -1 } {
            set port $port_override
        } elseif { [info exists columns($fields(port))] } {
            set port $columns($fields(port))
        } elseif { [info exists columns($fields(port-secure))] } {
            set port $columns($fields(port-secure))
        } else {
            set port 80
        }

        # If specified, strip entered route domain and append the flag value.
        if { $route_domain != "" } {
            set addr [lindex [split $addr "%"] 0]
            set addr "$addr%$route_domain"
        }

        # If -aaa_domain, use domain controller format, otherwise use pool format
        if { $aaa_domain } {
            append members " $columns($fields(host)) \{ ip $addr $app_service \}"
        } else {
            append members " [iapp_destination $addr $port] \{"

            # Transfer non-port fields from the table to the tmsh string.
            foreach name $nonport_fields {
                if { [info exists columns($fields($name))] } {
                    append members " $name $columns($fields($name))"
                }
            }

            # If -aaa_pool, add priority field with incrementing value.
            # This is required by APM.
            if { $aaa_priority >= 0 } {
                append members " priority-group [incr aaa_priority]$app_service"
            }
            append members " \}"
        }
    }

    return "[expr { $aaa_domain ? "" : "members " }][expr { $members eq "" \
        ? "none" : "replace-all-with \{ $members \}" }]"
}

proc iapp_debug { args } {

    # Passwords should be obscured in all logs. Fields shown here are handled
    # in this proc, but the global variable may be overwritten if alternate
    # fields should be obscured.
    if { ![info exists ::SENSITIVES] } {
        set ::SENSITIVES {
            account-password
            admin-encrypted-password
            PASSWORD
            password
            passwd
            proxy-ca-passphrase
            secret
        }
    }

    # look for any of the sensitive words, and replace the word that follows it
    set regex "(\\m([join $::SENSITIVES |])\\M)\\s+\[^\\s\]*"
    regsub -all $regex [join $args] {\1 -OBSCURED-} args
    regsub -all "(<Password.*>).*(</Password>)" $args {\1-OBSCURED-\2} args

    set lev [tmsh::get_field_value [lindex [tmsh::get_config sys scriptd \
        log-level] 0] log-level]
    if { $lev eq {debug} } {
        puts $args
    }
}

# The apm_config proc provides a tmsh pre-processor for APM
# configuration, which in most cases will drastically reduce
# implementation code. To configure APM with this proc, pass
# it an array of object names and associated meta-tag substitutions.
# Each object must be categorized as a profile, a resource, or
# a policy-item. APM agents and customization-groups are derived
# from these 3 categories as needed.
#
# apm_config's return value is a list of the APM profiles defined
# in the argument and instantiated by the proc. This allows the
# procedure call to be embedded directly into a virtual server
# definition.
#
# These universal meta-tags may be placed anywhere in the array:
# <ITEM> The object name, eg. apm_access
# <PREFIX> The app name, including folder, eg. /Common/my_app.app/my_app
#
# Profile objects require the following meta-tags:
# <PROFILE_TYPE> The tmsh object type, eg. "apm profile access"
# <PROFILE_DEF>  The body of the object, eg.:
#     "access-policy <PREFIX>
#      defaults-from /Common/access
#      eps-group <PREFIX>_eps
#      errormap-group <PREFIX>_errormap
#      general-ui-group <PREFIX>_general_ui"
#
# apm_config will automatically create default customization-groups
# for the "-group" lines specified in access profile definitions.
# In the above example, there is no need to additionally specify a
# customization-group for errormap and general-ui.
#
# <PROFILE_TYPE> is a catch-all for other APM types, eg:
#      apm_sso {
#          <PROFILE_TYPE> {apm sso kerberos}
#          <PROFILE_DEF>  "account-name <USER>
#                          account-password <PASS>
#                          realm <REALM>" }
#
# In the example above, <PROFILE_TYPE> and <PROFILE_DEF> are
# apm_config meta-tags, while <USER>, <PASS>, and <REALM> must
# be substituted before calling apm_config, eg. if these tags are
# defined in $pre_proc_map, they may be substituted with:
# array set apm_map [string map [subst $pre_proc_map] [array get apm_map]]
#
# Resource objects require the following meta-tags:
# <RESOURCE_TYPE> The apm resource object type, eg. "webtop"
# <RESOURCE_DEF>  The body of the object, eg.:
#     "customization-group <ITEM>
#      minimize-to-tray false
#      webtop-type full"
#
# In the above example, a customization-group is specified. Any
# customization-group is assumed to be blank unless further defined by the
# <GROUP_DEF> meta-tag, eg. <GROUP_DEF> {type webtop}
#
# Policy-item objects are defined by the following meta-tags:
# <AGENT_TYPE>   default "resource-assign"
# <AGENT_DEF>    default "customization-group <ITEM>"
# <ITEM_AGENT>   default "agents { <ITEM>_ag { type <AGENT_TYPE> }}"
# <ITEM_CAPTION> default "<ITEM>"
# <ITEM_COLOR>   default "1"
# <ITEM_TYPE>    default "action"
# <ITEM_RULES>   defaults to a set of expressions/next-items where specified
# <RULE_CAPTION_0> default "fallback"
# <RULE_CAPTION_1> default "Successful"
# <RULE_CAPTION_2> default "successful"
#
# apm_config generates the APM agent and customization-group definitions
# as required for each policy-item, but specific objects may be defined
# by using the <AGENT_DEF> and <GROUP_DEF> meta-tags.
# To suppress the formation of an APM agent, specify <ITEM_AGENT> {}.

proc iapp_apm_config { args } {

    set app_service ""
    array set flags  {
        -noapp       { [set app_service "app-service none\n   "] }
    }
    iapp_process_flags flags args

    upvar [lindex $args 0] map_array

    # Pull $prefix from the array
    set prefix $map_array(prefix)
    unset map_array(prefix)

    # Stencils for creating apm objects
    set access_form \
       "<TMSH_CREATE> apm policy access-policy <ITEM> {\n   \
          $app_service    caption general\n   \
          start-item <ACCESS_START_ITEM>\n   \
          default-ending <ACCESS_ENDING>\n   \
          items replace-all-with {\n<ACCESS_ITEMS>    }\n}"

    set profile_form "<TMSH_CREATE> <PROFILE_TYPE> <ITEM> {\n   \
        $app_service    <PROFILE_DEF>\n}"

    set resource_form "<TMSH_CREATE> apm resource <RESOURCE_TYPE> <ITEM> {\n   \
        $app_service    <RESOURCE_DEF>\n}"

    set agent_form "<TMSH_CREATE> apm policy agent <AGENT_TYPE> <ITEM>_ag {\n   \
        $app_service    <AGENT_DEF>\n}"

    set group_form "<TMSH_CREATE> apm policy customization-group <ITEM> {\
        $app_service    <GROUP_DEF>}"

    set agent_group_form "<TMSH_CREATE> apm policy customization-group <ITEM>_ag {\
        $app_service    <GROUP_DEF>}"

    set policy_item_form "<TMSH_CREATE> apm policy policy-item <ITEM> {
    $app_service    <ITEM_AGENT>caption <ITEM_CAPTION>
    color <ITEM_COLOR>
    <ITEM_TYPE>
    <ITEM_RULES>\n}"

    # 1st round apm string map
    set default_map_1 {
        <ACCESS_ITEM> {}
        <AGENT_DEF> "customization-group <ITEM>_ag"
        <ITEM_AGENT> "agents replace-all-with {
        <ITEM>_ag { type <AGENT_TYPE> }}\n    "
        <ITEM_CAPTION> <ITEM>
        <ITEM_COLOR> {1}
        <ITEM_TYPE> "item-type action"
        <ITEM_RULES> "rules
        {[expr {[string first <RULE_NEXT_2> $map_array($item)] != -1 ? "{
            caption <RULE_CAPTION_2>
            expression <RULE_EXPR_2>
            next-item ${prefix}_<RULE_NEXT_2>
        }":""}][expr {[string first <RULE_NEXT_1> $map_array($item)] != -1 ? "{
            caption <RULE_CAPTION_1>
            expression <RULE_EXPR_1>
            next-item ${prefix}_<RULE_NEXT_1>
        }":""}]{
            caption <RULE_CAPTION_0>
            next-item ${prefix}_<RULE_NEXT_0>
        }}"
    }

    # 2nd round apm string map
    set default_map_2 {
        <ITEM> [expr { $item eq {default} ? "$prefix" : "${prefix}_$item" }]
        <PREFIX> $prefix
        <LOCAL_PATH> [string map {/ :} $prefix]
        <GROUP_DEF> ""
        <AGENT_TYPE> "resource-assign"
        <RULE_CAPTION_2> "successful"
        <RULE_CAPTION_1> "Successful"
        <RULE_CAPTION_0> "fallback"
    }

    # Build APM access profile and access-policy from the access_form.
    # Tags <ACCESS_ITEM> and <ACCESS_ENDING> are picked up from
    # $map_array items. <ITEM> and <GROUP_DEF> are picked up from
    # $default_map_2.
    foreach item [lsort [array names map_array]] {

        # Pick up the <ACCESS_ENDING> tag. There should be just 1.
        set access_form [string map $map_array($item) $access_form]

        # Filter out items that do not belong in the access-policy.
        # Anything with an ITEM_xxx tag belongs
        if { [string first <ITEM_ $map_array($item)] == -1 } {
            continue
        }

        # Add to the items list for the access-policy, e.g. priority
        append access_items "        ${prefix}_$item {<ACCESS_ITEM>}\n"
        set access_items [string map $map_array($item) $access_items]
        set access_items [string map [subst $default_map_1] $access_items]
    }

    # Build APM resources, policy-items, agents, and customization-groups from
    # the policy_item_form and resource_form.
    foreach item [lsort [array names map_array]] {

        # Each item starts as a profile, a resource, or a policy-item.
        # Profiles are free-form, so other apm objects can use the profile form.
        # In most cases, a policy-item spawns an agent.
        # Any definition specifying a customization-group will spawn that group.
        if { [string first "<PROFILE_DEF>" $map_array($item)] != -1 } {

            # Collect profile names for attachment to the virtual server
            if { [string first "apm profile " $map_array($item)] != -1 } {
                lappend profiles [expr { $item eq {default}
                                 ? "$prefix" : "${prefix}_$item" }]
                # When an access profile is found, built a policy of the same name
                if { [string first "apm profile access" $map_array($item)] != -1 } {
                    set def [string map "<ACCESS_ITEMS> {$access_items}" $access_form]
                    append cmds "[string map [subst $default_map_2] $def]\n"
                }
            }
            set def $profile_form
        } elseif { [string first "<RESOURCE_DEF>" $map_array($item)] != -1 } {
            set def $resource_form
        } else {
            set def $policy_item_form
            if { [string first "<ITEM_AGENT> {}" $map_array($item)] == -1 } {
                append def $agent_form
            }
        }

        # Apply 1st pass of string maps
        set def [string map $map_array($item) $def]
        set def [string map [subst $default_map_1] $def]

        # If a customization-group is specified, add its definition
        if { [string first "customization-group" $def] != -1 } {
            if { [string first "apm policy agent" $def] != -1 } {
                append def $agent_group_form
            } elseif { [string first "apm profile access" $def] == -1 } {
                append def $group_form
            }
        }

        # Apply 2nd pass of string maps
        set def [string map $map_array($item) $def]
        append cmds [string map [subst $default_map_2] $def]
    }

    # Divide and execute tmsh commands
    set tag "<TMSH_CREATE>"
    set tag_length [string length $tag]
    set last [expr { [string first $tag $cmds] + $tag_length }]
    while { [set pos [string first $tag $cmds $last]] != -1 } {
        incr pos -1
        iapp_conf create [string range $cmds $last $pos]
        set last [expr { $pos + $tag_length + 1 }]
    }
    iapp_conf create [string range $cmds $last end]
    return $profiles
}

proc iapp_upgrade_template { upgrade_var upgrade_trans } {
    upvar $upgrade_var   upgrade_var_arr
    upvar $upgrade_trans upgrade_trans_arr

    # create the new variables from the old
    foreach { var } [array names upgrade_var_arr] {

        # substitute old variable name for abbreviation "##"
        regsub -all {##} $upgrade_var_arr($var) \$$var map_cmd

        # run the mapping command from inside the array
        if { [catch { subst $map_cmd } err] } {
            if { [string first "no such variable" $err] == -1 } {
                puts "ERROR $err"
            }
        }
    }

    # move variables over and apply translations
    set var_mods ""
    set var_adds ""
    foreach var [array names vx] {

        # if the APL variable name is in the translation array,
        # then use the custom translation built for that variable.
        if { [info exists upgrade_trans_arr($var)] } {
            array set sub_arr [subst $upgrade_trans_arr($var)]
            if { [info exists sub_arr($vx($var))] } {
                set vx($var) $sub_arr($vx($var))
            }
            array unset sub_arr
        # else, if the APL variable value is in the translation array,
        # then use the generic translation of that value.
        } elseif { [info exists upgrade_trans_arr($vx($var))] } {
            set vx($var) [subst $upgrade_trans_arr($vx($var))]
        }

        # add to tmsh command string
        if { [info exists ::$var] } {
            append var_mods "\n $var \{ value \"$vx($var)\" \} "
        } else {
            append var_adds "\n $var \{ value \"$vx($var)\" \} "
        }
    }

    # move tables over
    set tbl_mods ""
    set tbl_adds ""
    foreach tbl [array names tx] {

        # convert table from APL format to TMSH format
        if { ![llength $tx($tbl)] } {
            set tbl_def "column-names none"
        } else {
            set rows_def ""
            foreach apl_row $tx($tbl) {
                array set row_arr [join $apl_row]
                append rows_def "\n  \{ row \{ "
                foreach apl_col [array names row_arr] {
                    append rows_def "$row_arr($apl_col) "
                }
                append rows_def "\}\}"
            }
            set tbl_def \
            "\n  column-names \{ [array names row_arr] \} rows \{ $rows_def \}"
            array unset row_arr
        }

        # add to tmsh command string
        if { [info exists ::$tbl] } {
            append tbl_mods "\n $tbl \{ $tbl_def \} "
        } else {
            append tbl_adds "\n $tbl \{ $tbl_def \} "
        }
    }

    # construct the "tmsh modify" command
    set cmd "sys application service $tmsh::app_name "
    if { [llength $var_mods] } {
        append cmd "\nvariables modify { $var_mods }"
    }
    if { [llength $var_adds] } {
        append cmd "\nvariables add { $var_adds }"
    }
    if { [llength $tbl_mods] } {
        append cmd "\ntables modify { $tbl_mods }"
    }
    if { [llength $tbl_adds] } {
        append cmd "\ntables add { $tbl_adds }"
    }

    # Execute with debug output. This conversion takes place within the
    # existing ASO, so tmsh modify is used instead of tmsh create.
    iapp_debug "TEMPLATE UPGRADE"
    iapp_conf modify $cmd
    return
}

proc iapp_downgrade_template { pivot_var upgrade_var downgrade_table } {
    upvar $downgrade_table downgrade_tbl_arr

    # The ASO variable "offload_history" is used to recover the legacy
    # choice a user made about SSL offload. It should be present in all cases.
    # This conditional only handles the case where a user has deliberately
    # deleted it by manipulating the ASO directly from tmsh.
    if { ![info exists ::offload_history] } {
        set ::offload_history "No"
    }

    # BIG-IP erases table contents when the APL optional hides the table.
    # Since the prior data is not available, this downgrade must back-convert
    # existing table data. Unlike tables, variables remain intact from the
    # legacy ASO.
    set tbl_def ""
    foreach tbl [array names downgrade_tbl_arr] {
        # Check for existence of each table in the current context.
        # If not, skip to next.
        if { ![info exists [set tbl]] } {
            continue
        }
        # Check for existence of each table in the legacy context.
        # If not, add an empty table so "tmsh tables modify" does not fail.
        if { ![info exists ::$downgrade_tbl_arr($tbl)] } {
            iapp_conf modify sys app ser $tmsh::app_name tables add \{ $downgrade_tbl_arr($tbl) \}
        }
        append tbl_def "$downgrade_tbl_arr($tbl) \{ "
        if { [llength [subst $$tbl]] } {
            set rows_def ""
            foreach apl_row [subst $$tbl] {
                array set row_arr [join $apl_row]
                append rows_def "\n  \{ row \{ "
                foreach apl_col [array names row_arr] {
                    append rows_def "$row_arr($apl_col) "
                }
                append rows_def "\}\}"
            }
            append tbl_def \
            "column-names \{ [array names row_arr] \} rows \{ $rows_def \}"
            array unset row_arr
        } else {
            append tbl_def "rows none"
        }
        append tbl_def " \} "
    }
    regsub -all "\n" $tbl_def {} tbl_def
    set cmd "sys app ser $tmsh::app_name \
        variables modify \{ \
            $pivot_var \{ value $::offload_history \} \
            $upgrade_var \{ value No \} \
        \} \
        tables modify \{ $tbl_def \}"
    iapp_debug "TEMPLATE DOWNGRADE"
    iapp_conf modify $cmd
    return
}
}


sys application template f5.microsoft_exchange_2016.v1.0.0 {
    actions {
        definition {
            html-help {
<p><b>Exchange 2016 Mailbox Server Template</b></p>

<p>This template creates a complete configuration optimized for managing traffic associated with Microsoft Exchange 2016 implementations. <br> Before you start: </p>
<ul>
    <li>For detailed information and help using this iApp, including any updates, see http://www.f5.com/pdf/deployment-guides/microsoft-exchange-iapp-dg.pdf.</li>
    <li>Check System :: Resource Provisioning to ensure that LTM (Local Traffic Manager) is provisioned.</li>
    <li>Set up VLANs and Self-IP addresses on the networks you will use for client-side and server-side traffic.</li>
    <li>Import the proper SSL certificates that correspond to the DNS names used by the clients.</li>
    <li>If deploying BIG-IP APM (Access Policy Manager) features, including Edge Gateway, you must fully license and provision APM before starting the template.</li>
    <li>For BIG-IP APM, you must configure this BIG-IP device to use a DNS server that is able to resolve names in your Active Directory domain(s). You must also configure an NTP time source for this BIG-IP device and your domain controller(s) so their times are closely synchronized. See the Deployment Guide for specific instructions.  </li>
</ul>
            }
            implementation {
tmsh::include f5.iapp.1.5.0.cli
iapp_template start

# CONSTANTS
set YES_ANSWER "Yes"
set ALL_ANSWER "All"
set LAN_OPTION "LAN"
set WAN_OPTION "WAN"
set EDGE_DEPLOYMENT_SCENARIO \
    "BIG-IP Edge Gateway or APM will provide secure remote access to CAS"
set ALL_ON_LTM_SCENARIO "LTM will load balance and optimize CAS traffic"
set LTM_BEHIND_EDGE \
    "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM"
set STATIC_ANSWER "Static"
set SINGLE_POOL_OPTION \
    "All services will be handled by the same set of Client Access Servers"
set SINGLE_IP_ANSWER "Single IP address"
set CREDENTIALS_REQUIRED_FOR_BINDING_ANSWER \
    "Credentials are required for binding"
set ENCRYPTED_ANSWER "Encrypted"
set REENCRYPT_SSL_BRIDGING_ANSWER "Re-encrypt (SSL Bridging)"
set ENCRYPT_SSL_BRIDGING_ANSWER "Encrypt (SSL Bridging)"
set SELF_SIGNED_OR_DEFAULT_CERT_AND_KEY_ANSWER \
    "Self-signed or default certificate and key"
set USE_DEFAULT_PROFILE_ANSWER "Use Default Profile"
set NEED_SNATPOOL_ANSWER "More than 6000"
set SAME_SUBNET_ANSWER \
    "Same subnet for BIG-IP virtual servers and Client Access Servers"
set NOT_DEFAULT_GATEWAY_ANSWER \
    "Client Access Servers do NOT use BIG-IP as their default gateway"
set ADVANCED_POOL_SETTINGS_ANSWER "Customize pool settings"
set SECOND_MAILBOX_ANSWER "Monitor a second mailbox (recommended)"
set USING_SINGLE_DOMAIN_ANSWER "One FQDN for all HTTP services"
set QUEUE_TCP_REQUESTS_ANSWER "Queue TCP requests"
set USE_ADVANCED_MONITOR_ANSWER "Use advanced monitors"
set WINDOWS_AUTH_ANSWER "OWA uses Basic or Windows Integrated authentication"
set HOST_HEADER_ANSWER "Use the Outlook Anywhere host header"
set DEFAULT_ANSWER "/#default#"
set DO_NOT_USE_ANSWER "/#do_not_use#"

# UTILITY PROCEDURES

# Most of the snatpool irule is stored in $::forms. This routine inserts
# a list of snatpool members and returns the complete irule text.
# Variable names must not have dash characters per BZ419922.
proc create_snatpool_irule { } {
    set no_dash [string map {- _ . _} $::app]
    set map "<SNATPOOL_MEMBERS> \{"
    set count 0
    # This string map effectively extracts the address values from the APL
    # table by purging the column header "addr" and all of the braces.
    set snat_addrs [string map { addr {} \{ {} \} {} } \
        $::deployment__snatpool_members]
    foreach snat_addr $snat_addrs {
        append map "    set static::snat_ips_${no_dash}($count) $snat_addr\n"
        set count [expr {$count + 1}]
    }
    append map "\} <APP_NAME> {$no_dash}"
    # This string map pulls the static irule out of the forms array and
    # adds in the list of snatpool members as entered by the template user.
    return [string map $map $::forms(snatpool_irule)]
}

# Writes the external monitor for the autodiscover service.
proc create_eav_script { script_name } {
    set eav_script_name /config/monitors/${::app}_$script_name
    set map "<APP_NAME> $::app
        <HTTP_OR_HTTPS> [expr { $::do_server_ssl ? "https" : "http" }]
        <CURL> [expr { [file exists /usr/bin/curl-apd] ? "curl-apd" : "curl" }]"
    set fn [open "$eav_script_name" "w" "0755"]
    # This string map pulls the static bash script out of the forms array and
    # customizes it for http or https based on the user's SSL selections.
    puts $fn [string map $map $::forms($script_name)]
    close $fn
    return $eav_script_name
}

# Builds an APM customization that cannot be accomplished via TMSH
proc apm_logon_form { do_logon_options } {
    tmsh::include f5.iapp.1.5.0.cli
    set partition [lindex [split [tmsh::pwd] /] 1]
    set xml_escapes {< &lt; > &gt;}
    set map "<APM_LOGON_TEXT> \"[string map $xml_escapes $::apm__logon_text]\" "

    if { $do_logon_options } {
        # BZ479085 describes the user password change checkbox enabled in 11.5
        if { $::is_v11_5 } {
            append map {
                <PASSWORD_CHECKBOX_1> "    if( $field_settings\[\"name\"\] == \"change_password\" ) { continue; }"
                <PASSWORD_CHECKBOX_2> "<tr>
  <td colspan=2 class=\"credentials_table_unified_cell\" >
    <label for=\"checkbox\">Change Password?</label>
      <input type=\"checkbox\" name=change_password class=\"credentials_input_checkbox\" value=\"\" id=\"input_3\" autocomplete=\"off\" autocapitalize=\"off\"> Change account password
  </td>
</tr>"
            }
        } else {
            append map {
                <PASSWORD_CHECKBOX_1> ""
                <PASSWORD_CHECKBOX_2> ""
            }
        }
        set location "/config/filestore/files_d/${partition}_d/customization_template_d"
        set filepath "$location/[string map "/ :" $::prefix]_custom_logon:logon.inc"
        set form [string map $map $::forms(apm_logon_template)]
        set rval "templates replace-all-with \{ logon.inc \{ local-path $filepath name ${::prefix}_custom_logon:logon.inc \}\}"
    } else {
        set location "/config/filestore/files_d/${partition}_d/customization_group_d"
        set filepath "$location/[string map "/ :" $::prefix]_custom_logon"
        set form [string map $map $::forms(apm_logon_form)]
        set rval "local-path $filepath"
    }

    file mkdir $location
    set fh [open $filepath w]
    puts $fh $form
    close $fh
    return $rval
}

# STATIC FORMS
# Text-heavy forms for bash scripts and irules
array set forms {
apm_logon_form {<?xml version="1.0" encoding="utf-8"?>
<customization_group name="default_0" type="0">
  <item language="en">
    <form_header><APM_LOGON_TEXT></form_header>
    <logon_field_1>Username</logon_field_1>
    <logon_field_2>Password</logon_field_2>
    <logon_field_3>Field 3</logon_field_3>
    <logon_field_4>Field 4</logon_field_4>
    <logon_field_5>Field 5</logon_field_5>
    <logon>Logon</logon>
    <front_image>/public/images/my/tr.gif</front_image>
    <save_password>Save Password</save_password>
    <new_password>New Password</new_password>
    <verify_password>Verify Password</verify_password>
    <wrong_match>Password and confirmation do not match.</wrong_match>
    <dont_change_password>Do not change password</dont_change_password>
    <http_401_response>Authentication required to access the resources.</http_401_response>
    <vmware_view_message>Click OK to continue.</vmware_view_message>
    <image00>/public/images/my/tr.gif</image00>
    <image01>/public/images/my/tr.gif</image01>
    <image02>/public/images/my/tr.gif</image02>
    <image03>/public/images/my/tr.gif</image03>
    <image04>/public/images/my/tr.gif</image04>
    <image05>/public/images/my/tr.gif</image05>
    <image06>/public/images/my/tr.gif</image06>
    <image07>/public/images/my/tr.gif</image07>
    <image08>/public/images/my/tr.gif</image08>
    <image09>/public/images/my/tr.gif</image09>
  </item>
</customization_group>
}

apm_logon_template {<?

$fields_settings = array(
    1 => array( "type" => "text", "name" => "username", "varname" =>"username", "rw" => "1", "caption" => '%[logon_field_1]', "selectvalues" => "" ),
    2 => array( "type" => "password", "name" => "password", "varname" =>"password", "rw" => "1", "caption" => '%[logon_field_2]', "selectvalues" => "" ),
    3 => array( "type" => "none", "name" => "field3", "varname" =>"field3", "rw" => "1", "caption" => '%[logon_field_3]', "selectvalues" => "" ),
    4 => array( "type" => "none", "name" => "field4", "varname" =>"field4", "rw" => "1", "caption" => '%[logon_field_4]', "selectvalues" => "" ),
    5 => array( "type" => "none", "name" => "field5", "varname" =>"field5", "rw" => "1", "caption" => '%[logon_field_5]', "selectvalues" => "" ),
);

$field_num = 5;

for( $i=1; $i <= $field_num; $i++ ){
    //
    foreach( $fields_settings[$i] as $fieldPostfix => $defaultValue ){
        //
        if( $fieldPostfix == "caption" ){
            continue;
        }

        if( isset( $_GET[ "f{$i}_{$fieldPostfix}" ] ) ){
            $fields_settings[$i][$fieldPostfix] =  $_GET[ "f{$i}_{$fieldPostfix}" ];
        }
    }
    //varname fix
    //Enable auto-population only for read-only text field
    if ( ("1" != $fields_settings[$i]["rw"]) && ( "checkbox" == $fields_settings[$i]["type"] || "text" == $fields_settings[$i]["type"] ) ) {
        $fields_settings[$i]["value"] = '%{session.logon.last.'.$fields_settings[$i]["varname"].'}';
    } else {
        $fields_settings[$i]["value"] = '';
    }
}

$formHeader = '<APM_LOGON_TEXT>';

// add error message for CAPTCHA in case
if( isset( $_GET[ 'captcha_err_msg' ] ) || isset( $_GET[ 'captcha_only' ] )){
    $GLOBALS["dont_print_error_string"] = 1;
    include_customized_page("errormap", "errormap.inc");
    $formHeader = $GLOBALS["error_string"];
}

// this code is for challenge/response
// varname _F5_challenge is reserved post var name for challenge password
if ($challenge == 1) {

    $fields_settings = array(   1 => array( "type" => "password", "name" => "_F5_challenge",  "varname" => "password", "rw" => "1", "caption" => "" ),
                                2 => array( "type" => "none" ), 3 => array( "type" => "none" ), 4 => array( "type" => "none" ), 5 => array( "type" => "none" ) );

    if ($errorcode == 0) {
        $formHeader = "%{session.logon.page.password.desc}";
    } else {
        $GLOBALS["dont_print_error_string"] = 1;
        include_customized_page("errormap", "errormap.inc");
        $formHeader = $GLOBALS["error_string"];

        // hardcoded ad change password
        if( $GLOBALS["set_new_password"] ){
            $fields_settings[1]["caption"] = "%[new_password]";
            $fields_settings[2] = array( "type" => "password", "name" => "_F5_verify_password",  "varname" => "verify_password", "rw" => "1", "caption" => "%[verify_password]" );
        }
    }

    // See if this is CitrixReceiver
    if ($_GET["ctype"] == "CitrixReceiver") {
        if ($_GET["cplatform"] == "iOS") {
            // iOS client expects specific messages for RSA & AD
            if ($errorcode == 1402 || $errorcode == 1403) { // AD Password Expired
                $formHeader = "Password Expired, Please enter a new password";
            } else if ($errorcode == 5004) { // RSA Next Token
                $formHeader = "Wait for token to change, then enter the new tokencode:";
            } else if ($errorcode == 5005) { // RSA New PIN System-gen
                // ARE YOU PREPARED TO HAVE THE SYSTEM GENERATE YOUR PIN? (y/n):
                $formHeader = "Enter a new PIN having from 4 to 8 digits:";
            } else if ($errorcode == 5006) { // RSA New PIN User-sel
                // A new PIN is required.\r\nDo you want system to generate your new PIN? (y/n):
                $formHeader = "Enter a new PIN having from 4 to 8 digits:";
            } else if ($errorcode = 5007) { // RSA New PIN User-def
                $formHeader = "Enter a new PIN having from 4 to 8 digits:";
            }
        } else if ($_GET["cplatform"] == "Android") {
            // Android client does not render HTML tags in the challenge message
            // Lets remove the tags
            $formHeader = preg_replace("@</?\w+[^>]*>@", " ", $formHeader);
        }
?>
<FORM METHOD=POST ACTION="/cgi/dlge">
<div id="dialogueStr"><?=$formHeader?></div>
<input NAME=response TYPE=password/>
</FORM>
<?
        exit;
    }
}

?><!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="pragma" content="no-cache">
<meta http-equiv="cache-control" content="no-cache">
<title>%{session.server.network.name}</title>
<link rel="stylesheet" type="text/css" HREF="/public/include/css/apm.css">
<script language="JavaScript" src="/public/include/js/session_check.js" ></script>
<script language="javascript">
<!--

<? include_customized_page("logout", "session_expired.js"); ?>

var globalRestartOnSubmit = false;

function sessionTimedOut()
{
    // restart session automatically upon "submit" for edge-like clients if logon form is compatibile
    if (("undefined" != typeof(window.external)) && (undefined != window.external.WebLogonResetSession) && (null != globalInputs)) {
       globalRestartOnSubmit = true;
    }
    else {
       // display session expired msg for non-compatible forms or
       // non-edge clients
       showSplashLayer("MessageDIV", SessionExpired_CustomizedScreenGet());
    }
}

/**
 * Place the focus and init the form fields
 */

if(self != top) { top.location = self.location; }
window.onerror=function(){ return function(){ return; } }

//--------------------------------------------------------------------
var doNotAutoSubmit = false;

var globalFormId = 'auth_form';
var globalTableId = 'credentials_table';
var globalSubmitTrId = 'submit_row';

var globalSavePasswordCheckbox = null;
var globalInputs = null;

// compatibily function, works only with input[0] text username and input[1] text password
function getFormCompatibility()
{
    // find from
    var form = document.getElementById( globalFormId );
    if( form == null ){
        return null;
    }

    // check if form suites
    var inputs = [];
    var inputsTemp = form.getElementsByTagName("input");
    // filter submit, reset, hidden and little green men
    for( var i=0; i<inputsTemp.length; i++ ){
        if( inputsTemp[i].type == "text" || inputsTemp[i].type == "password" ||  inputsTemp[i].type == "checkbox" ){
            inputs[ inputs.length ] = inputsTemp[i]
        }
    }
    // is it compatible
    if( inputs.length != 2 || inputs[0].type != "text" || inputs[0].name != "username" || inputs[1].type != "password" || inputs[1].name != "password" ){
        return null;
    }

    return inputs;
}

function OnLoad()
{
    // check if form suites
    var form = document.getElementById( globalFormId );
    if( form == null ){
        return;
    }

    // check if form suites
    var inputs = form.getElementsByTagName("input");
    // filter submit, reset, hidden and little green men
    for( var i=0; i<inputs.length; i++ ){
        if( ( inputs[i].type == "text" || inputs[i].type == "password" ) && inputs[i].value == "" ){
            inputs[i].focus();
            if (inputs[i].type == "password") {
                window.setTimeout( function(elem){ return function(){ elem.blur(); elem.focus(); } }(inputs[i]) , 266 );
            }
            return;
        }
    }
}

// support for autologon from Client API
function checkExternalAddCheckbox()
{
    var checkbox_txt = '%[save_password]';

    if( globalInputs == null ){
        try {
            if (("undefined" != typeof(window.external)) && ("unknown" != typeof(window.external))
                && ("undefined" != typeof(window.external.WebLogonNotifyUser)) && ("unknown" != typeof(window.external.WebLogonNotifyUser))){
                window.external.WebLogonNotifyUser();
            }
        } catch(e){};
        return;
    }

    // find form
    var form = document.getElementById( globalFormId );
    if( form == null ){
        return;
    }

    // find table
    var table = document.getElementById( globalTableId );
    if( table == null ){
        return;
    }

    // find tr
    var submitTr = document.getElementById( globalSubmitTrId );
    if( submitTr == null ){
        return;
    }

    try {
        if(window.external){
            // push values
            if( window.external.WebLogonUserName && globalInputs[0].value == ""){
                globalInputs[0].value = window.external.WebLogonUserName;
            }
<?
// only query ClientAPI for cached password value if we didn't encounter an error from previous logon attempt and if we are not in auth. challenge mode (RSA SecurID)
if ((0 == $challenge) && (0 == $errorcode ))
{
?>
            if(window.external.WebLogonPassword && globalInputs[1].value == ""){
                globalInputs[1].value = window.external.WebLogonPassword;
            }
<? } ?>

            // push data to cells
            if(window.external.WebLogonSavePasswordAvailable){
                // right - text

                // create cells
                var newTr = table.insertRow( submitTr.rowIndex );
                var leftTd = newTr.insertCell( 0 );
                var rightTd = newTr.insertCell( 1 );

                leftTd.className = "credentials_table_label_cell";
                rightTd.className = "credentials_table_field_cell credentials_table_field_checkbox_fix";

                rightTd.innerHTML = checkbox_txt;
                // left - checkbox
                globalSavePasswordCheckbox = document.createElement("input");
                globalSavePasswordCheckbox.type = "checkbox";
                globalSavePasswordCheckbox.className = "credentials_input_checkbox";
                globalSavePasswordCheckbox.value = 1;
                globalSavePasswordCheckbox = leftTd.appendChild( globalSavePasswordCheckbox );
                globalSavePasswordCheckbox.checked = window.external.WebLogonSavePasswordChecked;
                if( globalSavePasswordCheckbox.autocomplete ) {
                    globalSavePasswordCheckbox.autocomplete = "off";
                }
            }

            // autosubmit check
            if(window.external.WebLogonAutoLogon && !doNotAutoSubmit){
                doAutoSubmit = true;
                form.onsubmit();
                form.submit();
                return;
            }
        }
    } catch (e) { }
}

function disableSubmit(form)
{
    // disable!
    var inputs = form.getElementsByTagName( "input" );
    for( var i=0; i<inputs.length; i++ ){
        if( inputs[i].type == "submit" || inputs[i].type == "reset" ){
            inputs[i].disabled = true;
        }
    }

    return true;
}

function OnSubmit()
{
    // find form
    var form = document.getElementById( globalFormId );
    if( form == null ){
        return;
    }

    if( globalInputs == null ){
        return;
    }

    try{
        if( window.external ){
            if( undefined != window.external.WebLogonUserName ){
                window.external.WebLogonUserName = globalInputs[0].value;
            }

            if( undefined != window.external.WebLogonPassword ){
                window.external.WebLogonPassword = globalInputs[1].value;
            }

            if( undefined != window.external.WebLogonSavePasswordChecked && null != globalSavePasswordCheckbox ){
                window.external.WebLogonSavePasswordChecked = globalSavePasswordCheckbox.checked;
            }

        }
    } catch(e) { }

    return;
}

function verifyNewPassword()
{
    var form = document.getElementById( globalFormId );
    if( form == null ){
        return true;
    }

    var inputs = form.getElementsByTagName("input");
    if( inputs.length >= 2 && inputs[0].name == "_F5_challenge" && inputs[0].type == "password" && inputs[1].name == "_F5_verify_password" && inputs[1].type == "password" ){
        if( inputs[0].value != inputs[1].value ){
            alert("%[wrong_match]");
            inputs[0].focus();
            return false;
        } else {
            // Not sending the second field.
            inputs[1].disabled = true;

            try{
                if( window.external ){
                    if( undefined != window.external.WebLogonPassword ){
                        window.external.WebLogonPassword = inputs[0].value;
                    }
                }
            } catch(e) { }
        }
    }
    return true;
}

function masterSubmit(form)
{
    if( !verifyNewPassword() /* || ... */){
        return false;
    }

    OnSubmit(); // this required by edge

    if (globalRestartOnSubmit) {
        try {
            window.external.WebLogonAutoLogon = (("" != globalInputs[0].value) && ("" != globalInputs[1].value));
        }
        catch (e) {}
        // restart session
        window.external.WebLogonResetSession();
        return false;
    }

    disableSubmit(form);
    return true;
}
//-->
</script>
</head>

<body onload="OnLoad()">

<?
include_customized_page("general_ui", "header.inc");
include_customized_page("general_ui", "javascript_disabled.inc");
?>

<table id="main_table" class="logon_page">
<tr>
    <? if( $GLOBALS["page_layout"] == "form_right" ){
        ?><td id="main_table_image_cell"><img src="<? print('%[front_image]'); ?>"></td><?
    } ?>
    <td id="main_table_info_cell">
    <form id="auth_form" name="e1" method="post" action="/my.policy" onsubmit="javascript: return masterSubmit(this);" autocomplete="off">
    <table id="credentials_table">
    <tr>
        <td colspan=2 id="credentials_table_header" ><? print( $formHeader ); ?></td>
    </tr>
    <tr>
        <td colspan=2 id="credentials_table_postheader" ><? if ($retry == 1) { include_customized_page("errormap", "errormap.inc"); } ?></td>
    </tr>
<?

if( !isset( $_GET[ 'captcha_only' ] ) ) {

//------------------------------------------------------------
foreach( $fields_settings as $id=>$field_settings )
{
    if( $field_settings["name"] == "pubpriv" ) { continue; }
    if( $field_settings["name"] == "lightversion" ) { continue; }
<PASSWORD_CHECKBOX_1>
    if( $field_settings["type"] == "select" ){
        $disabled = ( $field_settings["rw"] == 0 ? "disabled" : "" );
        $_disabled = ( $disabled == "" ? "" : "_{$disabled}" );

        // explode it
        $options = explode( ';', $field_settings["selectvalues"] );
        $optionsStr = "";
        foreach( $options as &$o ){
            $optionsStr .= "<option value=\"{$o}\" ".( $field_settings["value"] == $o ? "selected" : "" ).">{$o}</option>";
        }

        $selectStr = "<select name='{$field_settings["name"]}' id='input_{$id}' class='credentials_input_{$field_settings["type"]}{$_disabled}' {$disabled}>{$optionsStr}</select>";

        if( $GLOBALS["label_position"] == "above" )
        {
?>
    <tr>
        <td colspan=2 class="credentials_table_unified_cell" ><label for="<? print( $field_settings["type"] ); ?>"><? print( $field_settings["caption"] ); ?></label><?  print( $selectStr )?></td>
    </tr>
<?
        }else{
?>
    <tr>
        <td class="credentials_table_label_cell" ><? print( $field_settings["caption"] ); ?></td>
        <td class="credentials_table_field_cell"><?  print( $selectStr )?></td>
    </tr>
<?
        }
    }elseif( $field_settings["type"] != "none" ){
        $disabled = ( $field_settings["rw"] == 0 ? "disabled" : "" );
        $_disabled = ( $disabled == "" ? "" : "_{$disabled}" );
        if( $GLOBALS["label_position"] == "above" )
        {
?>
    <tr>
        <td colspan=2 class="credentials_table_unified_cell" ><label for="<? print( $field_settings["type"] ); ?>"><? print( $field_settings["caption"] ); ?></label><input type=<? print( $field_settings["type"] ); ?> name=<? print( $field_settings["name"] ); ?> class="credentials_input_<? print( $field_settings["type"] ); print( $_disabled ) ?>" <? print( $disabled ); ?> value="<? print( $field_settings["value"] ); ?>" id="<? print( "input_{$id}" ); ?>" autocomplete="off" autocapitalize="off"></td>
    </tr>
<?
        }else{
?>
    <tr>
        <td class="credentials_table_label_cell" ><? print( $field_settings["caption"] ); ?></td>
        <td class="credentials_table_field_cell"><input type="<? print( $field_settings["type"] ); ?>" name="<? print( $field_settings["name"] ); ?>" class="credentials_input_<? print( $field_settings["type"] ); print( $_disabled ) ?>" <? print( $disabled ); ?> value="<? print( $field_settings["value"] ); ?>" id="<? print( "input_{$id}" );?>" autocomplete="off" autocapitalize="off"></td>
    </tr>
<?
        }
    }
}
?>
<PASSWORD_CHECKBOX_2>
<tr>
  <td colspan=2 class="credentials_table_unified_cell" >
    <label for="text">Security</label>
      <input type="radio" name=pubpriv value="public" checked> This is a public or shared computer<br>
      <input type="radio" name=pubpriv value="private"> This is a private computer
  </td>
</tr>
<tr>
  <td colspan=2 class="credentials_table_unified_cell" >
    <label for="text">Light Version?</label>
      <input type="checkbox" name=lightversion value="yes"> Use the light version of Outlook Web App
  </td>
</tr>
<?
}
if( isset( $_GET[ 'captcha_public_key' ] ) ){

    // set reCAPTCHA customization theme ('red' by default)
    $customization_theme = 'red';
    if( isset( $_GET['captcha_theme'] ) ) {
        $customization_theme = $_GET['captcha_theme'];
    }
?>
    <script type="text/javascript">
    var RecaptchaOptions = {
        theme : '<?=$customization_theme?>'
    };
    </script>
    <tr>
    <td colspan=2 class="credentials_table_unified_cell">
    <?
    if($customization_theme == 'clean'){
    ?>
        <div style="width:450px;">
    <?
    }
    ?>
    <script type="text/javascript"
    src="https://<?=$_GET['captcha_challenge_url']?>?k=<?=$_GET['captcha_public_key']?>">
    </script>
    <noscript>
    <iframe src="https://<?=$_GET['captcha_noscript_url']?>?k=<?=$_GET['captcha_public_key']?>"
    height="300" width="500" frameborder="0"></iframe><br>
    <textarea name="recaptcha_challenge_field" rows="3" cols="40">
    </textarea>
    <input type="hidden" name="recaptcha_response_field"
    value="manual_challenge">
    </noscript>
    <?
    if($customization_theme == 'clean'){
    ?>
        </div>
    <?
    }
    ?>
    </td>
    </tr>
<?
}
//------------------------------------------------------------
    if( $challenge == 1 && ($errorcode == 5022 || $errorcode == 5023) && $GLOBALS["set_new_password"] ){
?>
    <tr>
<?
        if( $GLOBALS["label_position"] == "above" ){
?>
        <td class="credentials_table_unified_cell"><input type=checkbox id="dont_change_password_checkbox" value="" onclick="javascript: dontChangePasswordClick();">%[dont_change_password]</td>
<?
        }
?>
    </tr>
<?
    }
//------------------------------------------------------------

?>
    <tr id="submit_row">
<?
        if( $GLOBALS["label_position"] == "above" ){
?>
        <td class="credentials_table_unified_cell"><input type=submit class="credentials_input_submit" value="%[logon]"></td>
<?
        }else{
?>
        <td class="credentials_table_label_cell" ></td>
        <td class="credentials_table_field_cell"><input type=submit class="credentials_input_submit" value="%[logon]"></td>
<?
        }
?>
    </tr>
    <tr>
        <td colspan=2 id="credentials_table_footer" ></td>
    </tr>
    </table>
    <input type=hidden name="vhost" value="standard">
    </form>
    <script language="javascript"><!--//
        globalInputs = getFormCompatibility();
        checkExternalAddCheckbox();
        window.setTimeout("sessionTimeoutCheck(sessionTimedOut)", globalTimoutInterval);

        function dontChangePasswordClick(){
            var checkbox = document.getElementById("dont_change_password_checkbox");
            var password = document.getElementById("input_1");
            var verify = document.getElementById("input_2");
            if( checkbox.checked ){
                password.value = "";
                password.disabled = true;
                verify.value = "";
                verify.disabled = true;
            }else{
                password.disabled = false;
                verify.disabled = false;
            }
        }

        var sessionLogonCustomizations = [ "%[selectvalues_1]", "%[selectvalues_2]", "%[selectvalues_3]", "%[selectvalues_4]", "%[selectvalues_5]" ];
        var sessionLogonCustomizationPairs = [ [], [], [], [], [] ];
        for( var i=0; i<sessionLogonCustomizations.length; i++ ){
            var pairs = ( sessionLogonCustomizations[i].indexOf(";") == -1 ? [ sessionLogonCustomizations[i] ] : sessionLogonCustomizations[i].trim().split(";") );
            for( var j=0; j<pairs.length; j++ ){
                if( pairs[j].indexOf("=>") != -1 ){
                    var pair = pairs[j].split("=>");
                    sessionLogonCustomizationPairs[i][pair[0]] = pair[1];
                }
            }
        }

        var sessionLogonValuesets = [ "%{session.logon.last.selectvalues_1}", "%{session.logon.last.selectvalues_2}", "%{session.logon.last.selectvalues_3}", "%{session.logon.last.selectvalues_4}", "%{session.logon.last.selectvalues_5}" ];
        for( var i=0; i<sessionLogonValuesets.length; i++ ){
            var inpx = document.getElementById("input_" + (i+1) );
            if( inpx != null && inpx.tagName.toUpperCase() == "SELECT" ){
                if( sessionLogonValuesets[i].trim() != "" ){
                    inpx.options.length = 0;
                    var options = sessionLogonValuesets[i].trim().split(";");
                    for( var j=0; j<options.length; j++ ){
                        inpx.options.add( new Option( options[j], options[j] ) );
                    }
                }
                if( sessionLogonCustomizations[i].trim() != "" ){
                    for( var j=0; j<inpx.options.length; j++ ){
                        if( typeof sessionLogonCustomizationPairs[i][ inpx.options[j].value ] != "undefined" ){
                            inpx.options[j].text = sessionLogonCustomizationPairs[i][ inpx.options[j].value ];
                        }
                    }
                }
            }else if( inpx != null && inpx.tagName.toUpperCase() == "INPUT" && inpx.type.toUpperCase() == "CHECKBOX" ){
                if( inpx.value == "" ){
                    inpx.value = "1";
                }
            }
        }
    --></script>
    </td>
    <? if( $GLOBALS["page_layout"] == "form_left" ){
        ?><td id="main_table_image_cell"><img src="<? print('%[front_image]'); ?>"></td><?
    } ?>
</tr>
</table>

<? include_customized_page("general_ui", "footer.inc"); ?>

<? include_once("sam/webtop/renderer/vk.inc");  ?>

<div id="MessageDIV" class="inspectionHostDIVSmall"></div>

</body>
</html>
}


apm_login_timeout_irule_1 {
when RULE_INIT {
    set static::cookie_cadata [format "cadata=null; path=/; Expires=Thurs, 01-Jan-1970 00:00:00 GMT;"]
    set static::cookie_clientid [format "ClientId=null; path=/; Expires=Thurs, 01-Jan-1970 00:00:00 GMT;"]
    set static::cookie_uc [format "UC=null; path=/; Expires=Thurs, 01-Jan-1970 00:00:00 GMT;"]
    set static::cookie_xbackend [format "X-BackEndCookie=null; path=/; Expires=Thurs, 01-Jan-1970 00:00:00 GMT;"]
    set static::cookie_xowacanary [format "X-OWA-CANARY=null; path=/; Expires=Thurs, 01-Jan-1970 00:00:00 GMT;"]
}
when ACCESS_SESSION_STARTED {
    if { [string tolower [HTTP::uri]] contains "ua=0" } {
        ACCESS::session remove
    }
}
when ACCESS_ACL_ALLOWED {
    set apm_mrhsession [HTTP::cookie value "MRHSession"]
    if { [table lookup $apm_mrhsession] == "EXCHANGE_LOGOUT" } {
        ACCESS::session remove
        table delete $apm_mrhsession
    }
}
when HTTP_REQUEST {
    set isset 0
    if {[string tolower [HTTP::uri]] starts_with "/owa" } {
        if {[string tolower [HTTP::uri]] contains "logoff" } {
            ACCESS::session remove
            HTTP::respond 440 "Set-Cookie" $static::cookie_cadata Set-Cookie $static::cookie_clientid Set-Cookie $static::cookie_uc Set-Cookie $static::cookie_xbackend Set-Cookie $static::cookie_xowacanary
        } else {
            if { [string tolower [HTTP::uri]] contains "ua=0" } {
                set mrhsession [HTTP::cookie value "MRHSession"]
                set isset 1
            }
        }
    }
}
when HTTP_RESPONSE {
    if { $isset == 1 } {
        if { $mrhsession != "" && [HTTP::status] == 440 } {
            table set $apm_mrhsession "EXCHANGE_LOGOUT"
            return
        }
    }
}}

apm_login_timeout_irule_2 {
when RULE_INIT {
   set static::cookie_clientid [format "ClientId=null; path=/; Expires=Thurs, 01-Jan-1970 00:00:00 GMT;"]
   set static::cookie_uc [format "UC=null; path=/; Expires=Thurs, 01-Jan-1970 00:00:00 GMT;"]
   set static::cookie_xbackend [format "X-BackEndCookie=null; path=/; Expires=Thurs, 01-Jan-1970 00:00:00 GMT;"]
   set static::cookie_xowacanary [format "X-OWA-CANARY=null; path=/; Expires=Thurs, 01-Jan-1970 00:00:00 GMT;"]
}
when HTTP_REQUEST {
    if {[string tolower [HTTP::uri]] starts_with "/owa" } {
        set owa_session [HTTP::cookie value "ClientId"]
        table add $owa_session 0 <OWA_IDLE>
        if {[string tolower [HTTP::uri]] contains "ua=0" } {
            table incr -notouch $owa_session
            if {[table lookup -notouch $owa_session] != 0 && [table timeout -remaining $owa_session] < 300 } {
                log local0. "Session timed out"
                HTTP::respond 440 Set-Cookie $static::cookie_clientid Set-Cookie $static::cookie_uc Set-Cookie $static::cookie_xbackend Set-Cookie $static::cookie_xowacanary
                ACCESS::session remove
            }
        } else {
                table replace $owa_session 0 <OWA_IDLE>
        }
    }
}}

pop3_monitor_eav_script {#!/bin/sh
# These arguments supplied automatically for all external monitors:
# $1 = IP (nnn.nnn.nnn.nnn notation)
# $2 = port (decimal, host byte order)
#
# This script expects the following Name/Value pairs:
#  USER  = the username associated with a mailbox
#  PASSWORD = the password for the user account
#  DOMAIN = the Windows domain in which the account lives
#
# Remove IPv6/IPv4 compatibility prefix (LTM passes addresses in IPv6 format)

NODE=`echo ${1} | sed 's/::ffff://'`
if [[ $NODE =~ ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$ ]]; then
    # node is v4
    NODE=${NODE}
else
    # node is v6
    NODE=[${NODE}]
fi
PORT=995
PIDFILE="/var/run/`basename ${0}`.my_new_iapp_test_2010_${USER}_${NODE}_ad.pid"
RECV='successfully logged on'

# kill of the last instance of this monitor if hung and log current pid
if [ -f $PIDFILE ]
then
   echo "EAV exceeded runtime needed to kill ${NODE}:${PORT}" | logger -p local0.error
   kill -9 `cat $PIDFILE` > /dev/null 2>&1
fi
echo "$$" > $PIDFILE
/usr/bin/curl-apd -k -v -u ${DOMAIN}\\${USER}:${PASSWORD} pop3s://${NODE}:${PORT} 2>&1 | grep "${RECV}" > /dev/null
STATUS=$?
rm -f $PIDFILE
if [ $STATUS -eq 0 ]
then
    echo "UP"
fi
exit
}

imap_monitor_eav_script {#!/bin/sh
# These arguments supplied automatically for all external monitors:
# $1 = IP (nnn.nnn.nnn.nnn notation)
# $2 = port (decimal, host byte order)
#
# This script expects the following Name/Value pairs:
#  USER  = the username associated with a mailbox
#  PASSWORD = the password for the user account
#  DOMAIN = the Windows domain in which the account lives
#
# Remove IPv6/IPv4 compatibility prefix (LTM passes addresses in IPv6 format)

NODE=`echo ${1} | sed 's/::ffff://'`
if [[ $NODE =~ ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$ ]]; then
    # node is v4
    NODE=${NODE}
else
    # node is v6
    NODE=[${NODE}]
fi
PORT=993
FOLDER="INBOX"
PIDFILE="/var/run/`basename ${0}`.my_new_iapp_test_2010_${USER}_${NODE}_ad.pid"
RECV='EXISTS'

# kill of the last instance of this monitor if hung and log current pid
if [ -f $PIDFILE ]
then
   echo "EAV exceeded runtime needed to kill ${NODE}:${PORT}" | logger -p local0.error
   kill -9 `cat $PIDFILE` > /dev/null 2>&1
fi
echo "$$" > $PIDFILE
/usr/bin/curl-apd -k -v -u ${DOMAIN}\\${USER}:${PASSWORD} -X "SELECT ${FOLDER}" imaps://${NODE}:${PORT} 2>&1 | grep "${RECV}" > /dev/null
STATUS=$?
rm -f $PIDFILE
if [ $STATUS -eq 0 ]
then
    echo "UP"
fi
exit
}

snmp_eav_script {#!/bin/sh
## This EAV Looks for windows service status of 5 critical Exchange CAS services.
## This is completed using SNMP, please make sure SNMP is enabled on each server
## in the pool.
## The EAV requires that 'PASSWORD' be defined as a user variable that needs to
## be supplied within the LTM Monitor.  The password is the community string.

# Remove IPv6/IPv4 compatibility prefix (LTM passes addresses in IPv6 format)
NODE=`echo ${1} | sed 's/::ffff://'`
if [[ $NODE =~ ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$ ]]; then
NODE=${NODE}
else
NODE=[${NODE}]
fi

query1=$(/usr/bin/snmpget -v 2c -c "${PASSWORD}" $NODE 1.3.6.1.4.1.77.1.2.3.1.1.33.87.111.114.108.100.32.87.105.100.101.32.87.101.98.32.80.117.98.108.105.115.104.105.110.103.32.83.101.114.118.105.99.101)
query2=$(/usr/bin/snmpget -v 2c -c "${PASSWORD}" $NODE 1.3.6.1.4.1.77.1.2.3.1.1.31.77.105.99.114.111.115.111.102.116.32.69.120.99.104.97.110.103.101.32.83.101.114.118.105.99.101.32.72.111.115.116)
query3=$(/usr/bin/snmpget -v 2c -c "${PASSWORD}" $NODE 1.3.6.1.4.1.77.1.2.3.1.1.38.77.105.99.114.111.115.111.102.116.32.69.120.99.104.97.110.103.101.32.77.97.105.108.98.111.120.32.82.101.112.108.105.99.97.116.105.111.110)
query4=$(/usr/bin/snmpget -v 2c -c "${PASSWORD}" $NODE 1.3.6.1.4.1.77.1.2.3.1.1.17.73.73.83.32.65.100.109.105.110.32.83.101.114.118.105.99.101)
query5=$(/usr/bin/snmpget -v 2c -c "${PASSWORD}" $NODE 1.3.6.1.4.1.77.1.2.3.1.1.44.77.105.99.114.111.115.111.102.116.32.69.120.99.104.97.110.103.101.32.65.99.116.105.118.101.32.68.105.114.101.99.116.111.114.121.32.84.111.112.111.108.111.103.121)

if  [[ "$query1" == *"World Wide Web Publishing Service"*
    && "$query2" == *"Microsoft Exchange Service Host"*
    && "$query3" == *"Microsoft Exchange Mailbox Replication"*
    && "$query4" == *"IIS Admin Service"*
    && "$query5" == *"Microsoft Exchange Active Directory Topology"* ]]
then
    echo "All CAS Services Are Up!"
fi
}

pop_snmp_eav_script {#!/bin/bash
## This EAV Looks for windows service status of the the CAS POP service.
## This is completed using SNMP.  Please make sure SNMP is enabled on
## each server in the pool.
## The EAV requires that 'PASSWORD' be defined as a user variable that needs
## to be supplied within the LTM Monitor. The password is the community string.

# Remove IPv6/IPv4 compatibility prefix (LTM passes addresses in IPv6 format)
NODE=`echo ${1} | sed 's/::ffff://'`
if [[ $NODE =~ ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$ ]]; then
NODE=${NODE}
else
NODE=[${NODE}]
fi

query1=$(/usr/bin/snmpget -v 2c -c "${PASSWORD}" $NODE 1.3.6.1.4.1.77.1.2.3.1.1.23.77.105.99.114.111.115.111.102.116.32.69.120.99.104.97.110.103.101.32.80.79.80.51)

if [[ "$query1" == *"Microsoft Exchange POP3"* ]]
then
    echo "POP Service is Up!"
fi
}

imap_snmp_eav_script {#!/bin/bash
## This EAV Looks for windows service status of the the CAS IMAP Service.
## This is completed using SNMP.  Please make sure SNMP is enabled on each
## server in the pool.
## The EAV requires that 'PASSWORD' be defined as a user variable that needs
## to be supplied within the LTM Monitor. The password is the community string.

# Remove IPv6/IPv4 compatibility prefix (LTM passes addresses in IPv6 format)
NODE=`echo ${1} | sed 's/::ffff://'`
if [[ $NODE =~ ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$ ]]; then
NODE=${NODE}
else
NODE=[${NODE}]
fi

query1=$(/usr/bin/snmpget -v 2c -c "${PASSWORD}" $NODE 1.3.6.1.4.1.77.1.2.3.1.1.24.77.105.99.114.111.115.111.102.116.32.69.120.99.104.97.110.103.101.32.73.77.65.80.52)

if [[ "$query1" == *"Microsoft Exchange IMAP4"* ]]
then
    echo "IMAP Service is Up!"
fi
}

owa_redirect_irule {
priority 900
when HTTP_REQUEST {
    if { ([HTTP::uri] == "/") } {
        HTTP::redirect https://[HTTP::host]/owa/
    }
}}

owa_forms_value_irule {
when ACCESS_POLICY_AGENT_EVENT {
  if {[ACCESS::session data get "session.logon.last.pubpriv"] eq "private"} {
    if {[ACCESS::session data get "session.logon.last.lightversion"] eq "yes"} {
      ACCESS::session data set "session.custom.owa.flags" 5
      ACCESS::session data set "session.custom.owa.trusted" 4
    } else {
        ACCESS::session data set "session.custom.owa.flags" 4
        ACCESS::session data set "session.custom.owa.trusted" 4
    }
  } else {
      if {[ACCESS::session data get "session.logon.last.lightversion"] eq "yes"} {
        ACCESS::session data set "session.custom.owa.flags" 1
        ACCESS::session data set "session.custom.owa.trusted" 0
      } else {
          ACCESS::session data set "session.custom.owa.flags" 0
          ACCESS::session data set "session.custom.owa.trusted" 0
      }
  }
}}

select_sso_irule {
when ACCESS_ACL_ALLOWED {
    set req_uri [string tolower [HTTP::uri]]
    if { $req_uri contains "<OWA_URI>" <ECP_URI> } {
        WEBSSO::select [set foo <PREFIX>_<OWA_SSO>]
    }
    unset req_uri
}}

trustedAddresses { internal <PREFIX>_trustedAddresses {
    records replace-all-with { <TRUSTED> <ETRUSTED> }
    type ip
}}

edge_base_irule {
when ACCESS_ACL_ALLOWED {
    set sessionid [ACCESS::session data get "session.user.sessionid"]
    HTTP::header insert APM_session $sessionid
}
when HTTP_RESPONSE {
    if { ( [HTTP::header exists "WWW-Authenticate"] &&
        [string tolower [HTTP::header values "WWW-Authenticate"]] contains "negotiate" ) ||
        ( [HTTP::header exists "Persistent-Auth"] &&
        [string tolower [HTTP::header "Persistent-Auth"]] contains "true" ) } {
        ONECONNECT::reuse disable
        ONECONNECT::detach disable
        NTLM::disable
   }
   if {[HTTP::header exists "Transfer-Encoding"]} {
        HTTP::payload rechunk
   }
}}

oa_2013_oneconnect_irule {
when HTTP_RESPONSE {
    if { ( [HTTP::header exists "WWW-Authenticate"] &&
        [string tolower [HTTP::header values "WWW-Authenticate"]] contains "negotiate" ) ||
        ( [HTTP::header exists "Persistent-Auth"] &&
        [string tolower [HTTP::header "Persistent-Auth"]] contains "true" ) } {
        ONECONNECT::reuse disable
        ONECONNECT::detach disable
        NTLM::disable
   }
   if {[HTTP::header exists "Transfer-Encoding"]} {
        HTTP::payload rechunk
   }
}}

snatpool_irule {
when RULE_INIT {
    # Use a local array to configure SNAT addresses.
    # These addresses do not need to be defined in a SNAT pool or elsewhere.
<SNATPOOL_MEMBERS>
}
when CLIENT_ACCEPTED {
    # Calculate the crc32 checksum of the client IP
    # Use the modulo of the checksum and number of SNAT IPs to pick a SNAT IP
    snat $static::snat_ips_<APP_NAME>([expr {[crc32 [IP::client_addr]] % [array size static::snat_ips_<APP_NAME>]}])
}}

accept_encoding_irule {
when HTTP_REQUEST {
        <ACCEPT_ENCODING>
}}

combined_pool_irule {
## Exchange 2013 iRule to select pool without persistence when all Exchange
## HTTP-based services are accessed through the same virtual server.
when HTTP_REQUEST {
    switch -glob -- [string tolower [HTTP::path]] {
        "/microsoft-server-activesync*" {
            <AS_IDLE>
            <AS_POOL>
            <COMPRESS>
            <CACHE>
            return
        }
        "/owa*" {
            <ACCEPT_ENCODING>
            <OWA_POOL>
            return
        }
        "/ecp*" {
            ## Exchange Control Panel.
            <ACCEPT_ENCODING>
            <OWA_POOL>
            return
        }
        "/ews*" {
            ## Exchange Web Services.
            <EWS_POOL>
            <COMPRESS>
            <CACHE>
            return
        }
        "/oab*" {
            ## Offline Address Book.
            <EWS_POOL>
            persist none
            return
        }
        "/mapi*" {
            <MAPI_POOL>
            <COMPRESS>
            <CACHE>
            return
         }
        "/rpc/rpcproxy.dll*" {
            ## Outlook Anywhere.
            <OA_POOL>
            <COMPRESS>
            <CACHE>
            return
        }
        "/autodiscover*" {
            ## Requests for Autodiscovery information.
            <AD_POOL>
            persist none
            return
        }
        default {
            <OWA_POOL>
        }
    }
}
when HTTP_RESPONSE {
    if { ( [HTTP::header exists "WWW-Authenticate"] &&
        [string tolower [HTTP::header values "WWW-Authenticate"]] contains "negotiate" ) ||
        ( [HTTP::header exists "Persistent-Auth"] &&
        [string tolower [HTTP::header "Persistent-Auth"]] contains "true" ) } {
        ONECONNECT::reuse disable
        ONECONNECT::detach disable
        NTLM::disable
   }
   if {[HTTP::header exists "Transfer-Encoding"]} {
        HTTP::payload rechunk
   }
}}

combined_persist_irule {
## iRule to select pool and persistence method when all HTTP-based services are
## accessed through the same virtual server. This iRule uses an HTTP header
## inserted by a BIG-IP Edge Gateway for persistence (if that header is present)
## Otherwise it will set persistence according to traditional methods.
when HTTP_REQUEST {
    switch -glob -- [string tolower [HTTP::path]] {
    "/microsoft-server-activesync*" {
        ## Direct all ActiveSync clients to a common pool; use Auth
        ## header value if it exists (Basic auth only, which is the
        ## default); otherwise we fall back to client IP
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } elseif { [HTTP::header exists "Authorization"] && [string tolower [HTTP::header "Authorization"]]
            starts_with "basic" } {
            set as_key [sha256 [HTTP::header "Authorization"]]
            persist uie $as_key 7200
        } else {
            persist source_addr
        }
        <AS_IDLE>
        <AS_POOL>
        <COMPRESS>
        <CACHE>
        return
    }
    "/owa*" {
        ## Outlook Web Access
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } else {
            persist cookie insert 0
        }
        <ACCEPT_ENCODING>
        <OWA_POOL>
        return
    }
    "/ecp*" {
        ## Exchange Control Panel.
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } else {
            persist cookie insert 0
        }
        <ACCEPT_ENCODING>
        <OWA_POOL>
        return
    }
    "/ews*" {
        ## Exchange Web Services.
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } else {
            persist source_addr
        }
        <EWS_POOL>
        <COMPRESS>
        <CACHE>
        return
    }
    "/oab*" {
        ## Offline Address Book. Persistence is not required for OAB
        <EWS_POOL>
        persist source_addr
        return
    }
    "/rpc/rpcproxy.dll*" {
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } elseif { [HTTP::header exists "Authorization"] && [string tolower [HTTP::header "Authorization"]]
            starts_with "basic" } {
            set rpc_key [sha256 [HTTP::header "Authorization"]]
            persist uie $rpc_key 7200
        } else {
            persist source_addr
        }
        ## Outlook Anywhere.
        <OA_POOL>
        <COMPRESS>
        <CACHE>
        return
    }
    "/autodiscover*" {
        ## Autodiscovery. No Persistence.
        <AD_POOL>
        persist none
        return
    }
    default {
        ## This final section takes all traffic that has not otherwise
        ## been accounted for and sends it to the pool for Outlook Web App
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } else {
            persist source_addr
        }
        <OWA_POOL>
    }}
}
when HTTP_RESPONSE {
    if { ( [HTTP::header exists "WWW-Authenticate"] &&
        [string tolower [HTTP::header values "WWW-Authenticate"]] contains "negotiate" ) ||
        ( [HTTP::header exists "Persistent-Auth"] &&
        [string tolower [HTTP::header "Persistent-Auth"]] contains "true" ) } {
        ONECONNECT::reuse disable
        ONECONNECT::detach disable
        NTLM::disable
   }
   if {[HTTP::header exists "Transfer-Encoding"]} {
        HTTP::payload rechunk
   }
}}

apm_combined_pool_irule {
when ACCESS_ACL_ALLOWED {
    set sessionid [ACCESS::session data get "session.user.sessionid"]
    switch -glob -- [string tolower [HTTP::path]] {
        "/microsoft-server-activesync*" {
            <AS_IDLE>
            <AS_POOL>
            <COMPRESS>
            <CACHE>
            return
        }
        "/owa*" {
            <ACCEPT_ENCODING>
            <OWA_POOL>
            <PRIVATE_COMPUTER>
            return
        }
        "/ews*" {
            <EWS_POOL>
            <COMPRESS>
            <CACHE>
            return
        }
        "/ecp*" {
            <ACCEPT_ENCODING>
            <OWA_POOL>
            return
        }
        "/oab*" {
            <EWS_POOL>
            persist none
            return
        }
        "/mapi*" {
            <MAPI_POOL>
            <COMPRESS>
            <CACHE>
            return
         }
        "/rpc/rpcproxy.dll*" {
            <OA_POOL>
            <COMPRESS>
            <CACHE>
            return
        }
        "/autodiscover*" {
            <AD_POOL>
            persist none
            return
        }
        default {
            ## This final section takes all traffic that has not otherwise
            ## been accounted for and sends it to the pool for Outlook Web
            ## App
            <OWA_POOL>
        }
    }
}
when HTTP_RESPONSE {
    if { ( [HTTP::header exists "WWW-Authenticate"] &&
        [string tolower [HTTP::header values "WWW-Authenticate"]] contains "negotiate" ) ||
        ( [HTTP::header exists "Persistent-Auth"] &&
        [string tolower [HTTP::header "Persistent-Auth"]] contains "true" ) } {
        ONECONNECT::reuse disable
        ONECONNECT::detach disable
        NTLM::disable
   }
   if {[HTTP::header exists "Transfer-Encoding"]} {
        HTTP::payload rechunk
   }
}}

apm_owa_pool_irule {
when HTTP_REQUEST {
    <PRIVATE_COMPUTER>
}}}

# STATIC APM POLICIES
# Text-heavy APM configurations are stored here.
array set apm_map {

    default {
        <PROFILE_TYPE> {apm profile access}
        <GROUP_DEF> {type logout }
        <PROFILE_DEF>  "accept-languages replace-all-with { en }
        access-policy <PREFIX>
        default-language en
        domain-cookie none
        domain-mode single-domain
        customization-group <PREFIX>_logout
        eps-group <PREFIX>_eps
        errormap-group <PREFIX>_errormap
        framework-installation-group <PREFIX>_frameworkinstallation
        general-ui-group <PREFIX>_general_ui
        logout-uri-include replace-all-with { <LOGOUT_URI> }
        logout-uri-timeout 5
        persistent-cookie false
        secure-cookie true
        <LOG_SETTINGS>
        <MORE_ACCESS_PROFILE_ITEMS>" }

    exchange {
        <PROFILE_TYPE> {apm profile exchange}
        <PROFILE_DEF>  "auto-discover-sso-config <AUTODISCOVER_SSO>
        offline-address-book-sso-config <OAB_SSO>
        web-service-sso-config <EWS_SSO>" }

    ntlm_exchange {
        <PROFILE_TYPE> {apm profile exchange}
        <PROFILE_DEF>  "auto-discover-auth-type basic-ntlm
        auto-discover-sso-config <PREFIX>_ntlm_kerberos_sso
        offline-address-book-auth-type basic-ntlm
        offline-address-book-sso-config <PREFIX>_ntlm_kerberos_sso
        rpc-over-http-auth-type ntlm
        rpc-over-http-sso-config <PREFIX>_ntlm_kerberos_sso
        web-service-auth-type basic-ntlm
        web-service-sso-config <PREFIX>_ntlm_kerberos_sso
        ntlm-auth-name <NTLM_AUTH_NAME>" }

    ntlm_exchange_edge {
        <PROFILE_TYPE> {apm profile exchange}
        <PROFILE_DEF>  "auto-discover-auth-type basic-ntlm
        auto-discover-sso-config <PREFIX>_ntlm_kerberos_edge_sso
        offline-address-book-auth-type basic-ntlm
        offline-address-book-sso-config <PREFIX>_ntlm_kerberos_edge_sso
        rpc-over-http-auth-type ntlm
        rpc-over-http-sso-config <PREFIX>_ntlm_kerberos_edge_sso
        web-service-auth-type basic-ntlm
        web-service-sso-config <PREFIX>_ntlm_kerberos_edge_sso
        ntlm-auth-name <NTLM_AUTH_NAME>" }

    form_basedv2_sso {
        <PROFILE_TYPE> {apm sso form-basedv2}
        <PROFILE_DEF> "forms replace-all-with {
            owa {
                controls add {
                    username {
                        secure false value \"%{session.sso.token.last.username}\"
                    }
                    password {
                        secure true value \"%{session.sso.token.last.password}\"
                    }
                }
                request-value \"/owa/auth/logon.aspx\"
                submit-javascript clkLgn()
                submit-javascript-type extra
                success-match-type cookie
                success-match-value <MATCH_VALUE>
            }
        }" }

    form_basedv2_opt_sso {
        <PROFILE_TYPE> {apm sso form-basedv2}
        <PROFILE_DEF> "forms replace-all-with {
            owa {
                controls add {
                    username {
                        secure false value \"%{session.sso.token.last.username}\"
                    }
                    password {
                        secure true value \"%{session.sso.token.last.password}\"
                    }
                    flags {
                        value \"%{session.custom.owa.flags}\"
                    }
                    trusted {
                        value \"%{session.custom.owa.trusted}\"
                    }
                }
                request-value \"/owa/auth/logon.aspx\"
                submit-javascript clkLgn()
                submit-javascript-type extra
                success-match-type cookie
                success-match-value <MATCH_VALUE>
            }
        }" }

    ntlm_sso {
        <PROFILE_TYPE> {apm sso ntlmv<NTLM_VERSION>}
        <PROFILE_DEF>  "ntlm-domain <NTLM_DOMAIN>" }

    ntlm_kerberos_sso {
        <PROFILE_TYPE> {apm sso kerberos}
        <PROFILE_DEF>  "account-name <NTLM_USER>
        account-password <NTLM_PASSWORD>
        kdc <NTLM_KDC>
        realm <REALM>
        spn-pattern <SPN_PATTERN>" }

    ntlm_kerberos_edge_sso {
        <PROFILE_TYPE> {apm sso kerberos}
        <PROFILE_DEF>  "account-name <NTLM_USER>
        account-password <NTLM_PASSWORD>
        kdc <NTLM_KDC>
        realm <REALM>
        spn-pattern <SPN_PATTERN>" }

    ntlm_combined_https {
        <PROFILE_TYPE> {apm ntlm ntlm-auth}
        <PROFILE_DEF>  "dc-fqdn-list replace-all-with { <NTLM_SERVERS> }
        machine-account-name <MACHINE_ACCOUNT>" }

    ntlm_oa_https {
        <PROFILE_TYPE> {apm ntlm ntlm-auth}
        <PROFILE_DEF>  "dc-fqdn-list replace-all-with { <NTLM_SERVERS> }
        machine-account-name <MACHINE_ACCOUNT>" }

    ntlm_edge {
        <PROFILE_TYPE> {apm ntlm ntlm-auth}
        <PROFILE_DEF>  "dc-fqdn-list replace-all-with { <NTLM_SERVERS> }
        machine-account-name <MACHINE_ACCOUNT>" }

    ent_in {
        <ITEM_AGENT> {}
        <ITEM_CAPTION> {"Start"}
        <ITEM_TYPE> {}
        <RULE_NEXT_0> <ENT_NEXT_ITEM> }

    landing_uri {
        <ITEM_AGENT> {}
        <ITEM_CAPTION>   {"Landing URI"}
        <RULE_CAPTION_1> {"Landing URI"}
        <RULE_EXPR_1> {"expr {[mcget {session.server.landinguri}] == \"/owa\" \
                           || [mcget {session.server.landinguri}] == \"/owa/\"}"}
        <RULE_NEXT_1> ondemand_cert
        <RULE_NEXT_0> <LANDING_NEXT_ITEM> }

    ondemand_cert {
        <AGENT_TYPE> aaa-client-cert
        <AGENT_DEF> {}
        <ITEM_CAPTION> {"On-Demand Cert Auth"}
        <RULE_EXPR_1> {"expr {[mcget {session.ssl.cert.valid}] == \"0\"}"}
        <RULE_NEXT_1> variable_assign
        <RULE_NEXT_0> end_deny }

    variable_assign {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "variables {{
            expression \"set e_fields [split  [mcget {session.ssl.cert.x509extension}] \\\"\\n\\\"];
            foreach qq $e_fields {
              if {[string first \\\"othername:UPN\\\" $qq] >= 0} {
                return [string range $qq [expr {[string first \\\"<\\\" $qq] + 1 }] [expr {[string first \\\">\\\" $qq] - 1 }]];
              }
            }
            return \\\"\\\";\"
                        varname session.logon.last.upn
                    }
                    {
                        expression \"set upn [mcget {session.logon.last.upn}];
            if {[string first \\\"@\\\" $upn] >= 0} {
              return [string range $upn 0 [expr {[string first \\\"@\\\" $upn] - 1 }]];
            } else {
              return $upn;
            }\"
                        varname session.logon.last.username
                    }
                    {
                        expression \"set upn [mcget {session.logon.last.upn}];
            if {[string first \\\"@\\\" $upn] >= 0} {
              return [string range $upn [expr {[string first \\\"@\\\" $upn] + 1 }] end];
            } else {
              return \\\"\\\";
            }\"
            varname session.logon.last.domain }}"
        <ITEM_CAPTION> {"Variable Assign"}
        <RULE_NEXT_0> credentials_4 }

    irule_event {
        <AGENT_TYPE> irule-event
        <AGENT_DEF> "id <PREFIX>_owa_forms_value_irule"
        <ITEM_CAPTION> {"iRule Event"}
        <RULE_NEXT_0> <IRULE_NEXT_ITEM> }

    ad_auth {
        <AGENT_TYPE> aaa-active-directory
        <AGENT_DEF> "server <AAA_POOL> type auth"
        <ITEM_CAPTION> {"AD Auth"}
        <RULE_EXPR_1> {"expr {[mcget {session.ad.last.authresult}] == 1}"}
        <RULE_NEXT_1> <AUTH_NEXT_ITEM>
        <RULE_NEXT_0> end_deny }

    query {
        <AGENT_TYPE> aaa-active-directory
        <AGENT_DEF> "server <AAA_POOL> type query query-filter \"sAMAccountName=%{session.logon.last.username}\""
        <ITEM_CAPTION> {"AD Query"}
        <RULE_EXPR_1> {"expr {[mcget {session.ad.last.attr.memberOf}] \
                    contains \"CN=Organization Management,OU=Microsoft\
                    Exchange Security Groups,DC=<LDAP_ADDRESS>\" }"}
        <RULE_NEXT_1> <QUERY_NEXT_ITEM>
        <RULE_NEXT_0> end_deny }

    msft_exch {
        <ITEM_AGENT> {}
        <ITEM_CAPTION> {"Client for MS Exchange"}
        <RULE_EXPR_1> {"expr {[mcget {session.user.microsoft-exchange-client}] == 1}"}
        <RULE_NEXT_1> auth_check
        <RULE_NEXT_0> <MSFT_NEXT_ITEM> }

    empty {
        <ITEM_AGENT> {}
        <ITEM_CAPTION> {"URI Check"}
        <RULE_CAPTION_1> {"EAC URI"}
        <RULE_EXPR_1> {"expr {[mcget {session.server.landinguri}] == \"/ecp/default.aspx\" }"}
        <RULE_NEXT_1> query
        <RULE_NEXT_0> <EMPTY_NEXT_ITEM> }

    custom_logon {
        <AGENT_TYPE> logon-page
        <AGENT_DEF> "<CUSTOM_AGENT> customization-group <ITEM>_ag split-username true"
        <GROUP_DEF> "<CUSTOM_PATH>"
        <ITEM_CAPTION> {"Logon Page"}
        <RULE_NEXT_0> <LOGON_NEXT_ITEM> }

    auth_check {
        <ITEM_AGENT> {}
        <ITEM_CAPTION> {"NTLM Auth Result Check"}
        <RULE_EXPR_1> {"expr {[mcget {session.ntlm.last.result}] == 1}"}
        <RULE_NEXT_1> credentials
        <RULE_NEXT_0> custom_logon }

    credentials {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "type sso-cred-mapping variables {{ expression \"mcget {session.logon.last.username}\" varname session.sso.token.last.username } { expression \"mcget {session.logon.last.password}\" varname session.sso.token.last.password }}"
        <ITEM_CAPTION> {"SSO Credential Mapping"}
        <RULE_NEXT_0> end_allow }

    end_allow {
        <AGENT_DEF> {}
        <AGENT_TYPE> ending-allow
        <ITEM_CAPTION> {"Allow"}
        <ITEM_TYPE> {item-type ending}
        <ITEM_RULES> {} }

    end_deny {
        <ACCESS_START_ITEM> <PREFIX>_ent_in
        <ACCESS_ENDING> <PREFIX>_end_deny
        <AGENT_TYPE> ending-deny
        <GROUP_DEF> {type logout }
        <ITEM_CAPTION> {"Deny"}
        <ITEM_TYPE> {item-type ending}
        <ITEM_COLOR> {2}
        <ITEM_RULES> {} }
}

##############
#    MAIN    #
##############


# Ntlm-auth requires a 'exch_ntlm' prefix on certain object names to match a system irule:
# exch_ntlm_combined_https, exch_ntlm_oa_https, exch_ntlm_edge.
# Using a common prefix of exch for all objects insures conformance.

set prefix [tmsh::pwd]/exch
set apm_map(prefix) $prefix
set app $tmsh::app_name

# DEPLOYMENT SCENARIOS
set lb_scenario \
    [iapp_is ::deployment_scenario__scenario $ALL_ON_LTM_SCENARIO]
set edge_scenario \
    [iapp_is ::deployment_scenario__scenario $EDGE_DEPLOYMENT_SCENARIO]

set ltm_provisioned [iapp_get_provisioned ltm]
set apm_provisioned [iapp_get_provisioned apm]
set avr_provisioned [iapp_get_provisioned avr]

if { !$edge_scenario && !$ltm_provisioned } {
    tmsh::log err "The template failed because LTM is required."
    error         "The template failed because LTM is required."
}
if { $edge_scenario && !$apm_provisioned } {
    tmsh::log err \
          "The template failed because APM is required for this scenario."
    error "The template failed because APM is required for this scenario."
}


set is_v11_4   [iapp_tmos_version >= 11.4.0]
set is_v11_4_1 [iapp_tmos_version >= 11.4.1]
set is_v11_5   [iapp_tmos_version >= 11.5.0]
set is_v11_5_4 [iapp_tmos_version >= 11.5.4]
set is_v11_6   [iapp_tmos_version >= 11.6.0]
set is_v11_6_1 [iapp_tmos_version >= 11.6.1]
set is_v12_0   [iapp_tmos_version >= 12.0.0]

# workaround for the change in monitor string handling
set backslash_bz559773 [expr { $is_v11_6_1 || ($is_v11_5_4 && !$is_v11_6) }]
if { [iapp_tmos_version == 11.6.0] } {
    regsub {.*Edition } [tmsh::show sys version] "" edition
    regsub {\\n.*} $edition "" edition
    set pos [expr { [string first "HF" $edition] + 2 }]
    if { $pos > 2 } {
        set hotfix [string range $edition $pos $pos]
        if { $hotfix > 5 } {
            set backslash_bz559773 1
        }
    }
}

set do_combined_vs [expr { \
    [iapp_is ::deployment_scenario__scenario $LTM_BEHIND_EDGE] || \
    ( [iapp_is ::deployment_scenario__scenario $ALL_ON_LTM_SCENARIO] && \
      [iapp_is ::deployment__combined_or_seperate_ips $SINGLE_IP_ANSWER] ) }]
set do_single_domain [expr { $do_combined_vs && \
    [iapp_is ::monitors__using_single_domain $USING_SINGLE_DOMAIN_ANSWER] }]

# array key: $svc,$do_single_domain
array set fqdn {
    owa,0  $::monitors__owa_domain
    mapi,0 $::monitors__mapi_domain
    oa,0   $::monitors__oa_domain
    ews,0  $::monitors__ews_domain
    as,0   $::monitors__as_domain
    ad,0   $::monitors__ad_domain
    owa,1  $::monitors__single_domain
    mapi,1 $::monitors__single_domain
    oa,1   $::monitors__single_domain
    ews,1  $::monitors__single_domain
    as,1   $::monitors__single_domain
    ad,1   $::monitors__single_domain
}

    set allowed_services { owa as ad pop3 imap }

# Build a list of services to be deployed by this app.
foreach svc $allowed_services {
    set [set svc]_pool_name none
    append service_list [expr { [set do_${svc} \
        [iapp_is ::services__deploying_[string map {imap imap4} $svc] $YES_ANSWER $ALL_ANSWER]] \
        ? "$svc " : "" }]
}
# MAPI is a special case of OA.
if { [iapp_is ::services__deploying_oa "Yes"] } {
    if { [iapp_is ::services__deploying_mapi "Yes"] } {
        set do_oa 0
        set do_mapi 1
        append service_list "mapi "
    } elseif { [iapp_is ::services__deploying_mapi "All"] } {
        set do_oa 1
        set do_mapi 1
        append service_list "mapi oa "
    } else {
        set do_oa 1
        set do_mapi 0
        append service_list "oa "
    }
} else {
    set do_oa 0
    set do_mapi 0
}

# EWS is a special case of OA. Deploy if deploying_oa == "Yes" or "ews"
if { [iapp_is ::services__deploying_oa "No"] } {
    set do_ews 0
} else {
    set do_ews 1
    append service_list "ews "
}
if { $edge_scenario } {
    set service_list edge
}

# APM (ACCESS POLICY)

# APM is deployed according to the following complicated guidelines.
#
#   Exchange 2010 + EAC is not allowed.
#   Exchange 2010 + No NLTM Auth => Standard APM
#   Exchange 2010 + NTLM Auth + separate virtuals =>
#       Add NTLM policy and NTLM system irule to OA virtual
#   Exchange 2010 + NTLM Auth + combined virtual =>
#       Add NTLM policy and NTLM system irule to combined virtual
#   Exchange 2013 + No EAC Restrict => Same as Exchange 2010
#   Exchange 2013 + EAC Restrict + No NTLM Auth + separate virtuals =>
#       Add EAC policy and EAC custom irule to OWA virtual
#   Exchange 2013 + EAC Restrict + No NTLM Auth + combined virtual =>
#       Add EAC policy and EAC custom irule to combined virtual
#   Exchange 2013 + EAC Restrict + NLTM Auth + separate virtuals =>
#       Add EAC policy and EAC custom irule to OWA virtual
#       Add NTLM policy and NTLM system irule to OA virtual
#   Exchange 2013 + EAC Restrict + NLTM Auth + combined virtual =>
#       Add EAC policy and EAC custom irule to combined virtual
#       Add SPECIAL COMBINED NTLM policy to combined virtual
#       Add NTLM system irule to combined virtual
#
# Edge scenario is treated like the combined virutal server case.

# Unlike most of the arrays in this template, this one is dynamically keyed.
# Any variable can be used to execute modifications to the APM configuration.
# In many cases, the [string map] is used to alter copies of an existing
# object in the APM configuration array, avoiding code duplication.
# The tactic is to start with the most common set of policies, and then
# tweak them according to various combinations of sys version, EAC, NTLM, etc.

# array keys $is_v11_4,$do_server_ntlm_sso,[expr {$do_client_ntlm_auth || $do_smartcard_auth}]
array set apm_profile_tags {
    0,0,1 { <MORE_ACCESS_PROFILE_ITEMS>
            { sso-name ${prefix}_ntlm_kerberos[expr \
            { $edge_scenario ? "_edge" : "" }]_sso }}
    1,0,0 { <MORE_ACCESS_PROFILE_ITEMS>
            { exchange-profile ${prefix}_exchange
              sso-name none }}
    1,0,1 { <MORE_ACCESS_PROFILE_ITEMS>
            { exchange-profile ${prefix}_[expr \
            { $do_client_ntlm_auth ? "ntlm_" : "" }]exchange[expr \
            { $do_client_ntlm_auth && $edge_scenario ? "_edge" : "" }]
             sso-name [expr \
            { $edge_scenario ? "${prefix}_ntlm_kerberos_edge_sso" : "none" }] }}
    1,1,0 { <MORE_ACCESS_PROFILE_ITEMS>
            { exchange-profile ${prefix}_exchange
              sso-name ${prefix}_ntlm_sso }}
    1,1,1 { <MORE_ACCESS_PROFILE_ITEMS>
            { exchange-profile ${prefix}_[expr \
            { $do_client_ntlm_auth ? "ntlm_" : "" }]exchange[expr \
            { $do_client_ntlm_auth && $edge_scenario ? "_edge" : "" }]
              sso-name ${prefix}_ntlm_sso }}
    *     { <MORE_ACCESS_PROFILE_ITEMS>
            { sso-name ${prefix}_ntlm_sso }}
}

# Policy alterations for EAC, NTLM, and EAC+NTLM are handled here.
# array keys $do_combined_vs,$do_eac_apm,$do_client_ntlm_auth,$do_smartcard_auth,$do_logon_options
array set apm_policy_tags {
    0,0,0,0,0 { <ENT_NEXT_ITEM>     custom_logon
                <AUTH_NEXT_ITEM>    credentials
                <LOGON_NEXT_ITEM>   ad_auth
              }
    0,0,0,0,1 { <ENT_NEXT_ITEM>     custom_logon
                <AUTH_NEXT_ITEM>    credentials
                <LOGON_NEXT_ITEM>   irule_event
                <IRULE_NEXT_ITEM>   ad_auth
              }
    0,0,0,1,0 { <ENT_NEXT_ITEM>     ondemand_cert
              }
    0,0,1,0,0 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_2
                <AUTH_1_NEXT_ITEM>  credentials_3
                <LOGON_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> ad_auth_1
              }
    0,0,1,0,1 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_2
                <AUTH_1_NEXT_ITEM>  credentials_3
                <LOGON_NEXT_ITEM>   irule_event
                <IRULE_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> irule_event_1
                <IRULE_1_NEXT_ITEM> ad_auth_1
              }
    0,0,1,1,0 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    landing_uri
                <LANDING_NEXT_ITEM> custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_2
                <AUTH_1_NEXT_ITEM>  credentials_3
                <LOGON_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> ad_auth_1
              }
    0,1,0,0,0 { <ENT_NEXT_ITEM>     custom_logon
                <AUTH_NEXT_ITEM>    empty
                <QUERY_NEXT_ITEM>   credentials_1
                <EMPTY_NEXT_ITEM>   credentials
                <LOGON_NEXT_ITEM>   ad_auth
              }
    0,1,0,0,1 { <ENT_NEXT_ITEM>     custom_logon
                <AUTH_NEXT_ITEM>    empty
                <QUERY_NEXT_ITEM>   credentials_1
                <EMPTY_NEXT_ITEM>   credentials
                <LOGON_NEXT_ITEM>   irule_event
                <IRULE_NEXT_ITEM>   ad_auth
              }
    0,1,0,1,0 { <ENT_NEXT_ITEM>     landing_uri
                <LANDING_NEXT_ITEM> custom_logon
                <QUERY_NEXT_ITEM>   credentials_1
                <LOGON_NEXT_ITEM>   query
              }
    0,1,1,0,0 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_1
                <AUTH_1_NEXT_ITEM>  empty
                <QUERY_NEXT_ITEM>   credentials_2
                <EMPTY_NEXT_ITEM>   credentials_3
                <LOGON_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> ad_auth_1
              }
    0,1,1,0,1 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_1
                <AUTH_1_NEXT_ITEM>  empty
                <QUERY_NEXT_ITEM>   credentials_2
                <EMPTY_NEXT_ITEM>   credentials_3
                <LOGON_NEXT_ITEM>   irule_event
                <IRULE_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> irule_event_1
                <IRULE_1_NEXT_ITEM> ad_auth_1
              }
    0,1,1,1,0 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    landing_uri
                <LANDING_NEXT_ITEM> custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_1
                <AUTH_1_NEXT_ITEM>  empty
                <QUERY_NEXT_ITEM>   credentials_2
                <EMPTY_NEXT_ITEM>   credentials_3
                <LOGON_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> ad_auth_1
              }
    1,0,0,0,0 { <ENT_NEXT_ITEM>     custom_logon
                <AUTH_NEXT_ITEM>    credentials
                <LOGON_NEXT_ITEM>   ad_auth
              }
    1,0,0,0,1 { <ENT_NEXT_ITEM>     custom_logon
                <AUTH_NEXT_ITEM>    credentials
                <LOGON_NEXT_ITEM>   irule_event
                <IRULE_NEXT_ITEM>   ad_auth
              }
    1,0,0,1,0 { <ENT_NEXT_ITEM>     landing_uri
                <LANDING_NEXT_ITEM> custom_logon
                <AUTH_NEXT_ITEM>    credentials
                <LOGON_NEXT_ITEM>   ad_auth
              }
    1,0,1,0,0 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_2
                <AUTH_1_NEXT_ITEM>  credentials_3
                <LOGON_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> ad_auth_1
              }
    1,0,1,0,1 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_2
                <AUTH_1_NEXT_ITEM>  credentials_3
                <LOGON_NEXT_ITEM>   irule_event
                <IRULE_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> irule_event_1
                <IRULE_1_NEXT_ITEM> ad_auth_1
              }
    1,0,1,1,0 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    landing_uri
                <LANDING_NEXT_ITEM> custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_2
                <AUTH_1_NEXT_ITEM>  credentials_3
                <LOGON_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> ad_auth_1
              }
    1,1,0,0,0 { <ENT_NEXT_ITEM>     custom_logon
                <AUTH_NEXT_ITEM>    empty
                <QUERY_NEXT_ITEM>   credentials_1
                <EMPTY_NEXT_ITEM>   credentials
                <LOGON_NEXT_ITEM>   ad_auth
              }
    1,1,0,0,1 { <ENT_NEXT_ITEM>     custom_logon
                <AUTH_NEXT_ITEM>    empty
                <QUERY_NEXT_ITEM>   credentials_1
                <EMPTY_NEXT_ITEM>   credentials
                <LOGON_NEXT_ITEM>   irule_event
                <IRULE_NEXT_ITEM>   ad_auth
              }
    1,1,0,1,0 { <ENT_NEXT_ITEM>     landing_uri
                <LANDING_NEXT_ITEM> custom_logon
                <AUTH_NEXT_ITEM>    empty
                <QUERY_NEXT_ITEM>   credentials_1
                <EMPTY_NEXT_ITEM>   credentials
                <LOGON_NEXT_ITEM>   ad_auth
              }
    1,1,1,0,0 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_1
                <AUTH_1_NEXT_ITEM>  empty
                <QUERY_NEXT_ITEM>   credentials_2
                <EMPTY_NEXT_ITEM>   credentials_3
                <LOGON_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> ad_auth_1
              }
    1,1,1,0,1 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_1
                <AUTH_1_NEXT_ITEM>  empty
                <QUERY_NEXT_ITEM>   credentials_2
                <EMPTY_NEXT_ITEM>   credentials_3
                <LOGON_NEXT_ITEM>   irule_event
                <IRULE_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> irule_event_1
                <IRULE_1_NEXT_ITEM> ad_auth_1
              }
    1,1,1,1,0 { <ENT_NEXT_ITEM>     msft_exch
                <MSFT_NEXT_ITEM>    landing_uri
                <LANDING_NEXT_ITEM> custom_logon_1
                <AUTH_NEXT_ITEM>    credentials_1
                <AUTH_1_NEXT_ITEM>  empty
                <QUERY_NEXT_ITEM>   credentials_2
                <EMPTY_NEXT_ITEM>   credentials_3
                <LOGON_NEXT_ITEM>   ad_auth
                <LOGON_1_NEXT_ITEM> ad_auth_1
              }
}

# array keys: $::apm__ad_monitor
array set aaa_monitor {
    ad_create { [iapp_conf create ltm monitor ldap ${app}_ldap \
                base \"$::apm__ad_monitor_tree\" \
                chase-referrals yes \
                debug no \
                defaults-from ldap \
                mandatory-attributes no \
                destination *:[expr { $::apm__ad_monitor_secure eq "ssl" \
                    ? "636" : "389" }] \
                filter cn=\"$::apm__ad_monitor_user\" \
                password [iapp_make_safe_password "$::apm__ad_monitor_password"] \
                security $::apm__ad_monitor_secure \
                time-until-up 0 \
                interval $::apm__ad_monitor_interval \
                timeout [expr {$::apm__ad_monitor_interval * 3 + 1}] \
                username \"cn=$::apm__ad_monitor_user,$::apm__ad_monitor_tree\"] }

    ad_select { $::apm__ad_monitor_choice }
    ad_icmp   { [iapp_conf create ltm monitor gateway-icmp ${app}_icmp \
                defaults-from gateway_icmp \
                interval 5 \
                timeout 16] }
}

set ltm_ad_pool { [iapp_conf create ltm pool ${app}_active_directory_pool \
    [iapp_pool_members $::apm__active_dir_servers -port any -aaa_pool] \
    load-balancing-mode "round-robin" \
    monitor [subst $aaa_monitor($::apm__ad_monitor)] \
    min-active-members 1] }

# array keys: $new_aaa_pool
array set apm_aaa {
    1 { [iapp_conf create apm aaa active-directory ${prefix}_aaa_pool \
        [expr { $::apm__allow_anonymous_binding == $CREDENTIALS_REQUIRED_FOR_BINDING_ANSWER \
        ? "admin-encrypted-password [iapp_make_safe_password "$::apm__ad_password"] \
           admin-name \"$::apm__ad_username\"" \
        : "admin-encrypted-password none \
           admin-name none" }] \
        domain $::apm__login_domain \
        domain-controllers [iapp_pool_members -aaa_domain -fields \
            { host fqdn } $::apm__active_dir_servers] \
            pool [subst $ltm_ad_pool]] }
    0 { $::apm__aaa_profile }
}

set do_apm [expr { $apm_provisioned && ( $edge_scenario || \
  ( $lb_scenario && [iapp_is ::apm__deploying_apm $YES_ANSWER] )) }]
set new_apm [expr { $do_apm && [iapp_is ::apm__apm_profile "/#create_new#"] }]
set do_eac_apm     [expr { $new_apm &&  \
  (($lb_scenario && $do_owa && [iapp_is ::services__restrict_eac_apm $YES_ANSWER]) || \
  ( $edge_scenario && [iapp_is ::edge_deployment__restrict_eac_apm $YES_ANSWER]))}]
set do_spn_pattern [iapp_is ::services__ntlm_spn_pattern $HOST_HEADER_ANSWER]
set is_fqdn_null   [expr { ![info exists ::apm__fqdn] || [iapp_is ::apm__fqdn ""] }]
set new_aaa_pool   [expr { $new_apm && [iapp_is ::apm__aaa_profile "/#create_new#"] }]

# Smart Card and NLTM front-end auth are supported with APM in TMOS 11.3 and later
set do_smartcard_auth   [expr { $do_apm && \
    (( !$edge_scenario && $do_owa && [iapp_is ::services__owa_smartcard_auth $YES_ANSWER] ) ||
    ( $edge_scenario && [iapp_is ::edge_deployment__owa_smartcard_auth $YES_ANSWER] )) }]
set do_client_ntlm_auth [expr { $do_apm && \
    (( !$edge_scenario && ( $do_mapi || $do_oa) && [iapp_is ::services__oa_ntlm_auth $YES_ANSWER] ) ||
    ( $edge_scenario && [iapp_is ::edge_deployment__oa_ntlm_auth $YES_ANSWER] )) }]
set do_server_ntlm_sso  [expr { $new_apm && ($edge_scenario
    ? !$do_smartcard_auth && !$do_client_ntlm_auth
    : (( $do_owa && !$do_smartcard_auth && [iapp_is ::services__owa_ntlm_sso $YES_ANSWER] ) ||
        ((  $do_mapi || $do_oa ) && !$do_client_ntlm_auth ) ||
        (!( $do_mapi || $do_oa ) && ( $do_ews || $do_ad ))))}]
set do_owa_windows_auth [expr { $new_apm ? ($do_smartcard_auth ? "1"
    : "[iapp_is ::services__owa_ntlm_sso $YES_ANSWER]")
    : "[iapp_is ::monitors__owa_auth_method $WINDOWS_AUTH_ANSWER]" }]
set owa_login_timeout   [expr { $do_owa_windows_auth
    ? (!$edge_scenario
        ? $::services__owa_login_timeout * 60 + 300
        : $::edge_deployment__owa_login_timeout * 60 + 300)
    : 28800 }]
set ntlm_sso_version    [expr { $do_server_ntlm_sso
    ? ( $edge_scenario
        ? "$::edge_deployment__ntlm_sso_version"
        : "$::services__ntlm_sso_version" )
    : "1" }]
set suppress_eav_scripts [expr { $ntlm_sso_version == "2" }]
set do_logon_options    [expr { $new_apm && !$do_smartcard_auth && !$do_owa_windows_auth &&
    (( !$edge_scenario && $do_owa && [iapp_is ::services__owa_logon_options $YES_ANSWER] ) ||
    ( $edge_scenario && [iapp_is ::edge_deployment__owa_logon_options $YES_ANSWER] )) }]

if { $new_apm } {
    set aaa_pool [subst $apm_aaa($new_aaa_pool)]

    set pre_proc_map "
            <LOGOUT_URI>   {/owa/logoff.owa /ecp/logoff.aspx}
            <MATCH_VALUE>  {cadata}
            <AAA_POOL>     $aaa_pool
            <NTLM_DOMAIN>  $::apm__login_domain
            <NTLM_VERSION> $ntlm_sso_version
            <LDAP_ADDRESS> \"[join [split $::apm__login_domain .] ,DC=]\"
            <CUSTOM_PATH>  \"[apm_logon_form $do_logon_options]\"
            [iapp_substa apm_profile_tags($is_v11_4,$do_server_ntlm_sso,[expr {$do_client_ntlm_auth || $do_smartcard_auth}])]
            $apm_policy_tags($do_combined_vs,$do_eac_apm,$do_client_ntlm_auth,$do_smartcard_auth,$do_logon_options)"

    if { $do_server_ntlm_sso && ( $edge_scenario || ( $do_mapi || $do_oa )) } {
        append pre_proc_map { <OAB_SSO> "${prefix}_ntlm_sso" }
    } else {
        append pre_proc_map { <OAB_SSO> "none" }
    }

    if { $do_server_ntlm_sso && ( $edge_scenario || ( $do_mapi || $do_ews || $do_oa )) } {
        append pre_proc_map { <EWS_SSO> "${prefix}_ntlm_sso" }
    } else {
        append pre_proc_map { <EWS_SSO> "none" }
    }

    if { $do_server_ntlm_sso && ( $edge_scenario || $do_ad ) } {
        append pre_proc_map { <AUTODISCOVER_SSO> "${prefix}_ntlm_sso" }
    } else {
        append pre_proc_map { <AUTODISCOVER_SSO> "none" }
    }

    if { $is_v12_0 } {
        if { $::apm__logging == "/#do_not_use#" } {
            append pre_proc_map { <LOG_SETTINGS> "log-settings none" }
        } else {
            append pre_proc_map { <LOG_SETTINGS> "log-settings replace-all-with \{ $::apm__logging \}" }
        }
    } else {
        append pre_proc_map { <LOG_SETTINGS> " " }
    }

    if { $is_v11_5 } {
        append pre_proc_map "
            <CUSTOM_AGENT> \"[expr { $do_logon_options \
                ? "field-type3 checkbox \
                   field-type4 text \
                   field-type5 text \
                   post-var-name3 change_password \
                   post-var-name4 pubpriv \
                   post-var-name5 lightversion \
                   sess-var-name3 change_password \
                   sess-var-name4 pubpriv \
                   sess-var-name5 lightversion" \
                : "field-type3 none \
                   field-type4 none \
                   field-type5 none" }]\""
    } else {
        append pre_proc_map "
            <CUSTOM_AGENT> \"[expr { $do_logon_options \
                ? "field-type4 text \
                   field-type5 text \
                   post-var-name4 pubpriv \
                   post-var-name5 lightversion \
                   sess-var-name4 pubpriv \
                   sess-var-name5 lightversion" \
                : "field-type4 none \
                   field-type5 none" }]\""
    }

    if { !$is_v11_4 } {
        unset -nocomplain apm_map(ntlm_sso)
        unset -nocomplain apm_map(exchange)
        unset -nocomplain apm_map(ntlm_exchange)
        unset -nocomplain apm_map(ntlm_exchange_edge)
    }

    if { $do_combined_vs } {
        unset -nocomplain apm_map(ntlm_oa_https)
    } else {
        unset -nocomplain apm_map(ntlm_combined_https)
    }

    if { $do_eac_apm } {
        set apm_map(credentials_1) [string map {credentials credentials_1} $apm_map(credentials)]
    } else {
        unset -nocomplain apm_map(query)
        unset -nocomplain apm_map(empty)
    }

    if { $do_client_ntlm_auth } {
        unset -nocomplain apm_map(exchange)
        set apm_map(ad_auth_1)      [string map {ad_auth ad_auth_1 AUTH AUTH_1} $apm_map(ad_auth)]
        set apm_map(custom_logon_1) [string map {custom_logon custom_logon_1 LOGON LOGON_1} $apm_map(custom_logon)]
        set apm_map(irule_event_1)  [string map {irule_event irule_event_1 IRULE IRULE_1} $apm_map(irule_event)]
        set apm_map(credentials_2)  [string map {credentials credentials_2} $apm_map(credentials)]
        set apm_map(credentials_3)  [string map {credentials credentials_3} $apm_map(credentials)]
    } else {
        unset -nocomplain apm_map(msft_exch)
        unset -nocomplain apm_map(auth_check)
        unset -nocomplain apm_map(ntlm_exchange)
        unset -nocomplain apm_map(ntlm_exchange_edge)
        unset -nocomplain apm_map(ntlm_combined_https)
        unset -nocomplain apm_map(ntlm_oa_https)
        unset -nocomplain apm_map(ntlm_edge)
    }

    if { !$do_server_ntlm_sso } {
        unset -nocomplain apm_map(ntlm_sso)
    }

    if { $do_smartcard_auth } {
        set apm_map(credentials_4) [string map {credentials credentials_1} $apm_map(credentials)]
        unset -nocomplain apm_map(form_basedv2_sso)
        unset -nocomplain apm_map(form_basedv2_opt_sso)
    } else {
        unset -nocomplain apm_map(landing_uri)
        unset -nocomplain apm_map(ondemand_cert)
        unset -nocomplain apm_map(variable_assign)
    }

    if { $do_client_ntlm_auth || $do_smartcard_auth } {
        set ntlm_servers ""
        if { $new_aaa_pool } {
            # re-use the template active directory fqdn values for ntlm
            foreach item $::apm__active_dir_servers {
                array set server [lindex $item 0]
                append ntlm_servers "$server(fqdn) "
            }
        } else {
            # check if AAA object uses a pool or is direct
            array set pool_def [lindex [tmsh::list apm aaa active-directory $aaa_pool] 4]
            if { ![info exists pool_def(use-pool)] || $pool_def(use-pool) ne "disabled" } {
                # parse the fqdn values from the chosen APM AAA object
                array set aaa_servers $pool_def(domain-controllers)
                set ntlm_servers [array names aaa_servers]
            }
        }
        if { $edge_scenario } {
            append pre_proc_map "
                <REALM>           [string toupper $::edge_deployment__ntlm_realm]
                <SPN_PATTERN>     HTTP/%h@[string toupper $::edge_deployment__ntlm_realm]
                <NTLM_AUTH_NAME>  ${prefix}_ntlm_edge
                <NTLM_USER>       $::edge_deployment__ntlm_user
                <NTLM_PASSWORD>   [string map {\$ \\\$ \[ \\\[ \] \\\] \# \\\\\\\\\\\\\\\\\\\\\\\# \; \\\\\\\\\\\\\\\\\\\\\\\;} $::edge_deployment__ntlm_passwd]
                <NTLM_KDC>        $::edge_deployment__ntlm_kdc
                <NTLM_SERVERS>    \{ $ntlm_servers \}"
            if { $do_client_ntlm_auth } {
                append pre_proc_map "
                <MACHINE_ACCOUNT> $::edge_deployment__ntlm_machine_account"
            }
        } else {
            append pre_proc_map "
                <REALM>           [string toupper $::services__ntlm_realm]
                <SPN_PATTERN>     [expr { $do_spn_pattern ? "HTTP/%h@[string toupper $::services__ntlm_realm]" : "none" }]
                <NTLM_AUTH_NAME>  ${prefix}_[expr { $do_combined_vs ? "ntlm_combined_https" : "ntlm_oa_https" }]
                <NTLM_USER>       $::services__ntlm_user
                <NTLM_PASSWORD>   [string map {\$ \\\$ \[ \\\[ \] \\\] \# \\\\\\\\\\\\\\\\\\\\\\\# \; \\\\\\\\\\\\\\\\\\\\\\\;} $::services__ntlm_passwd]
                <NTLM_KDC>        $::services__ntlm_kdc
                <NTLM_SERVERS>    \{ $ntlm_servers \}"
            if { $do_client_ntlm_auth } {
                append pre_proc_map "
                <MACHINE_ACCOUNT> $::services__ntlm_machine_account"
            }
        }
    } else {
        unset -nocomplain apm_map(ntlm_kerberos_sso)
        unset -nocomplain apm_map(ntlm_kerberos_edge_sso)
    }

    if { !$do_combined_vs && !$do_client_ntlm_auth && $do_smartcard_auth } {
        unset -nocomplain apm_map(credentials)
        unset -nocomplain apm_map(ad_auth)
        unset -nocomplain apm_map(empty)
        if { !$do_eac_apm } {
            unset -nocomplain apm_map(landing_uri)
            unset -nocomplain apm_map(custom_logon)
        }
    }

    if { $do_logon_options } {
        unset -nocomplain apm_map(form_basedv2_sso)
    } else {
        unset -nocomplain apm_map(form_basedv2_opt_sso)
        unset -nocomplain apm_map(irule_event)
        unset -nocomplain apm_map(irule_event_1)
    }

    if { $edge_scenario } {
        unset -nocomplain apm_map(ntlm_exchange)
        unset -nocomplain apm_map(ntlm_kerberos_sso)
        unset -nocomplain apm_map(ntlm_combined_https)
        unset -nocomplain apm_map(ntlm_oa_https)
    } else {
        unset -nocomplain apm_map(ntlm_exchange_edge)
        unset -nocomplain apm_map(ntlm_kerberos_edge_sso)
        unset -nocomplain apm_map(ntlm_edge)
        if { !$do_owa } {
            unset -nocomplain apm_map(form_basedv2_sso)
        }
    }

    array set apm_map [string map [subst $pre_proc_map] [array get apm_map]]
    iapp_apm_config apm_map

    # An access profile, WebSSO and RBA are always associated with APM.
    set apm_profile_names "${prefix} /Common/websso /Common/rba"

    # APM policies do not commit in a reliable manner when configured via iApp.
    # This time-bomb script insures that the policy gets committed.
    # See subcase SR1-315233635 for details.
    catch {
        set dir [tmsh::pwd]
        set fn "/var/tmp/iapp_${app}.sh"
        set fh [open $fn w]
        puts $fh "sleep 5"
        puts $fh "tmsh modify apm profile access ${prefix} generation-action increment"
        close $fh
        exec chmod 777 $fn
        exec $fn &
    } err
} else {
    set apm_profile_names [expr { $do_apm ? "$::apm__apm_profile /Common/websso /Common/rba": "" }]
}

# ECA
# array keys: $svc,$do_client_ntlm_auth
array set eca_profile_arr {
    combined,1  eca
    oa,1        eca
    ad,1        eca
    edge,1      eca
    *           ""
}

# AVR (ANALYTICS)
# array keys: $do_analytics,$new_analytics
array set analytics_arr {
    1,1 { [iapp_conf create ltm profile analytics ${app}_analytics_profile \
        defaults-from analytics] }
    1,0 $::analytics__analytics_profile
    *   { }
}
set do_analytics  [expr { $avr_provisioned && \
    [iapp_is ::analytics__add_analytics $YES_ANSWER] }]
set new_analytics \
    [iapp_is ::analytics__create_new_analytics $USE_DEFAULT_PROFILE_ANSWER]
set analytics_profile_name \
    [iapp_substa analytics_arr($do_analytics,$new_analytics)]

# FIREWALL (AFM) POLICY
# beware: syntactically correct AFM commands fail when AFM is not provisioned
# extra info exists test benefits BIG-IQ apps that bypass presentation

set afm_provisioned [expr { [iapp_get_provisioned afm] && $is_v11_4 }]
set do_firewall [expr { $afm_provisioned && \
    [info exists ::afm__policy] && \
    ![iapp_is ::afm__policy $::DO_NOT_USE_ANSWER] }]
set new_firewall [iapp_is ::afm__policy $::DEFAULT_ANSWER]
set allow_by_reputation [iapp_is ::afm__restrict_by_reputation "accept"]

set staging_policy [expr { $do_firewall && \
    ![iapp_is ::afm__staging_policy $::DO_NOT_USE_ANSWER] \
    ? "$::afm__staging_policy" : "none" }]

set security_logging [expr { $do_firewall && \
    ![iapp_is ::afm__security_logging $::DO_NOT_USE_ANSWER] \
    ? "security-log-profiles replace-all-with \{ $::afm__security_logging \}" : "" }]

# array key: $afm_provisioned,$do_firewall,$new_firewall
array set firewall_arr {
    1,1,1 { fw-enforced-policy \
            [iapp_conf create security firewall policy ${app}_firewall \
            rules replace-all-with \{ \
              acceptPackets \{ \
                action accept \
                log no \
                ip-protocol tcp \
                status enabled \
                source \{ [iapp_substa afm_restrict($::afm__restrict_by_addr)] \}\} \
              dropPackets \{ \
                action drop \
                log yes \
                ip-protocol tcp \
                status enabled \
                source \{ addresses replace-all-with \{ any/any \}\} \
              \}\}] \
            fw-staged-policy [subst $staging_policy] \
            $security_logging }
    1,1,0 { fw-enforced-policy $::afm__policy \
            fw-staged-policy [subst $staging_policy] \
            $security_logging }
    1,0,1 { fw-enforced-policy none \
            fw-staged-policy none }
    1,0,0 { fw-enforced-policy none \
            fw-staged-policy none }
    *     { }
}

# array key: $::afm__restrict_by_addr
array set afm_restrict {
    /#create_new# {addresses replace-all-with \{ $::afm__allowed_addr \}}
    /#do_not_use# {addresses replace-all-with \{ any/any \}}
    *         {address-lists replace-all-with \{ $::afm__restrict_by_addr \}}
}

# array keys:
# $afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,policy/profile
array set ip_intelligence_arr {
    1,1,0,0,profile { [iapp_conf create security ip-intelligence \
          profile           ${app}_ip_intelligence \
          defaults-from     ip-intelligence \
          botnets           $::afm__restrict_by_reputation \
          denial-of-service $::afm__restrict_by_reputation \
          infected-sources  $::afm__restrict_by_reputation \
          phishing          $::afm__restrict_by_reputation \
          proxy             $::afm__restrict_by_reputation \
          scanners          $::afm__restrict_by_reputation \
          spam-sources      $::afm__restrict_by_reputation \
          web-attacks       $::afm__restrict_by_reputation \
          windows-exploits  $::afm__restrict_by_reputation] }
    1,1,0,1,policy { \
         ip-intelligence-policy [iapp_conf create security ip-intelligence \
         policy             ${app}_ip_intelligence \
         default-action     $action($::afm__restrict_by_reputation) \
         blacklist-categories replace-all-with \{ \
             botnets \{ action use-policy-setting \} \
             cloud_provider_networks \{ action use-policy-setting \} \
             denial_of_service \{ action use-policy-setting \} \
             illegal_websites \{ action use-policy-setting \} \
             infected_sources \{ action use-policy-setting \} \
             phishing \{ action use-policy-setting \} \
             proxy \{ action use-policy-setting \} \
             scanners \{ action use-policy-setting \} \
             spam_sources \{ action use-policy-setting \} \
             web_attacks \{ action use-policy-setting \} \
             windows_exploits \{ action use-policy-setting \}\}] }
    1,0,0,1,policy { ip-intelligence-policy none }
    1,0,1,1,policy { ip-intelligence-policy none }
    1,1,1,1,policy { ip-intelligence-policy none }
    *     { }
}

# array key: $::afm__restrict_by_reputation
array set action {
    accept { accept default-log-blacklist-hit-only no }
    reject { drop   default-log-blacklist-hit-only yes }
    warn   { accept default-log-blacklist-hit-only yes }
}

# SSL (ENCRYPTION)
# array keys $do_client_ssl,$new_client_ssl,$do_smartcard_auth,$edge_scenario
array set client_ssl_arr {
    1,0,0,0  { $::deployment__client_ssl_profile \{ context clientside \} }
    1,0,0,1  { $::edge_deployment__client_ssl_profile \{ context clientside \} }
    1,0,1,0  { $::deployment__client_ssl_profile \{ context clientside \} }
    1,0,1,1  { $::edge_deployment__client_ssl_profile \{ context clientside \} }
    1,1,0,0  { [iapp_conf create ltm profile client-ssl ${app}_clientssl \
             defaults-from clientssl \
             key $::deployment__key \
             cert $::deployment__cert \
             chain [expr { [iapp_is ::deployment__chain_cert $::DO_NOT_USE_ANSWER]
             ? "none" : "$::deployment__chain_cert" }] \
             ca-file none \
             client-cert-ca none] \
             \{ context clientside \} }
    1,1,0,1  { [iapp_conf create ltm profile client-ssl ${app}_clientssl \
             defaults-from clientssl \
             key $::edge_deployment__key \
             cert $::edge_deployment__cert \
             chain [expr { [iapp_is ::edge_deployment__chain_cert $::DO_NOT_USE_ANSWER]
             ? "none" : "$::edge_deployment__chain_cert" }] \
             ca-file none \
             client-cert-ca none] \
             \{ context clientside \} }
    1,1,1,0  { [iapp_conf create ltm profile client-ssl ${app}_clientssl \
             defaults-from clientssl \
             key $::deployment__key \
             cert $::deployment__cert \
             chain [expr { [iapp_is ::deployment__chain_cert $::DO_NOT_USE_ANSWER]
             ? "none" : "$::deployment__chain_cert" }] \
             ca-file $::services__ssl_chain_cert \
             client-cert-ca $::services__ssl_chain_cert] \
             \{ context clientside \} }
    1,1,1,1  { [iapp_conf create ltm profile client-ssl ${app}_clientssl \
             defaults-from clientssl \
             key $::edge_deployment__key \
             cert $::edge_deployment__cert \
             chain [expr { [iapp_is ::edge_deployment__chain_cert $::DO_NOT_USE_ANSWER]
             ? "none" : "$::edge_deployment__chain_cert" }] \
             ca-file $::edge_deployment__ssl_chain_cert \
             client-cert-ca $::edge_deployment__ssl_chain_cert] \
             \{ context clientside \} }
    *      { }
}

# array keys $do_server_ssl,$new_server_ssl,$insecure_compatible
array set server_ssl_arr {
    1,1,0  { [iapp_conf create ltm profile server-ssl ${app}_serverssl \
             defaults-from serverssl] \
             \{ context serverside \} }
    1,1,1  { [iapp_conf create ltm profile server-ssl ${app}_serverssl \
             defaults-from serverssl-insecure-compatible] \
             \{ context serverside \} }
    1,0,0  { [expr { $edge_scenario ? "$::edge_deployment__server_ssl_profile" \
             : "$::deployment__server_ssl_profile" }] \{ context serverside \} }
    1,0,1  { $::edge_deployment__server_ssl_profile \{ context serverside \} }
    *      { }
}

# array keys are $edge_scenario,$do_apm
array set client_ssl_decision {
    0,0 {[iapp_is ::deployment__incoming_encrypted $ENCRYPTED_ANSWER]}
    *   {1}
}

# array keys are $edge_scenario,$do_client_ssl
array set server_ssl_decision {
    0,0 {[iapp_is ::deployment__encrypt $ENCRYPT_SSL_BRIDGING_ANSWER]}
    0,1 {[iapp_is ::deployment__reencrypt_2013 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    1,0 {[iapp_is ::edge_deployment__reencrypt_2013 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    1,1 {[iapp_is ::edge_deployment__reencrypt_2013 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    *   {0}
}

set do_client_ssl [iapp_substa client_ssl_decision($edge_scenario,$do_apm)]
set do_server_ssl [iapp_substa server_ssl_decision($edge_scenario,$do_client_ssl)]
set new_client_ssl [expr { (!$edge_scenario && \
    [iapp_is ::deployment__client_ssl_profile "/#create_new#"]) ||
    ($edge_scenario && [iapp_is ::edge_deployment__client_ssl_profile "/#create_new#"])}]
set new_server_ssl [expr { (!$edge_scenario && \
    [iapp_is ::deployment__server_ssl_profile "/#create_new#"]) ||
    ($edge_scenario && [iapp_is ::edge_deployment__server_ssl_profile "/#create_new#"])}]

set insecure_compatible [expr { $edge_scenario && \
    [iapp_is ::edge_deployment__insecure_compatible \
    $SELF_SIGNED_OR_DEFAULT_CERT_AND_KEY_ANSWER] }]
set ssl_profile_names { [iapp_substa client_ssl_arr($do_client_ssl,$new_client_ssl,$do_smartcard_auth,$edge_scenario)] \
       [iapp_substa server_ssl_arr($do_server_ssl,$new_server_ssl,$insecure_compatible)] }

# This suffix is built as a workaround for BZ407596 that requires unique irule
# and pool names during app config changes.
set bz [expr { $do_combined_vs + (2 * $do_client_ssl) + \
          (4 * $do_server_ssl) + (8 *$edge_scenario) }]

# TCP OPTIMIZATION
# array keys $lan_or_wan
array set tcp_arr {
    LAN   { [iapp_conf create ltm profile tcp \
            ${app}_lan-optimized_tcp_profile \
            defaults-from tcp-lan-optimized] \
            \{ context all \} }
    WAN   { [iapp_conf create ltm profile tcp \
            ${app}_lan-optimized_tcp_profile \
            defaults-from tcp-lan-optimized] \
            \{ context serverside \} \
            [iapp_conf create ltm profile tcp \
            ${app}_wan-optimized_tcp_profile \
            defaults-from tcp-wan-optimized \
            nagle disabled] \
            \{ context clientside \} }
}

# array keys $lan_or_wan
array set as_tcp_arr {
    LAN   { [iapp_conf create ltm profile tcp \
            ${app}_as_lan-optimized_tcp_profile \
            defaults-from tcp-lan-optimized \
            idle-timeout 1800] \
            \{ context all \} }
    WAN   { [iapp_conf create ltm profile tcp \
            ${app}_as_lan-optimized_tcp_profile \
            defaults-from tcp-lan-optimized \
            idle-timeout 1800] \
            \{ context serverside \} \
            [iapp_conf create ltm profile tcp \
            ${app}_as_wan-optimized_tcp_profile \
            defaults-from tcp-wan-optimized \
            idle-timeout 1800 \
            nagle disabled] \
            \{ context clientside \} }
}


set lan_or_wan $LAN_OPTION
set lan_or_wan [expr { $lb_scenario ? $::deployment__lan_or_wan : $lan_or_wan }]
set lan_or_wan [expr { $edge_scenario ? $::edge_deployment__lan_or_wan : \
                                                                  $lan_or_wan }]
# SNAT (ADDRESS TRANSLATION)
# array keys: $do_snat,$need_snatpool,$new_snatpool
# The string map effectively extracts the address values from the APL table
# by purging the column header "addr" and all of the braces.
array set snat_arr {
    1,1,1 { snatpool [iapp_conf create ltm snatpool ${app}_snatpool members \
            replace-all-with \{ [string map { addr {} \{ {} \} {} } \
            $::deployment__snatpool_members] \} ] }
    1,1,0 { snatpool $::deployment__snatpool }
    1,0,1 { snat automap }
    1,0,0 { snat automap }
    *     { snat none }
}

set do_snat [expr { $edge_scenario \
    || [iapp_is ::deployment__location $SAME_SUBNET_ANSWER] \
    || [iapp_is ::deployment__snat $NOT_DEFAULT_GATEWAY_ANSWER] }]
set need_snatpool [expr { !$edge_scenario \
    && [iapp_is ::deployment__automap_or_pool $NEED_SNATPOOL_ANSWER] }]
set new_snatpool [iapp_is ::deployment__snatpool "/#create_new#"]
set snat [iapp_substa snat_arr($do_snat,$need_snatpool,$new_snatpool)]

# HTTP
# array keys $do_client_ssl,$do_snat
array set http_profile_arr {
    1,1   { [iapp_conf create ltm profile http ${app}_http_profile \
            redirect-rewrite all \
            insert-xforwarded-for enabled \
            defaults-from http] }
    1,0   { [iapp_conf create ltm profile http ${app}_http_profile \
            redirect-rewrite all \
            insert-xforwarded-for disabled \
            defaults-from http] }
    0,1   { [iapp_conf create ltm profile http ${app}_http_profile \
            redirect-rewrite none \
            insert-xforwarded-for enabled \
            defaults-from http] }
    0,0   { [iapp_conf create ltm profile http ${app}_http_profile \
            redirect-rewrite none \
            insert-xforwarded-for disabled \
            defaults-from http] }
}

# array keys: $lan_or_wan,$do_cache_comp_arr($svc)
array set cache_comp_profile_arr {
    WAN,1 { [iapp_conf create ltm profile http-compression \
            ${app}_wan-optimized-compression_profile \
            content-type-include replace-all-with \{ $::HTTP_CONTENT_TYPES \} \
            defaults-from wan-optimized-compression] \
            [iapp_conf create ltm profile web-acceleration \
            ${app}_caching_profile \
            applications none \
            cache-uri-exclude replace-all-with \{ /owa/ev.owa oab.xml \} \
            defaults-from optimized-caching] }
    LAN,1 { [iapp_conf create ltm profile web-acceleration \
            ${app}_caching_profile \
            applications none \
            cache-uri-exclude replace-all-with \{ uglobal.js /owa/ev.owa oab.xml \} \
            defaults-from optimized-caching] }
    *     { }
}

# array key: $svc
array set do_cache_comp_arr {
    mapi {0}
    oa   {0}
    ews  {0}
    as   {0}
    *    {[expr { $lb_scenario || $edge_scenario }]}
}

if { $do_owa || $do_mapi || $do_oa || $do_ews || $do_as || $do_ad || $edge_scenario } {
    set http_profile_names "[iapp_substa http_profile_arr($do_client_ssl,$do_snat)] \
        [iapp_conf create ltm profile one-connect ${app}_oneconnect \
        defaults-from oneconnect source-mask 255.255.255.255] \
        /Common/ntlm"
}

# MONITORS
# array key: $svc,$advanced_monitors
array set monitor_arr {
    owa,1  { min 2 of \{ [iapp_conf create ltm monitor external ${app}_owa_snmp_monitor \
             run [iapp_conf create sys file external-monitor owa_eav \
                 source-path file:[create_eav_script snmp_eav_script]] \
             user-defined PASSWORD \"$::monitors__snmp_community_string\" \
             $interval_timeout] \
             [iapp_substa monitor_arr(owa,0,0)] \}}
    mapi,1 { min 2 of \{ [iapp_conf create ltm monitor external ${app}_mapi_snmp_monitor \
             run [iapp_conf create sys file external-monitor mapi_eav \
                 source-path file:[create_eav_script snmp_eav_script]] \
             user-defined PASSWORD \"$::monitors__snmp_community_string\" \
             $interval_timeout] \
             [iapp_substa monitor_arr(mapi,0,0)] \}}
    oa,1   { min 2 of \{ [iapp_conf create ltm monitor external ${app}_oa_snmp_monitor \
             run [iapp_conf create sys file external-monitor oa_eav \
                 source-path file:[create_eav_script snmp_eav_script]] \
             user-defined PASSWORD \"$::monitors__snmp_community_string\" \
             $interval_timeout] \
             [iapp_substa monitor_arr(oa,0,0)] \}}
    ews,1  { min 2 of \{ [iapp_conf create ltm monitor external ${app}_ews_snmp_monitor \
             run [iapp_conf create sys file external-monitor ews_eav \
                 source-path file:[create_eav_script snmp_eav_script]] \
             user-defined PASSWORD \"$::monitors__snmp_community_string\" \
             $interval_timeout] \
             [iapp_substa monitor_arr(ews,0,0)] \}}
    as,1   { min 2 of \{ [iapp_conf create ltm monitor external ${app}_as_snmp_monitor \
             run [iapp_conf create sys file external-monitor as_eav \
                 source-path file:[create_eav_script snmp_eav_script]] \
             user-defined PASSWORD \"$::monitors__snmp_community_string\" \
             $interval_timeout] \
             [iapp_substa monitor_arr(as,0,0)] \}}
    ad,1   { min 2 of \{ [iapp_conf create ltm monitor external ${app}_ad_snmp_monitor \
             run [iapp_conf create sys file external-monitor ad_eav \
                 source-path file:[create_eav_script snmp_eav_script]] \
             user-defined PASSWORD \"$::monitors__snmp_community_string\" \
             $interval_timeout] \
             [iapp_substa monitor_arr(ad,0,0)] \}}
    pop3,0 { [iapp_substa pop_imap_monitor_arr(1,0)] }
    pop3,1 { min $pop_imap_mailbox_count of \{ \
             [iapp_conf create ltm monitor external ${app}_pop3_snmp_monitor \
             run [iapp_conf create sys file external-monitor pop3_eav \
                 source-path file:[create_eav_script pop_snmp_eav_script]] \
             user-defined PASSWORD \"$::monitors__snmp_community_string\" \
             $interval_timeout] \
             [iapp_substa pop_imap_monitor_arr($do_server_ssl,$is_v11_4_1)] \}}
    imap,0 { [iapp_substa pop_imap_monitor_arr(1,0)] }
    imap,1 { min $pop_imap_mailbox_count of \{ \
             [iapp_conf create ltm monitor external ${app}_imap_snmp_monitor \
             run [iapp_conf create sys file external-monitor imap_eav \
                 source-path file:[create_eav_script imap_snmp_eav_script]] \
             user-defined PASSWORD \"$::monitors__snmp_community_string\" \
             $interval_timeout] \
             [iapp_substa pop_imap_monitor_arr($do_server_ssl,$is_v11_4_1)] \}}
    edge,0 { [iapp_conf create ltm monitor tcp ${app}_edge_monitor  defaults-from tcp  $interval_timeout ]}
    *      { [iapp_conf create ltm monitor $http_or_https \
             ${app}_${svc}_${http_or_https}_monitor \
             defaults-from $http_or_https \
             send \"GET [iapp_substa send_uri_arr($svc)] HTTP/1.1\\r\\nHost: [iapp_substa fqdn($svc,$do_single_domain)]\\r\\nConnection: Close\\r\\n\\r\\n\" \
             recv \"200 OK\" \
             destination *:* \
             interval 10 timeout 31 ]}
}

# array keys: $svc
array set send_uri_arr {
    owa  {/owa/healthcheck.htm}
    mapi {/mapi/healthcheck.htm}
    oa   {/rpc/healthcheck.htm}
    ews  {/EWS/healthcheck.htm}
    as   {/Microsoft-Server-Activesync/healthcheck.htm}
    ad   {/autodiscover/healthcheck.htm}
    *    {/}
}

# BZ427892 outlines EAV monitors using curl-apd as supported by TMOS 11.4.1
# array key: $do_server_ssl,$is_v11_4_1
array set pop_imap_monitor_arr {
    1,1 { [iapp_conf create ltm monitor external \
          ${app}_${svc}_${::monitors__username}_eav_monitor \
          run [iapp_conf create sys file external-monitor ${svc}_adv_eav \
              source-path file:[create_eav_script ${svc}_monitor_eav_script]] \
          user-defined DOMAIN $::monitors__account_domain \
          user-defined USER $::monitors__username \
          user-defined PASSWORD "[iapp_make_safe_password $::monitors__passwd]" \
          $interval_timeout] \
          [expr { $do_second_mailbox \
          ? "[iapp_conf create ltm monitor external ${app}_${svc}_${::monitors__second_username}_eav_monitor \
            run [iapp_conf create sys file external-monitor ${svc}_adv_eav \
                source-path file:[create_eav_script ${svc}_monitor_eav_script]] \
            user-defined DOMAIN $::monitors__second_account_domain \
            user-defined USER $::monitors__second_username \
            user-defined PASSWORD "[iapp_make_safe_password $::monitors__second_passwd]" \
            $interval_timeout]" \
          : "" }]}
    1,0 { [iapp_conf create ltm monitor tcp ${app}_tcp_monitor \
          defaults-from tcp \
          $interval_timeout ]}
    *   { [iapp_conf create ltm monitor $svc ${app}_${svc}_${::monitors__username}_monitor \
          defaults-from $svc \
          username $::monitors__username \
          password [iapp_make_safe_password $::monitors__passwd] \
          $interval_timeout] \
          [expr { $do_second_mailbox \
          ? "[iapp_conf create ltm monitor $svc ${app}_${svc}_${::monitors__second_username}_monitor \
            defaults-from $svc \
            username $::monitors__second_username \
            password [iapp_make_safe_password $::monitors__second_passwd] \
            $interval_timeout]" \
          : "" }]}
}

# Minimum number of monitors "up" to declare a service "up" differs per service.

set http_or_https [expr { $do_server_ssl ? "https" : "http" }]
set pop3_or_tcp   [expr { $do_server_ssl ? "tcp"   : "pop3" }]
set imap_or_tcp   [expr { $do_server_ssl ? "tcp"   : "imap" }]
set interval_timeout [expr { [info exists ::monitors__interval] \
    ? "interval $::monitors__interval \
       timeout [expr {$::monitors__interval * 3 + 1}]"
    : "interval 30 timeout 91" }]
set advanced_monitors \
    [iapp_is ::monitors__default_or_advanced $USE_ADVANCED_MONITOR_ANSWER]
set do_second_mailbox [expr { $advanced_monitors * \
    [iapp_is ::monitors__second_mailbox_account $SECOND_MAILBOX_ANSWER] }]
set pop_imap_mailbox_count [expr { 2 + ($do_second_mailbox && (!$do_server_ssl || $is_v11_4_1)) }]

# POOLS
# array keys: $svc,$do_<client or server>_ssl
array set port_arr {
    edge,0             80
    edge,1             443
    combined,0         80
    combined,1         443
    owa,0              80
    owa,1              443
    mapi,0             80
    mapi,1             443
    oa,0               80
    oa,1               443
    ews,0              80
    ews,1              443
    as,0               80
    as,1               443
    ad,0               80
    ad,1               443
    pop3,0             110
    pop3,1             995
    imap,0             143
    imap,1             993
}

# array keys: $svc,$do_single_pool
array set server_arr {
    owa,0              $::services__owa_servers
    mapi,0             $::services__mapi_servers
    oa,0               $::services__oa_servers
    ews,0              $::services__ews_servers
    as,0               $::services__as_servers
    ad,0               $::services__ad_servers
    pop3,0             $::services__pop3_servers
    imap,0             $::services__imap4_servers
    owa,1              $::services__servers
    mapi,1             $::services__servers
    oa,1               $::services__servers
    ews,1              $::services__servers
    as,1               $::services__servers
    ad,1               $::services__servers
    pop3,1             $::services__servers
    imap,1             $::services__servers
}

# array keys: $advanced_pools,$do_pga,$do_tcp_queuing
array set pool_lb_queue_arr {
    1,1,1 { load-balancing-mode $::services__lb_method_choice \
            min-active-members $::services__min_active_members \
            queue-on-connection-limit enabled \
            queue-depth-limit $::services__tcp_request_queue_length \
            queue-time-limit  $::services__tcp_request_queue_timeout }
    1,1,0 { load-balancing-mode $::services__lb_method_choice \
            min-active-members $::services__min_active_members \
            queue-on-connection-limit disabled }
    1,0,1 { load-balancing-mode $::services__lb_method_choice \
            min-active-members 0 \
            queue-on-connection-limit enabled \
            queue-depth-limit $::services__tcp_request_queue_length \
            queue-time-limit  $::services__tcp_request_queue_timeout }
    1,0,0 { load-balancing-mode $::services__lb_method_choice \
            min-active-members 0 \
            queue-on-connection-limit disabled }
    *     { load-balancing-mode least-connections-member \
            min-active-members 0 \
            queue-on-connection-limit disabled }
}

set do_single_pool [iapp_is ::deployment__service_distribution $SINGLE_POOL_OPTION]
set do_pga [iapp_is ::services__use_pga yes]
set do_tcp_queuing [iapp_is ::services__tcp_request_queuing_enable_question \
    $QUEUE_TCP_REQUESTS_ANSWER]
set advanced_pools \
    [iapp_is ::services__advanced_pool_settings $ADVANCED_POOL_SETTINGS_ANSWER]

if { $edge_scenario } {
    # $bz is added to the name as a workaround for BZ407719.
    set pool_name [iapp_conf create ltm pool ${app}_edge_pool$bz \
        members replace-all-with \{ [iapp_destination \
        $::edge_deployment__vs_addr $port_arr(edge,$do_server_ssl)] \} \
        monitor [iapp_substa monitor_arr(edge,0)] \
        service-down-action reset]
} else {
    foreach svc $service_list {

       # All pools are created here except for Edge scenario (above).
       # $bz is added to the name as a workaround for BZ407719.
       set [set svc]_pool_name \
            [iapp_conf create ltm pool ${app}_${svc}_pool$bz \
            [iapp_pool_members [iapp_substa server_arr($svc,$do_single_pool)] \
                          -port [subst $port_arr($svc,$do_server_ssl)]] \
            [iapp_substa pool_lb_queue_arr($advanced_pools,$do_pga,$do_tcp_queuing)] \
            monitor [iapp_substa monitor_arr($svc,$advanced_monitors)] \
            service-down-action reset \
            slow-ramp-time 300]
    }
}


# IRULES
# array keys $svc
array set irule_arr {
    combined {\{\
               [expr { $do_owa ? [iapp_substa owa_redirect_irule_arr($do_client_ssl)] : "" }] \
               [expr { $do_owa ? [iapp_substa apm_login_timeout_irule_arr($new_apm,$do_owa_windows_auth)] : "" }] \
               [expr { $do_owa ? [iapp_substa sso_irule_arr($new_apm)] : "" }] \
               [iapp_substa combined_persist_irule_arr($do_apm)] \
               [iapp_substa apm_irule_arr($new_apm,$do_client_ntlm_auth,$is_v11_4)] \
               [iapp_substa owa_forms_value_irule_arr($do_logon_options)] \
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool,$new_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    owa      {\{\
               [iapp_substa owa_redirect_irule_arr($do_client_ssl)] \
               [iapp_substa apm_login_timeout_irule_arr($new_apm,$do_owa_windows_auth)] \
               [iapp_substa encoding_irule_arr($lan_or_wan)] \
               [iapp_substa owa_persist_irule_arr($do_apm)] \
               [iapp_substa sso_irule_arr($new_apm)] \
               [iapp_substa owa_forms_value_irule_arr($do_logon_options)] \
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool,$new_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    mapi     {\{\
               [subst $oneconnect_irule] \
               [iapp_substa apm_irule_arr($new_apm,$do_client_ntlm_auth,$is_v11_4)] \
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool,$new_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    oa       {\{\
               [subst $oneconnect_irule] \
               [iapp_substa apm_irule_arr($new_apm,$do_client_ntlm_auth,$is_v11_4)] \
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool,$new_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    ews      {\{\
               [subst $oneconnect_irule] \
               [iapp_substa apm_irule_arr($new_apm,$do_client_ntlm_auth,$is_v11_4)] \
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool,$new_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    as       {\{\
               [iapp_substa apm_irule_arr($new_apm,$do_client_ntlm_auth,$is_v11_4)] \
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool,$new_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    ad       {\{\
               [iapp_substa apm_irule_arr($new_apm,$do_client_ntlm_auth,$is_v11_4)] \
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool,$new_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    edge     {\{ \
               [iapp_conf create ltm rule ${app}_edge_base_irule$bz $forms(edge_base_irule)] \
               [iapp_substa apm_irule_arr($new_apm,$do_client_ntlm_auth,$is_v11_4)] \
               [iapp_substa apm_login_timeout_irule_arr($new_apm,$do_owa_windows_auth)] \
               [iapp_substa sso_irule_arr($new_apm)] \
               [iapp_substa owa_forms_value_irule_arr($do_logon_options)] \
               $::edge_deployment__irules \}}
    *        {\{\
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool,$new_snatpool)] \}}
}

# array key: $do_client_ssl
array set owa_redirect_irule_arr {
    1 { [iapp_conf create ltm rule ${app}_owa_redirect_irule$bz \
                   $forms(owa_redirect_irule)] }
    * { }
}

# array key: $new_apm,$do_owa_windows_auth
array set apm_login_timeout_irule_arr {
    1,0 { [iapp_conf create ltm rule ${app}_login_timeout \
          [string map $irule_map $forms(apm_login_timeout_irule_1)]] }
    1,1 { [iapp_conf create ltm rule ${app}_login_timeout \
          [string map $irule_map $forms(apm_login_timeout_irule_2)]] }
    *   { }
}

# array keys: $new_apm,$do_client_ntlm_auth,$is_v11_4
array set apm_irule_arr {
    1,0,0 { _sys_APM_ExchangeSupport_OA_BasicAuth }
    1,1,0 { _sys_APM_ExchangeSupport_OA_NtlmAuth }
    *       { }
}

# array keys: $do_snat,$need_snatpool,$new_snatpool
array set snatpool_irule_arr {
    1,1,1 { [iapp_conf create ltm rule ${app}_snatpool_irule$bz \
            [create_snatpool_irule]] }
    *     { }
}

# array keys $do_apm
array set combined_persist_irule_arr {
    0 { [iapp_conf create ltm rule ${app}_combined_pool_irule$bz \
        [string map $irule_map $forms(combined_pool_irule)]] }
    * { [iapp_conf create ltm rule ${app}_apm_combined_pool_irule$bz \
        [string map $irule_map $forms(apm_combined_pool_irule)]] }
}

# array key $do_apm
array set owa_persist_irule_arr {
    1   { [iapp_conf create ltm rule ${app}_apm_owa_pool_irule$bz \
          [string map $irule_map $forms(apm_owa_pool_irule)]] }
    *   { }
}

# array key $lan_or_wan
array set encoding_irule_arr {
    LAN { [iapp_conf create ltm rule ${app}_accept_encoding_irule \
          [string map $irule_map $forms(accept_encoding_irule)]] }
    *   { }
}

# array keys $new_apm
array set sso_irule_arr {
    1   { [iapp_conf create ltm rule ${app}_select_sso_irule$bz \
          [string map $irule_map $forms(select_sso_irule)]] }
    *   { }
}

# array key $do_logon_options
array set owa_forms_value_irule_arr {
    1   { [iapp_conf create ltm rule ${app}_owa_forms_value_irule \
          $forms(owa_forms_value_irule)] }
    *   { }
}

set oneconnect_irule { [iapp_conf create ltm rule ${app}_oneconnect_irule \
          $forms(oa_2013_oneconnect_irule)] }

# array key $advanced_pools
array set custom_irule_arr {
    1  { [set ::services__[string map {imap imap4} $svc]_irules] }
    *  { }
}

# Substitutions for dynamic irules:
# This array is a string map used to customize the otherwise static irules
# stored in the forms array.
# The embedded string map on <TRUSTED> effectively extracts the address values
# from the APL table by purging the column header "addr" and all of the braces.
set irule_map [subst { \
    <APP_NAME>   {$app}
    <PREFIX>     {$prefix}
    <OWA_POOL>   {[expr { $do_owa && !$edge_scenario ? "pool [tmsh::pwd]/${app}_owa_pool$bz" :"" }]}
    <MAPI_POOL> {[expr { $do_mapi ? "pool [tmsh::pwd]/${app}_mapi_pool$bz":"" }]}
    <OA_POOL>    {[expr { $do_oa   ? "pool [tmsh::pwd]/${app}_oa_pool$bz"  :"" }]}
    <EWS_POOL>   {[expr { $do_ews  ? "pool [tmsh::pwd]/${app}_ews_pool$bz" :"" }]}
    <AD_POOL>    {[expr { $do_ad   ? "pool [tmsh::pwd]/${app}_ad_pool$bz"  :"" }]}
    <AS_POOL>    {[expr { $do_as   ? "pool [tmsh::pwd]/${app}_as_pool$bz"  :"" }]}
    <AS_IDLE>    {[expr { $do_as && $is_v11_6 ? "TCP::idletime 1800" : "" }]}
    <OWA_IDLE>   {$owa_login_timeout}
    <COMPRESS>   {[expr { $lan_or_wan == $WAN_OPTION ? "COMPRESS::disable"  :"" }]}
    <CACHE>      {[expr { ![iapp_is ::deployment_scenario__scenario \
                  $LTM_BEHIND_EDGE] ? "CACHE::disable" : "" }]}
    <TRUSTED>    {[expr { $lb_scenario && [info exists ::services__trusted] ? \
                  "[string map { addr {} \{ {} \} {} } $::services__trusted]":"" }]}
    <ETRUSTED>   {[expr { $edge_scenario && [info exists ::edge_deployment__trusted] ? \
       "[string map { addr {} \{ {} \} {} } $::edge_deployment__trusted]":"" }]}
    <OWA_URI>    {[expr { !$do_smartcard_auth ? "/owa/auth":"/owa/" }]}
    <ECP_URI>    {[expr { $do_smartcard_auth ? " || \$req_uri contains \"/ecp/\"":"" }]}
    <OWA_SSO>    {[expr { $do_smartcard_auth ? "ntlm_kerberos_sso" : \
                  [expr { $do_logon_options ? "form_basedv2_opt_sso" : "form_basedv2_sso" }]}]}
    <ACCEPT_ENCODING> {[expr { $lan_or_wan eq $LAN_OPTION \
        ? {if { [HTTP::header exists "Accept-Encoding"] } {
             HTTP::header remove "Accept-Encoding"
        }} : "" }]}
    <PRIVATE_COMPUTER> {if { \[ACCESS::session data get "session.custom.owa.trusted"\] == 0 }  {
                if { \[HTTP::cookie exists "PrivateComputer"\] }  {
                    HTTP::cookie remove "PrivateComputer"
                }
            }}
}]

# VIRTUAL SERVERS
# Be cautious with vs names changes. The names "combined_https" and "edge" have
# dependencies within this implementation of the NTLM auth system irule.
# array key $svc
array set vs_arr {
    combined { [iapp_substa http_vs_arr($do_client_ssl)] }
    owa      { [iapp_substa http_vs_arr($do_client_ssl)] }
    mapi     { [iapp_substa http_vs_arr($do_client_ssl)] }
    oa       { [iapp_substa http_vs_arr($do_client_ssl)] }
    ews      { [iapp_substa http_vs_arr($do_client_ssl)] }
    as       { [iapp_substa http_vs_arr($do_client_ssl)] }
    ad       { [iapp_substa http_vs_arr($do_client_ssl)] }
    pop3     { [iapp_conf create ltm virtual ${app}_${svc} \
               destination [iapp_destination \
               [set ::services__pop3_addr] $port_arr($svc,$do_client_ssl)] \
               mask [iapp_destination -mask [set ::services__pop3_addr]] \
               pool ${app}_${svc}_pool$bz \
               $snat \
               persist none \
               fallback-persistence none \
               [iapp_substa firewall_arr($afm_provisioned,$do_firewall,$new_firewall)] \
               [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
               profiles replace-all-with \{ \
                   [subst $ssl_profile_names] \
                   [iapp_substa tcp_arr($lan_or_wan)] \
                   [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \} \
               rules [iapp_substa irule_arr($svc)]] }
    imap     { [iapp_conf create ltm virtual ${app}_${svc} \
               destination [iapp_destination \
               [set ::services__imap4_addr] $port_arr($svc,$do_client_ssl)] \
               mask [iapp_destination -mask [set ::services__imap4_addr]] \
               pool ${app}_${svc}_pool$bz \
               $snat \
               persist none \
               fallback-persistence none \
               [iapp_substa firewall_arr($afm_provisioned,$do_firewall,$new_firewall)] \
               [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
               profiles replace-all-with \{ \
                   [subst $ssl_profile_names] \
                   [iapp_substa tcp_arr($lan_or_wan)] \
                   [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \} \
               rules [iapp_substa irule_arr($svc)]] }
    edge     { [iapp_conf create ltm virtual ${app}_edge \
               destination [iapp_destination \
               $edge_deployment__addr $port_arr(edge,1)] \
               mask [iapp_destination -mask $edge_deployment__addr] \
               pool ${app}_edge_pool$bz \
               $snat \
               persist none \
               fallback-persistence none \
               [iapp_substa firewall_arr($afm_provisioned,$do_firewall,$new_firewall)] \
               [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
               profiles replace-all-with \{ \
                   [subst $ssl_profile_names] \
                   [iapp_substa tcp_arr($lan_or_wan)] \
                   $http_profile_names \
                   [iapp_substa cache_comp_profile_arr($lan_or_wan,[iapp_substa do_cache_comp_arr($svc)])] \
                   $apm_profile_names \
                   [iapp_substa eca_profile_arr($svc,$do_client_ntlm_auth)] \
                   [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \
                   $analytics_profile_name \} \
               rules [iapp_substa irule_arr(edge)]] }
}

# array keys $do_client_ssl
array set http_vs_arr {
    0 { [iapp_conf create ltm virtual ${app}_${svc}_http \
        destination [iapp_destination \
        [set ::services__${svc}_addr] $port_arr($svc,0)] \
        mask [iapp_destination -mask [set ::services__${svc}_addr]] \
        pool [expr { $do_combined_vs \
               ? [expr { $do_oa && $do_client_ntlm_auth \
                   ? "${app}_oa_pool$bz" \
                   : "none" }] \
               : "${app}_${svc}_pool$bz" }] \
        $snat \
        persist none \
        fallback-persistence none \
        [iapp_substa firewall_arr($afm_provisioned,$do_firewall,$new_firewall)] \
        [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
        profiles replace-all-with \{ \
            [subst $ssl_profile_names] \
            [expr { $svc == "as" \
                ? "[iapp_substa as_tcp_arr($lan_or_wan)]" \
                : "[iapp_substa tcp_arr($lan_or_wan)]" }] \
            $http_profile_names \
            [iapp_substa cache_comp_profile_arr($lan_or_wan,[iapp_substa do_cache_comp_arr($svc)])] \
            $apm_profile_names \
            [iapp_substa eca_profile_arr($svc,$do_client_ntlm_auth)] \
            [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \
            $analytics_profile_name \} \
        rules [iapp_substa irule_arr($svc)]] }
    1 { [iapp_conf create ltm virtual ${app}_${svc}_https \
        destination [iapp_destination \
        [set ::services__${svc}_addr] $port_arr($svc,1)] \
        mask [iapp_destination -mask [set ::services__${svc}_addr]] \
        pool [expr { $do_combined_vs \
               ? [expr { $do_oa && $do_client_ntlm_auth \
                   ? "${app}_oa_pool$bz" \
                   : "none" }] \
               : "${app}_${svc}_pool$bz" }] \
        $snat \
        persist none \
        fallback-persistence none \
        [iapp_substa firewall_arr($afm_provisioned,$do_firewall,$new_firewall)] \
        [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
        profiles replace-all-with \{ \
            [subst $ssl_profile_names] \
            [expr { $svc == "as" \
                ? "[iapp_substa as_tcp_arr($lan_or_wan)]" \
                : "[iapp_substa tcp_arr($lan_or_wan)]" }] \
            $http_profile_names \
            [iapp_substa cache_comp_profile_arr($lan_or_wan,[iapp_substa do_cache_comp_arr($svc)])] \
            $apm_profile_names \
            [iapp_substa eca_profile_arr($svc,$do_client_ntlm_auth)] \
            [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \
            $analytics_profile_name \} \
        rules [iapp_substa irule_arr($svc)]] \
        [iapp_conf create ltm virtual ${app}_${svc}_http \
        destination [iapp_destination \
        [set ::services__${svc}_addr] $port_arr($svc,0)] \
        mask [iapp_destination -mask [set ::services__${svc}_addr]] \
        pool none \
        $snat \
        persist none \
        fallback-persistence none \
        [iapp_substa firewall_arr($afm_provisioned,$do_firewall,$new_firewall)] \
        [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
        profiles replace-all-with \{ \
            [iapp_substa ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \
            [iapp_substa http_profile_arr($do_client_ssl,$do_snat)] \} \
        rules \{ _sys_https_redirect \}] }
}

set combined_svc_done 0
foreach svc $service_list {
    if { $do_combined_vs } {
        set ::services__[string map {imap imap4} $svc]_addr $services__combined_addr
        if { [lsearch {owa mapi oa ews as ad} $svc] != -1 } {
            if { $combined_svc_done } {
                continue
            }
            set svc combined
            set combined_svc_done 1
        }
    }
    iapp_substa vs_arr($svc)
}
iapp_template stop
            }
            presentation {
define choice yesno default "Yes" display "medium" {
    "Yes" => "Yes"  ,
    "No" => "No"
}
define choice noyes default "No" display "medium" {
    "No" => "No"  ,
    "Yes" => "Yes"
}

define choice lb_method_lcm_default default "least-connections-member" display "xxlarge" {
    "Dynamic Ratio (member)" => "dynamic-ratio-member"  ,
    "Dynamic Ratio (node)" => "dynamic-ratio-node"  ,
    "Fastest (application)" => "fastest-app-response"  ,
    "Fastest (node)" => "fastest-node"  ,
    "Least Connections (member)" => "least-connections-member"  ,
    "Least Connections (node)" => "least-connections-node"  ,
    "Least Sessions" => "least-sessions"  ,
    "Observed (member)" => "observed-member"  ,
    "Observed (node)" => "observed-node"  ,
    "Predictive (member)" => "predictive-member"  ,
    "Predictive (node)" => "predictive-node"  ,
    "Round Robin" => "round-robin"  ,
    "Ratio (member)" => "ratio-member"  ,
    "Ratio (node)" => "ratio-node"  ,
    "Ratio (session)" => "ratio-session"  ,
    "Ratio Least Connections (member)" => "ratio-least-connections-member"  ,
    "Ratio Least Connections (node)" => "ratio-least-connections-node"  ,
    "Weighted Least Connections (member)" => "weighted-least-connections-member"  ,
    "Weighted Least Connections (node)" => "weighted-least-connections-node"
}

section intro {

    message hello "Use this template to configure availability, optimizations, encryption, and remote access for the client access server role in Exchange Server 2016. This template will configure the BIG-IP Local Traffic Manager (LTM) module for all HTTP-based Mailbox services, as well as IMAP4/IMAP4S and POP3/POP3S."
    message hello2 "You may decrypt secure HTTPS, POP3S, and IMAP4S on this BIG-IP system and optionally re-encrypt that traffic before sending it to the Mailbox Servers."
    message hello3 "When used with the BIG-IP Access Policy Manager (APM) module features, including Edge Gateway, this template supports proxy authentication and secure remote access for all HTTP-based client access protocols without requiring a VPN client. This template supports running APM on the same BIG-IP system as LTM, or using a BIG-IP APM to forward traffic to BIG-IP LTM on a different system."
    message hello4 "If you are deploying BIG-IP APM and LTM on separate BIG-IP systems, run this template on each system and select the appropriate deployment scenario."
    message check_for_updates "Ensure you are using the most recent template before continuing. Check for newer community versions online at DevCentral (https://devcentral.f5.com/wiki/iApp.CodeShare.ashx) and newer supported versions at the main F5 download site (https://downloads.f5.com/esd/), with instructions at the AskF5 Knowledge Base (http://support.f5.com/kb/en-us/solutions/public/13000/400/sol13422.html)."
    optional ( "HIDE" == "THIS" ) {
        choice avr_provisioned  tcl { expr { [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_provisioned avr] ? "yes":"no" }}
        choice apm_provisioned  tcl { expr { [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_provisioned apm] ? "yes":"no" }}
        choice afm_provisioned  tcl { expr { [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_provisioned afm] ? "yes":"no" }}
        choice is_v11_4         tcl { expr { [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_tmos_version >= 11.4.0] ? "yes":"no" }}
        choice is_v12_0         tcl { expr { [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_tmos_version >= 12.0.0] ? "yes":"no" }}
    }

    optional ( avr_provisioned != "yes" ) {
        message analytics_opportunity "Provisioning AVR will enable additional options in this template."
    }
    optional ( apm_provisioned != "yes" ) {
        message wa_opportunity "Provisioning APM will enable additional options in this template."
    }
    message prereqs_1 "If you plan on using this template to configure the BIG-IP system for processing encrypted traffic, you need to import an SSL certificate and key that correspond to all fully-qualified DNS names that you are using for the traffic. Importing SSL certificates and keys is not a part of this template; see Local Traffic >> SSL Certificate List."
    message prereqs_2 "To ensure a successful deployment, F5 strongly recommends following the instructions in the Deployment Guide at http://www.f5.com/pdf/deployment-guides/microsoft-exchange-2016-dg.pdf,  which includes important information about post-deployment configuration steps and updates."
    message prereqs_3 "In order to run this template successfully, you must have the Local Traffic Manager (LTM) module provisioned. See System >> Resource Provisioning for a list of provisioned modules.  If you are deploying APM only, you can ignore the LTM provisioning warning."
    choice help display "xxlarge" default "hide" {
        "Yes, show all inline help" => "max"  ,
        "No, do not show inline help" => "hide"
    }
}

section deployment_scenario {
    choice scenario display "xxlarge" default "LTM will load balance and optimize CAS traffic" {
        "Local BIG-IP system load balances and optimizes traffic" => "LTM will load balance and optimize CAS traffic"  ,
        "Local LTM receives HTTP-based traffic forwarded by a remote APM" => "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM"  ,
        "Local APM secures and forwards traffic to a remote LTM" => "BIG-IP Edge Gateway or APM will provide secure remote access to CAS"
    }
    optional ( scenario == "LTM will load balance and optimize CAS traffic") {
        optional ( intro.help != "hide" ) {
            message scenario_1_help "This selection configures the BIG-IP LTM with one or more virtual servers for Exchange Mailbox traffic. You can configure the iApp for the HTTP-based client access services, including Outlook Web App, Outlook Anywhere, Autodiscover and ActiveSync, as well as non-HTTP services such as POP3 and IMAP4."
        }
        optional ( intro.help == "max" ) {
            message scenario_1_max_help    "Do not select this option if you intend to deploy a separate BIG-IP APM that will provide secure remote access to HTTP client access services."
        }
    }
    optional ( scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" && intro.help != "hide" ) {
        message scenario_2_help "This selection configures BIG-IP LTM with a single virtual server that receives Exchange Mailbox HTTP-based traffic that has been forwarded by a BIG-IP APM. The virtual server can also accommodate direct traffic, for example internal clients that do not use the BIG-IP APM, and non-HTTP traffic that is not handled by BIG-IP APM such as POP3 and IMAP4. Please read the Deployment Guide for specific instructions on mixed internal and external client traffic."
    }
    optional ( scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" ) {
        optional ( intro.apm_provisioned != "yes" ) {
            message apm_warning "The Access Policy Manager (APM) module is not provisioned. This scenario will not work until you provision APM."
        }
        optional ( intro.help != "hide" ) {
            message scenario_3_help "This selection configures the BIG-IP system as a BIG-IP APM that will use a single HTTPS (port 443) virtual server to provide proxy authentication and secure remote access to Exchange HTTP-based Mailbox services without requiring the use of an F5 Edge Client. The traffic will be forwarded to another BIG-IP running LTM which will provide advanced load balancing, persistence, monitoring and optimizations for those services."
        }
        optional ( intro.help == "max" ) {
            message scenario_3_max_help "To use the BIG-IP system in this scenario, you need to import an SSL certificate and key that correspond to all fully-qualified DNS names that you are using for the HTTP-based client access traffic. See Local Traffic >> SSL Certificate List. When deploying BIG-IP APM with Outlook Web App and Forms-based Authentication, you must change the credential format required for OWA from the default domain and user name format to just the user name."
        }
    }
}

optional ( intro.avr_provisioned == "yes" ) {
    section analytics {
        choice add_analytics display "xxlarge" default "No" {
            "No, do not enable Analytics" => "No"  ,
            "Yes, enable Analytics using AVR" => "Yes"
        }
        optional ( intro.help == "max" ) {
            message about_analytics "The Application Visibility Reporting (AVR) module allows you to view statistics specific to your Microsoft Exchange implementation. AVR is only for application-specific reporting, you can still view object-level statistics from the BIG-IP system without using AVR."
        }
        optional ( add_analytics == "Yes" ) {
            message important_analytics_profiles "Enabling Analytics may affect overall system performance. If you choose to enable Analytics, we recommend gathering statistics for a set time period, such as one week, and then re-entering this template and disabling Analytics while you process the data."
            optional ( intro.help == "max" ) {
                message about_analytics_profiles "For full functionality and flexibility, we recommend you create a custom Analytics profile for this application service. Creating a custom profile is not a part of this template; see Local Traffic >> Profiles : Analytics. Once you have created an Analytics profile, you can select it from the list below. To select any new profiles you create, you need to restart or reconfigure this template."
            }
            choice create_new_analytics default "Select a Custom Profile" display "xxlarge" {
                "Select a custom Analytics profile" => "Select a Custom Profile"  ,
                "Use the default Analytics profile" => "Use Default Profile"
            }
            optional ( intro.help == "max" ) {
                message create_new_analytics_help "Choose whether you want to use the default Analytics profile or if you have already created a custom Analytics profile for this implementation.  We recommend select a custom Analytics profile that you created for this application service."
            }
            optional ( create_new_analytics == "Select a Custom Profile" ) {
                choice analytics_profile display "xxlarge" tcl {
                    set ::choices [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -nocomplain ltm profile analytics]
                    return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                }
                optional ( intro.help == "max" ) {
                    message analytics_profile_help "Choose the custom Analytics profile that you created for this application service."
                }
            }
        }
    }
}

optional ( intro.apm_provisioned == "yes" &&
        (deployment_scenario.scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" ||
            deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic") ) {
    section apm {
        message provision_warning "You must have fully licensed the BIG-IP APM module to use the APM features in this template."
        optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic") {
            choice deploying_apm display "xxlarge" default "No" {
               "Yes, provide secure authentication using BIG-IP APM" => "Yes"  ,
               "No, do not provide secure authentication using BIG-IP APM" => "No" }
        }
        optional ( intro.help == "max" ) {
            message about_apm_help "If you have fully licensed and provisioned the BIG-IP Access Policy Manager, you can use it to provide proxy authentication and secure remote access for the HTTP-based Mailbox services. To deploy APM for Exchange, you must have information about your Active Directory implementation."
        }
        optional ( deployment_scenario.scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" ||
            (deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" && deploying_apm == "Yes" )) {
            choice apm_profile display "xxlarge" default "/#create_new#" tcl {
                set ::choices "Create a new Access Profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -nocomplain apm profile access]"
                return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
            }
            optional ( intro.help == "max" ) {
                message apm_profile_help "Choose whether you want the template to create a new Access Profile for your BIG-IP APM implementation or use an existing one.  Unless you have created a custom Access Profile specifically for this implementation, we recommend allowing the iApp to create a new profile. "
            }

            optional ( apm_profile == "/#create_new#" ) {

                choice aaa_profile display "xxlarge" default "/#create_new#" tcl {
                    set ::choices "Create a new AAA Server\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -nocomplain -filter use-pool !~ "disabled" apm aaa active-directory]"
                    return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                }
                optional ( intro.help == "max" ) {
                    message aaa_profile_help "Choose whether you want the template to create a new AAA Server object for your BIG-IP APM implementation or use an existing one. The AAA Server contains information about your Active Directory deployment. Unless you have created a custom AAA server specifically for this implementation, we recommend allowing the iApp to create a new one. "
                }
                string login_domain display "xxlarge" required validator "Fqdn"
                optional ( intro.help == "max" ) {
                    message login_domain_help "Specify the fully qualified domain name for the Active Directory deployment used by your Exchange users.  This is the FQDN of the entire Active Directory domain, and not of an individual Active Directory server."
                }

                optional ( aaa_profile == "/#create_new#" ) {
                    table active_dir_servers {
                        string fqdn display "large" required validator "Fqdn"
                        string addr display "large" required validator "IpAddress"
                    }
                    optional ( intro.help == "max" ) {
                        message apm_active_dir_help "Specify the fully qualified domain name AND IP address of each Active Directory server you want to use for this deployment. Click Add to include additional servers.  The BIG-IP system must have a route to the Active Directory servers you specify."
                    }
                    choice allow_anonymous_binding display "xxlarge" default "Anonymous binding is allowed" {
                        "Anonymous binding is allowed"  ,
                        "Credentials are required for binding"
                    }
                    optional ( intro.help == "max" ) {
                        message apm_binding_help "Choose whether your Active Directory implementation allows anonymous binding or not. If it does not, you must provide a user name and password with administrative permissions."
                    }
                    optional ( allow_anonymous_binding == "Credentials are required for binding" ) {
                        string ad_username display "xxlarge" required
                        optional ( intro.help == "max" ) {
                            message apm_ad_username_help "You must type the user name of an Active Directory account that has administrative permissions."
                        }
                        password ad_password display "xxlarge" required
                    }

                    choice ad_monitor display "xxlarge" default "ad_icmp" {
                        "Create a new LDAP monitor for the Active Directory pool " => "ad_create"  ,
                        "Select an existing monitor for the Active Directory pool" => "ad_select"  ,
                        "Use a simple ICMP monitor for the Active Directory pool"  => "ad_icmp"
                    }
                    optional ( intro.help == "max" ) {
                        message ad_monitor_help "Specify whether you want the template to create a new LDAP monitor for your Active Directory servers, use a simple ICMP/ping monitor, or choose an existing monitor."
                    }

                    optional ( ad_monitor == "ad_select" ) {
                        choice ad_monitor_choice display "xxlarge" tcl {
                            set ::choices "[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -filter NAME != ldap ltm monitor ldap]\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -filter NAME != external ltm monitor external]"
                            return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                        }
                    }

                    optional ( ad_monitor == "ad_create" ) {
                        string ad_monitor_user required display "xxlarge"
                        message ad_monitor_user_critical "The Active Directory service account you specify here must be set to never expire. A deleted or locked account will cause the BIG-IP system to mark your Active Directory pool members as unavailable, which takes them offline. Do not include the prefix 'cn=' in this field."
                        optional ( intro.help == "max" ) {
                            message ad_monitor_user_info "ADSI editor, an administration tool for Active Directory LDAP administration, is useful for determining the correct Common Name (cn).  You can also use the Get-ADUser command in PowerShell to display the properties of the user account."
                        }

                        password ad_monitor_password required display "xxlarge"
                        optional ( intro.help == "max" ) {
                            message ad_monitor_password_info "Type the password associated with the account you specified in the previous question."
                        }
                        string ad_monitor_tree required display "xxlarge"
                        optional ( intro.help == "max" ) {
                            message ad_monitor_tree_info "Specify the LDAP tree for the user name you provided. ADSI editor, an administration tool for Active Directory LDAP administration, is useful for determining the correct LDAP tree value. For example, if the user name is 'user1' which is in the organizational unit 'Exchange Users' and is in the domain 'exchange.example.com', the LDAP tree would be: ou=Exchange Users, dc=Exchange, dc=example, dc=com."
                        }

                        choice ad_monitor_secure display "xxlarge" {
                            "No, a secure protocol is not required" => "none"  ,
                            "Yes, SSL communication is required"     => "ssl"  ,
                            "Yes, TLS communication is required"    => "tls"
                        }
                        optional ( intro.help == "max" ) {
                            message ad_monitor_secure_info "Select whether your Active Directory implementation requires a secure protocol (SSL or TLS) for communication, or if it does not use a secure protocol."
                        }

                        string ad_monitor_interval default "10" validator "NonNegativeNumber"
                        optional ( intro.help == "max" ) {
                            message ad_monitor_interval_info "Specify the number of seconds to use between each health monitor attempt. Members of this pool are marked down after four incorrect responses, and marked available after one correct response. "
                        }
                    }
                }
                string logon_text display "xxlarge" default "Secure Logon <br> for F5 Networks"
                message logon_text_warning_help "If the text you want to appear includes an ampersand, a single quote mark, or a double quote mark,  you must use proper encoding: '&amp;' for ampersand, '&quote;' for double quotes, and '&apos;' for single quotes."
                optional ( intro.help == "max" ) {
                    message logon_text_help "Type the text you want users to see above the user name and password prompts when logging on to the BIG-IP APM. By default, this includes the HTML <br> tag to insert a line break between 'Secure Logon' and 'for F5 Networks'."
                }
                optional ( intro.is_v12_0 == "yes" ) {
                    choice logging display "xxlarge" default "/Common/default-log-setting" tcl {
                        set log ""
                        catch {
                            set log [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items apm log-setting]
                        } err
                        set ::choices "Do not specify a logging profile for the APM profile\t/#do_not_use#\n$log"
                        return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( intro.help != "hide" ) {
                        message logging_inline_help "Select APM logging profile to use for the Access Policy created for this iApp deployment."
                    }
                }
            }
        }
    }
}

optional ( intro.afm_provisioned == "yes" && intro.is_v11_4 == "yes" ) {
    section afm {
        choice policy default "/#do_not_use#" display "xxlarge" tcl {
            set ::choices "Yes, use network firewall and IP Intelligence\t/#default#\nNo, do not use network firewall and IP Intelligence\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -nocomplain security firewall policy]"
            return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
        }
        optional ( intro.help == "max" ) {
            message policy_max "BIG-IP Advanced Firewall Manager (AFM) is a high-performance, stateful, full-proxy network firewall designed to guard data centers against incoming threats that enter the network on the most widely deployed protocols.  BIG-IP AFM must be fully licensed and provisioned to use this functionality. If you have already created an AFM Network Firewall Policy on this BIG-IP system for this implementation, you can select it from the list."
        }
        optional ( policy == "/#default#" ) {

            choice restrict_by_addr default "/#do_not_use#" display "xxlarge" tcl {
                set ::choices "No, do not forbid client addresses (allow all)\t/#do_not_use#\nYes, forbid specific client addresses\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -nocomplain security firewall address-list]"
                return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
            }
            optional ( intro.help == "max" ) {
                message restrict_max "You can use the BIG-IP AFM to restrict access to your application by either IP address or network address. If enabled, the system will only allow access to the virtual server from the address(es) you specify."
            }
            optional ( restrict_by_addr == "/#create_new#" ) {
                string allowed_addr display "xxlarge" required
                optional ( intro.help == "max" ) {
                    message allowed_addr_max "Specify the IP or network address that should have access to the application.  You can use a single IP address, a list of IP addresses separated by spaces, a range of IP addresses separated by a dash (for example 192.0.2.10-192.0.2.100), a single network address, such as 192.0.2.200/24, or any combination of these."
                }
            }
        }
        optional ( policy != "/#do_not_use#" ) {
            choice restrict_by_reputation default "accept" display "xxlarge" {
                "Accept all connections and log nothing" => "accept"  ,
                "Reject connections from IP addresses with poor reputations" => "reject"  ,
                "Accept all connections but log those from suspicious networks" => "warn"
            }
            optional ( intro.help == "max" ) {
                message restrict_by_reputation_max "The BIG-IP AFM uses an IP intelligence database to categorize IP addresses coming into the system. Select the way you want the system to handle IP addresses with a low reputation score."
            }
            optional ( intro.help == "max" && restrict_by_reputation != "accept" ) {
                message restrict_by_reputation_log "By default, IP Intelligence events are logged to Security > Event Logs > Network > IP Intelligence.  For the best performance, F5 recommends creating a remote logging profile to log IP Intelligence events. "
            }
            message restrict_by_reputation_warn "You must have an active IP Intelligence license for IP reputation-based access control to function correctly. "

            choice staging_policy default "/#do_not_use#" display "xxlarge" tcl {
                set ::choices "Do not apply a staging policy\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -nocomplain security firewall policy]"
                return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
            }
            message staging_policy1_max "A policy in Staging mode does not block any traffic, and only logs what would be blocked if the policy were placed into production."

            optional ( intro.help == "max" ) {
                message staging_policy_max "A staged policy allows you to evaluate the effect a policy has on traffic by analyzing the system logs, without actually modifying traffic based on the firewall rules.  You must already have a policy on the system in order to select it from the list.  For specific information on creating a staging policy, see the AFM documentation."
            }
            choice security_logging default "/#do_not_use#" display "xxlarge" tcl {

                # Menu should display all log profiles with "network none".
                # tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items will not filter security log profiles,
                # so the filter has been written inline here.
                set ::choices "Do not use a logging profile\t/#do_not_use#\n"
                if { [catch {
                    set profile_list [tmsh::list security log profile all-properties recursive]
                } err] } {
                    set profile_list " "
                }
                array set profiles \
                    [string map {"security log profile" ""} $profile_list]
                foreach name [array names profiles] {
                    array set subprofile $profiles($name)
                    if { [info exists subprofile(network)] && \
                        $subprofile(network) != "none" } {
                        append ::choices "$name\n"
                    }
                }
                return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
            }
            optional ( intro.help == "max" ) {
                message security_logging_max "The logging profile enables you to log detailed information about BIG-IP system Network Firewall events and store those logs on the BIG-IP system or a remote logging server (syslog or Splunk). If you want to use a logging profile, we recommend creating one outside this template. Only logging profiles with Network Firewall enabled appear in the list. "
                message security_logging1_max "If you are also using BIG-IP ASM, and the logging profile you created has both Application Security and Network Firewall enabled in the same profile, you must also select that profile here. See the BIG-IP AFM documentation for specific information on Logging profiles."
            }
        }
    }
}

optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ||
        deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ) {
    section deployment {
        optional (deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ||
            (deployment_scenario.scenario ==
            "LTM will load balance and optimize CAS traffic" &&
            (intro.apm_provisioned != "yes" || apm.deploying_apm == "No"))) {

            choice incoming_encrypted display "xxlarge" default "Encrypted" {
                "Encrypted"  , "Unencrypted"
            }
            optional ( intro.help == "max" && deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ) {
                message incoming_encrypted_lb_help "In order to properly handle Mailbox server traffic, the BIG-IP system needs to know whether any of the Mailbox server traffic will be encrypted when it arrives on this system. In nearly all cases for this deployment scenario, traffic arriving at this BIG-IP system will be encrypted."
            }
            optional ( intro.help == "max" && deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ) {
                message incoming_encrypted_rec_help "In order to properly handle Mailbox server traffic, the BIG-IP system needs to know whether any of the Mailbox server traffic will be encrypted when it arrives on this system. While typically Mailbox Server traffic would arrive encrypted, because this BIG-IP system is receiving traffic forwarded by a separate BIG-IP APM, it may arrive unencrypted."
            }
        }

        optional ((deployment_scenario.scenario ==
            "LTM will load balance and optimize CAS traffic" &&
            (intro.apm_provisioned == "yes" && apm.deploying_apm == "Yes")) ||
            incoming_encrypted == "Encrypted" ) {

                choice reencrypt_2013 display "xxlarge"
                    default "Do not re-encrypt (SSL Offload)" {
                    "Re-encrypt (SSL Bridging)"  ,
                    "Do not re-encrypt (SSL Offload)"
                }
            optional ( intro.help == "max" ) {
                message reencrypt_help "After decrypting the Mailbox server traffic, the BIG-IP system can re-encrypt the traffic before sending it to the Mailbox servers (SSL Bridging), or leave the traffic unencrypted (SSL Offload). If you chose re-encrypt, the Mailbox servers must also perform decryption duties."
            }

            choice client_ssl_profile display "xxlarge" default "/#create_new#" tcl {
                set ::choices "Create a new Client SSL profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items ltm profile client-ssl]"
                return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
            }
            optional ( intro.help == "max" ) {
                message client_ssl_profile_help "Choose whether you want the template to create a new Client SSL profile for your implementation or use an existing one. Unless you have created a custom Client SSL profile which includes the appropriate SSL certificate and key, specifically for this implementation, we recommend allowing the iApp to create a new profile."
            }

            optional ( client_ssl_profile == "/#create_new#" ) {
                choice cert default "/Common/default.crt" display "xxlarge" tcl {
                    set ::choices [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]
                    return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                }
                optional ( intro.help == "max" ) {
                    message cert_help "Select the certificate the system uses for client-side SSL processing. Importing SSL certificates and keys is not a part of this template; see Local Traffic >> SSL Certificate List. To select any new certificates and keys you import, you need to restart or reconfigure this template to have them appear in the list."
                }
                message incoming_encrypted_prereq1 "To configure this BIG-IP system to process encrypted Exchange traffic, you need to import an SSL certificate and key that correspond to all fully-qualified DNS names that you are using for that traffic. Any certificate that you obtain with multiple names must be in SAN format, not SNI format."

                    message incoming_encrypted_prereq3 "Consult the most recent Microsoft documentation for information about SSL offloading and Microsoft Exchange Server."
                choice key default "/Common/default.key" display "xxlarge" tcl {
                    set ::choices [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -norecursive -filter security-type ne "password" sys file ssl-key]
                    return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                }
                optional ( intro.help == "max" ) {
                    message key_help "Select the name of the associated SSL key."
                }
                optional ( cert == "/Common/default.crt"
                        || key == "/Common/default.key" ) {
                    message ssl_warn_1 "The BIG-IP system's default certificate and key are not secure. For proper security, acquire a certificate and key from a trusted certificate authority, and then import it onto the BIG-IP system."
                }
                message ssl_warn_2 "If your key is password-protected, you must manually create a Client SSL profile outside the iApp, and then select it from the list above."
                choice chain_cert default "/#do_not_use#" display "xxlarge" tcl {
                    set ::choices "Do not use an intermediate certificate\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]"
                    return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                }
                optional ( intro.help == "max" ) {
                    message chain_cert_help "Intermediate certificates, also called intermediate certificate chains or chain certificates, are used to help systems which depend on SSL certificates for peer identification. These certificates are intended to create a chain of trust between the CA that signed the certificate and the CA that is already trusted by the recipient of the certificate. This allows the recipient to verify the validity of the certificates presented, even when the signing CA is unknown."
                }
            }
        }
        optional ((deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" &&
            incoming_encrypted == "Unencrypted") ||
            ((deployment_scenario.scenario ==
            "LTM will load balance and optimize CAS traffic" &&
            (intro.apm_provisioned != "yes" || apm.deploying_apm == "No")) &&
            incoming_encrypted == "Unencrypted") ) {

            choice encrypt display "xxlarge"
                default "Do not encrypt (SSL Offload)" {
                "Encrypt (SSL Bridging)"  , "Do not encrypt (SSL Offload)"
            }
        }
        optional ((((deployment_scenario.scenario ==
            "LTM will load balance and optimize CAS traffic" &&
            intro.apm_provisioned == "yes" && apm.deploying_apm == "Yes") ||
            incoming_encrypted == "Encrypted" ) &&
            (( reencrypt_2013 == "Re-encrypt (SSL Bridging)"))) ||

            ((deployment_scenario.scenario ==
            "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ||
            (deployment_scenario.scenario ==
            "LTM will load balance and optimize CAS traffic" &&
            (intro.apm_provisioned != "yes" || apm.deploying_apm == "No")) &&
            incoming_encrypted == "Unencrypted") &&
            encrypt == "Encrypt (SSL Bridging)")) {

            choice server_ssl_profile display "xxlarge" default "/#create_new#" tcl {
                set ::choices "Create a new Server SSL profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items ltm profile server-ssl]"
                return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
            }
            optional ( intro.help == "max" ) {
                message server_ssl_profile_help "Choose whether you want the template to create a new Server SSL profile for your implementation or use an existing one. Unless you have created a custom Server SSL profile specifically for this implementation, we recommend allowing the iApp to create a new profile."
            }
        }

        optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ) {
            choice lan_or_wan display "xxlarge" default "WAN" {
            "Optimize TCP connections for WAN clients" => "WAN"  ,
            "Optimize TCP connections for LAN clients" => "LAN"
        }
        }
        optional ( intro.help == "max" ) {
            message wan_lan_help "In order for the template to configure the proper TCP optimization settings, you must specify whether you want the system to optimize connections for WAN or LAN clients.  This answer should be based on whether the majority of your Exchange clients will be connecting to the BIG-IP system over a WAN or a LAN."
        }

        choice location display "xxlarge" default "Same subnet for BIG-IP virtual servers and Client Access Servers" {
            "Same subnet for BIG-IP virtual servers and Mailbox Servers" => "Same subnet for BIG-IP virtual servers and Client Access Servers"  ,
            "Different subnet for BIG-IP virtual servers and Mailbox Servers" => "Different subnet for BIG-IP virtual servers and Client Access Servers"
        }
        optional ( intro.help == "max" ) {
            message location_help "It is important to ensure that responses to client requests made using the BIG-IP virtual server address are returned through the BIG-IP system. If the client receives a response directly from the Mailbox server, the connection is dropped. The way the BIG-IP system handles this depends on your network topology."
            message location_help1 "For environments in which the virtual server IP address is on a subnet different from the Mailbox Servers, select different subnets. You must answer an additional question about how routing is configured on your Mailbox Servers.  For environments in which the virtual server IP address is on the same subnet as the Mailbox servers, select same subnet. This enables Secure Network Address Translation, which results in the BIG-IP system replacing the client IP address of an incoming connection with its self IP address (using floating addresses when available), ensuring the server response returns through the BIG-IP system."
        }
        optional ( location == "Different subnet for BIG-IP virtual servers and Client Access Servers" ) {
            choice snat display "xxlarge" default "Client Access Servers do NOT use BIG-IP as their default gateway" {
                "Mailbox Servers use the BIG-IP as their default gateway" => "Client Access Servers use the BIG-IP as their default gateway"  ,
                "Mailbox Servers do NOT use BIG-IP as their default gateway" => "Client Access Servers do NOT use BIG-IP as their default gateway"
            }
            optional ( intro.help == "max" ) {
                message snat_help "When the virtual servers are on a subnet different from the Mailbox Servers, the system needs to know if the servers use the BIG-IP system as their default gateway. If the Mailbox Servers use the BIG-IP system as their default gateway, no additional information is needed to ensure proper response handling. If the servers do not use the BIG-IP system as their default gateway, SNAT is configured to ensure proper response handling, and you must specify the number of users you expect in the next question."
            }
        }

        optional ( location == "Same subnet for BIG-IP virtual servers and Client Access Servers" ||
                (location == "Different subnet for BIG-IP virtual servers and Client Access Servers" &&
                    snat == "Client Access Servers do NOT use BIG-IP as their default gateway") ) {
            choice automap_or_pool display "xxlarge" default "Less than 6000" {
                "Fewer than 6000" => "Less than 6000"  , "More than 6000"
            }
            optional ( intro.help == "max" && automap_or_pool == "Less than 6000" ) {
                message snatpool_help "The BIG-IP system can handle approximately 6000 concurrent users (64,000 concurrent connections) for each Mailbox Server using the SNAT Auto Map setting. If you expect more than 6000 simultaneous connections to each server, the system creates a SNAT pool, and additional IP addresses are needed."
            }

            optional ( automap_or_pool == "More than 6000" ) {
                optional ( intro.help == "max" ) {
                    message snatpool_message "Because you will have more than 6000 concurrent users accessing each server, you will need to define a set of IP addresses (a SNAT pool) that will be used for address translation, rather than having the BIG-IP use its own self IP address for translation (SNAT Auto Map). You need at least one IP address for each 6000 users, or fraction thereof. The addresses must be unique and available on a subnet to which the BIG-IP is directly connected and to which your servers have a route; this is usually the same subnet where you have located your servers."
                }
                choice snatpool display "xxlarge" default "/#create_new#" tcl {
                    set ::choices "Create a new SNAT pool\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items ltm snatpool]"
                    return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                }
                optional ( intro.help == "max" ) {
                    message create_snatpool_help "Choose whether you want the iApp template to create a new SNAT Pool for this implementation. If you have already created a custom SNAT Pool, you can select it from the list."
                }
                optional ( snatpool == "/#create_new#" ) {
                    table snatpool_members {
                        string addr required validator "IpAddress" display "large"
                    }
                    optional ( intro.help == "max" ) {
                        message snatpool_members_help "Type the IP addresses you want to use for the SNAT Pool.  These addresses should be available IP addresses, not the self IP address(es) of the BIG-IP system."
                    }
                }
            }
        }

        optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ) {
            choice combined_or_seperate_ips display "xxlarge" default "Single IP address" {
                "Use a single IP address for all connections" => "Single IP address"  ,
                "Use different IP addresses for the different services" => "Different IP addresses for different services"
            }
            optional ( intro.help == "max" ) {
                message combined_or_seperate_ips_help "This question determines the number of virtual servers the BIG-IP system creates for your Mailbox Server deployment. By choosing a single IP address, you can combine multiple functions (such as using a single FQDN and associated SSL certificate for all HTTP-based client access services) on the same virtual server. By choosing separate virtual servers for each client access service component, you can manage each service independently from the others. For detailed information, see the Deployment Guide."
            }
        }

        choice service_distribution display "xxlarge" default "All services will be handled by the same set of Client Access Servers" {
            "All services will be handled by the same set of Mailbox Servers" => "All services will be handled by the same set of Client Access Servers"  ,
            "Each service will be handled by a unique set of Mailbox Servers" => "Each service will be handled by a unique set of Client Access Servers"
        }
        optional ( intro.help == "max" ) {
            message service_distribution_help "The system needs to know if you are using one or multiple sets of Mailbox servers. This iApp creates separate load balancing pools and monitors for each service regardless of this setting, but if you use the same set of servers for all services, you are only asked for the server IP addresses once."
        }
    }

    section services {
        choice advanced_pool_settings display "xxlarge" default "Use default pool settings" {
            "Use settings recommended by F5"  ,
            "Customize pool settings"
        }
        optional ( intro.help == "max" ) {
            message advanced_pool_settings_help "If necessary, you can configure advanced pool settings (such as specifying the load balancing algorithm or configuring priority groups). If you do not have a need to modify these settings, use the recommended settings, which are a result of extensive testing with Microsoft Exchange Server. "
        }
        optional ( advanced_pool_settings == "Customize pool settings" ) {
            lb_method_lcm_default lb_method_choice
            optional ( intro.help == "max" ) {
                message lb_method_choice_help "Choose the load balancing method appropriate for your configuration. We recommend the default, Least Connections (member). For a description of each method, see the online help on the Pool creation page, or the BIG-IP system documentation."
            }

            choice use_pga display "xxlarge" default "no" {
                 "Do not use Priority Group Activation" => "no"  ,
                 "Use Priority Group Activation" => "yes"
            }
            optional ( intro.help == "max" ) {
                message use_pga_help "Priority Group Activation allows you to segment your servers into priority groups. With Priority Group Activation, the BIG-IP system load balances traffic according to the priority number you assign to the pool members. A higher number indicates higher priority. Traffic is only sent to the servers with the highest priority, unless the number of available servers in that priority group falls below the value you specify as the minimum. The BIG-IP system then sends traffic to the group of servers with the next highest priority, and so on. You must specify a priorty when adding the servers. See the BIG-IP documentation for more details. "
            }
            optional ( use_pga == "yes" ) {
                string min_active_members required validator "NonNegativeNumber"
            }
            optional ( intro.help == "max" && use_pga == "yes" ) {
                message min_active_members_help "Specify the minimum number of servers which must be available before the system sends traffic to servers with a lower priority."
            }

            choice tcp_request_queuing_enable_question display "xxlarge" default "Do not queue TCP requests" {
                "Do not queue TCP requests"  ,
                "Queue TCP requests"
            }
            optional ( intro.help == "max" ) {
                message tcp_request_queuing_enable_question_help "TCP request queuing provides the ability to queue connection requests that exceed the capacity of connections for a pool, pool member, or node, as determined by the connection limit. If you enable TCP request queuing, you must specify a queue length and timeout for queued requests based on server capability, load, and need for shared resources."
            }
            optional ( tcp_request_queuing_enable_question == "Queue TCP requests" ) {
                message note "TCP request queuing is an advanced feature and should be used only if you understand how it will affect your deployment, including application behavior and BIG-IP performance. You must add a Connection Limit to your pool members for TCP request queuing."
                string tcp_request_queue_length required validator "NonNegativeNumber" display "medium"
                string tcp_request_queue_timeout required validator "NonNegativeNumber" display "medium"
            }
        }

        optional ( deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ||
                (deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" &&
                    deployment.combined_or_seperate_ips == "Single IP address") ) {
            string combined_addr display "xxlarge" required validator "IpAddress"
            optional ( intro.help == "max" ) {
                message combined_addr_help "Specify a valid IP address to use for the single BIG-IP virtual server. This virtual server address is used as the address for all Mailbox services."
            }

            optional ( advanced_pool_settings == "Customize pool settings" ) {
                message combined_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

                multichoice combined_irules display "xxlarge" tcl {
                    set ::choices [join [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items / ltm rule] "\n"]
                    return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                }
                 optional ( intro.help == "max" ) {
                    message combined_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                 }
            }
        }
        yesno deploying_owa
        optional ( intro.help == "max" ) {
            message deploying_owa_help "Select if you are deploying the BIG-IP system for Outlook Web App, including the Exchange Control Panel (ECP) at this time. You can always reconfigure this template at another time to add or remove Outlook Web App from the configuration."
        }
        optional ( deploying_owa == "Yes" ) {
            optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" &&
                    intro.apm_provisioned == "yes" &&
                    apm.deploying_apm == "Yes" &&
                    apm.apm_profile == "/#create_new#" ) {
                choice owa_smartcard_auth display "xxlarge" default "No" {
                    "Outlook Web App clients use Smart Card authentication" => "Yes"  ,
                    "Outlook Web App clients use Forms-based authentication" => "No"
                }
                optional ( intro.help == "max" ) {
                        message owa_smartcard_auth_help "The BIG-IP APM v11.3 and later supports Outlook Web App clients using Smart Card authentication, as well as Forms-based Authentication.  Choose which authentication method your Outlook Web App clients are using."
                }

                optional ( owa_smartcard_auth == "Yes" ) {
                    choice ssl_chain_cert default "/Common/default.crt" display "xxlarge" tcl {
                        set ::choices [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]
                        return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( intro.help == "max" ) {
                        message ssl_chain_cert_help "Select the certificate you imported onto the BIG-IP system from a CA that is trusted by this system for client-side processing of smart card authentication.  Importing certificates is not a part of this template, see System > File Management > SSL Certificate list."
                    }
                }

                optional ( owa_smartcard_auth == "No" ) {
                    choice owa_ntlm_sso default "No" display "xxlarge" {
                        "Outlook Web App is configured for Windows authentication" => "Yes"  ,
                        "Outlook Web App is configured for Forms-based authentication" => "No"
                    }
                    optional ( intro.help == "max" ) {
                        message owa_ntlm_sso_help "Select whether you have configured Outlook Web App to use Windows authentication or Forms-based authentication. This selection is only for OWA, and not for Outlook clients."
                    }
                    optional ( owa_ntlm_sso == "No" ) {
                        choice owa_logon_options display "xxlarge" default "No" {
                            "No, do not display the OWA logon options" => "No"  ,
                            "Yes, display the OWA logon options" => "Yes"
                        }
                        optional ( intro.help == "max" ) {
                            message owa_logon_options_2013_help "In Exchange 2013, you must enable the logon page options by running specific PowerShell commands in Exchange Management Shell prior to logging into OWA.  Consult the Microsoft documentation for more information."
                            message owa_logon_options_2013_help2 "For the blind and low vision experience to function correctly when accessing OWA with Internet Explorer 11, the OWA site must be added to the Compatibility View websites list. Consult Microsoft documentation for specific information."
                        }
                    }
                }

                optional ( owa_smartcard_auth == "Yes" || owa_ntlm_sso == "Yes" ) {
                    string owa_login_timeout default "480"
                    optional ( intro.help == "max" ) {
                        message owa_login_timeout_help "Type the number of minutes you want to pass before idle Outlook Web App sessions timeout."
                    }
                }

            }
            optional ( deployment_scenario.scenario ==
                       "LTM will load balance and optimize CAS traffic" ) {
                optional ( intro.apm_provisioned == "yes" &&
                           apm.deploying_apm == "Yes" &&
                           apm.apm_profile == "/#create_new#" ) {
                    choice restrict_eac_apm display "xxlarge" default "No" {
                    "Yes, restrict EAC access by group membership" => "Yes"  ,
                    "No, do not restrict EAC access by group membership" => "No" }
                    optional ( intro.help == "max" ) {
                        message restrict_eac_apm_help "Because you are deploying the BIG-IP APM, you can restrict Exchange Administration Center (EAC) access to members of Exchange 2013's Organizational Management group. The BIG-IP APM module queries Active Directory group membership and the BIG-IP APM policy allows or denies access based on membership."
                    }
                }
            }
            optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" &&
                    deployment.combined_or_seperate_ips == "Different IP addresses for different services" ) {
                string owa_addr required display "xxlarge" validator "IpAddress"
                optional ( intro.help == "max" ) {
                    message owa_addr_help "Because you chose different IP addresses for the different client access services, specify the IP address you want the system to use for the Outlook Web App virtual server. This is the IP address clients will use to access OWA (or a FQDN will resolve to this address).  "
                }
                optional ( advanced_pool_settings == "Customize pool settings" ) {
                    message owa_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

                    multichoice owa_irules display "xxlarge" tcl {
                        set ::choices [join [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items / ltm rule] "\n"]
                        return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( intro.help == "max" ) {
                        message owa_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                    }
                }
            }
            optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                table owa_servers {
                    string addr required validator "IpAddress" display "large"
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                        optional ( lb_method_choice == "ratio-member" ||
                            lb_method_choice == "ratio-node" ||
                            lb_method_choice == "ratio-session" ||
                            lb_method_choice == "ratio-least-connections-member" ||
                            lb_method_choice == "ratio-least-connections-node" ||
                            lb_method_choice == "dynamic-ratio-member" ||
                            lb_method_choice == "dynamic-ratio-node" ) {
                            string ratio default "1" validator "NonNegativeNumber" display "small"
                        }
                        optional ( use_pga == "yes" ) {
                            string priority default "0" required
                                validator "NonNegativeNumber" display "small"
                        }
                    }
                }
                optional ( intro.help == "max" ) {
                    message owa_servers_help "Because you indicated that each client access service is handled by a unique set of Mailbox Servers, you must specify the IP address of the servers running Outlook Web App. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
                }
            }
        }

        choice deploying_oa display "xxlarge" default "Yes" {
            "Yes, deploying Microsoft Outlook with EWS and OAB" => "Yes"  ,
            "Yes, deploying EWS only" => "ews"  ,
            "No, not deploying Microsoft Outlook or EWS" => "No"
        }
        optional ( intro.help == "max" ) {
            message deploying_oa_help "Select whether you are deploying Microsoft Outlook (including EWS and OAB) as a part of your Exchange 2016 deployment. If you are, you must answer the following question about the protocol Outlook uses to connect to Exchange."
        }
        optional (deploying_oa == "Yes") {
            choice deploying_mapi display "xxlarge" default "mapi" {
                "Outlook clients will use MAPI-over-HTTP" => "Yes"  ,
                "Outlook clients will use RPC-over-HTTP" => "No"  ,
                "Outlook clients will use both MAPI-over-HTTP and RPC-over-HTTP" => "All"
            }
            optional ( intro.help == "max" ) {
                message deploying_mapi_help "The iApp needs to know if Microsoft Outlook clients use MAPI-over-HTTP, RPC-over-HTTP, or both to connect to Microsoft Exchange so it can create the appropriate BIG-IP objects. Select the answer that best describes your implementation."
            }
        }

        optional ( deploying_oa == "Yes" ) {
            optional ( intro.help == "max" ) {
                message deploying_oa_prereq1 "To prevent internal users from receiving a password prompt, your internal DNS must not have an 'A' record for the FQDN for Outlook requests."

            }
                optional ( deployment_scenario.scenario ==
                    "LTM will load balance and optimize CAS traffic" &&
                    deployment.combined_or_seperate_ips ==
                    "Different IP addresses for different services" && deploying_mapi != "No" ) {
                    string mapi_addr required display "xxlarge" validator "IpAddress"
                    optional ( intro.help == "max" ) {
                        message mapi_addr_help "Because you chose different IP addresses for the different client access services, specify the IP address you want the system to use for the MAPI virtual server."
                    }
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        message mapi_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

                        multichoice mapi_irules display "xxlarge" tcl {
                            set ::choices [join [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items / ltm rule] "\n"]
                            return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( intro.help == "max" ) {
                            message mapi_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                        }
                    }
                }
                optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" && deploying_mapi != "No" ) {
                    table mapi_servers {
                        string addr required validator "IpAddress" display "large"
                        optional ( advanced_pool_settings == "Customize pool settings" ) {
                            string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                            optional ( lb_method_choice == "ratio-member" ||
                                lb_method_choice == "ratio-node" ||
                                lb_method_choice == "ratio-session" ||
                                lb_method_choice == "ratio-least-connections-member" ||
                                lb_method_choice == "ratio-least-connections-node" ||
                                lb_method_choice == "dynamic-ratio-member" ||
                                lb_method_choice == "dynamic-ratio-node" ) {
                                string ratio default "1" validator "NonNegativeNumber" display "small"
                            }
                            optional ( use_pga == "yes" ) {
                                string priority default "0" required
                                    validator "NonNegativeNumber" display "small"
                            }
                        }
                    }
                    optional ( intro.help == "max" ) {
                        message mapi_servers_help "Because you indicated that each client access service is handled by a unique set of Mailbox Servers, you must specify the IP address of the servers running Outlook Anywhere. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
                    }
                }
            optional ( deployment_scenario.scenario ==
                "LTM will load balance and optimize CAS traffic" &&
                deployment.combined_or_seperate_ips ==
                "Different IP addresses for different services" && deploying_mapi != "Yes" ) {
                string oa_addr required display "xxlarge" validator "IpAddress"
                optional ( intro.help == "max" ) {
                    message oa_addr_help "Because you chose different IP addresses for the different client access services, specify the IP address you want the system to use for the Outlook Anywhere virtual server."
                }
                optional ( advanced_pool_settings == "Customize pool settings" ) {
                    message oa_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

                    multichoice oa_irules display "xxlarge" tcl {
                        set ::choices [join [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items / ltm rule] "\n"]
                        return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( intro.help == "max" ) {
                        message oa_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                    }
                }
            }
            optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" && deploying_mapi != "Yes" ) {
                table oa_servers {
                    string addr required validator "IpAddress" display "large"
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                        optional ( lb_method_choice == "ratio-member" ||
                            lb_method_choice == "ratio-node" ||
                            lb_method_choice == "ratio-session" ||
                            lb_method_choice == "ratio-least-connections-member" ||
                            lb_method_choice == "ratio-least-connections-node" ||
                            lb_method_choice == "dynamic-ratio-member" ||
                            lb_method_choice == "dynamic-ratio-node" ) {
                            string ratio default "1" validator "NonNegativeNumber" display "small"
                        }
                        optional ( use_pga == "yes" ) {
                            string priority default "0" required
                                validator "NonNegativeNumber" display "small"
                        }
                    }
                }
                optional ( intro.help == "max" ) {
                    message oa_servers_help "Because you indicated that each client access service is handled by a unique set of Mailbox Servers, you must specify the IP address of the servers running Outlook Anywhere. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
                }
            }
            optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" &&
                    intro.apm_provisioned == "yes" &&
                    apm.deploying_apm == "Yes" ) {
                choice oa_ntlm_auth display "xxlarge" default "No" {
                    "Outlook clients use NTLM authentication" => "Yes"  ,
                    "Outlook clients use Basic authentication" => "No"
                }
                optional ( intro.help == "max" ) {
                    message oa_ntlm_auth_help "The BIG-IP APM v11.3 and later supports Outlook Anywhere clients using NTLM authentication, as well as Basic Authentication.  Choose which authentication method your Outlook Anywhere clients are using. If you select NTLM, you must answer a number of questions about your Active Directory implementation."
                }
            }
        }

        optional ( intro.apm_provisioned == "yes" &&
                   apm.deploying_apm == "Yes" &&
                   apm.apm_profile == "/#create_new#" &&
            (( deploying_owa == "Yes" && owa_smartcard_auth == "Yes" ) ||
            ( deploying_oa == "Yes" && oa_ntlm_auth == "Yes" ))) {

            optional ( deploying_oa == "Yes" && oa_ntlm_auth == "Yes" ) {
                message oa_ntlm_auth_warning1 "Before completing this section, you must create an NTLM Machine Account object on the BIG-IP system to join this system to the Active Directory domain. Creating an NTLM Machine Account is not a part of this template, see Access Policy>> Access Profiles: NTLM: NTLM Machine Account List. You must also create a user account in the same domain that has been properly configured for NTLM delegation."
                message oa_ntlm_auth_warning2 "To use client NTLM authentication, you must correctly configure Kerberos delegation in the Active Directory domain where Outlook Anywhere users will be authenticated. See the Deployment Guide for complete details on configuring NTLM authentication for Outlook Anywhere."
                choice ntlm_machine_account display "xxlarge" tcl {
                    set ::choices [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -nocomplain apm ntlm machine-account]
                    return [expr { $::choices eq "" ? "REQUIRED" : [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices] }]
                }
                optional ( intro.help == "max" ) {
                    message ntlm_machine_account_help "The Machine Account creates a computer account for this BIG-IP system in your Active Directory domain. If you do not see any items in this list, you must exit this template and create the NTLM Machine Account before it appears. See see Access Policy>> Access Profiles: NTLM: NTLM Machine Account List."
                }
            }
            string ntlm_kdc required display "xxlarge" validator "IpOrFqdn"
            optional ( intro.help == "max" ) {
                message ntlm_kdc_help "Specify the IP address or fully qualified domain name of the Kerberos Key Distribution Center (KDC). "
            }
            message ntlm_kdc_warning "If using an FQDN, this BIG-IP system must be able to resolve the IP address of the KDC using DNS."
            string ntlm_realm display "xxlarge" required
            optional ( intro.help == "max" ) {
                message ntlm_realm_help "Specify the Kerberos realm, such as MYDOMAIN.COM."
            }
            string ntlm_user display "xxlarge" required
            optional ( intro.help == "max" ) {
                message ntlm_user_help "This is the user account in Active Directory you should have created prior to beginning the template.  This account must be correctly configured in Active Directory for Kerberos delegation.  See the Deployment Guide for more information."
            }
            password ntlm_passwd display "xxlarge" required
            choice ntlm_spn_pattern display "xxlarge" default "Use DNS reverse lookups"
                        { "Use DNS reverse lookups"  , "Use the Outlook Anywhere host header" }
            optional ( intro.help == "max" ) {
                message ntlm_spn_pattern_help "The BIG-IP APM will construct a Kerberos ticket request to the Active Directory domain controller using either DNS reverse lookups or the Outlook Anywhere host header.  See the Deployment Guide detailed information, including Active Directory configuration guidance."
            }
            optional ( ntlm_spn_pattern == "Use DNS reverse lookups" ) {
                message ntlm_dns_lookup_warning "To use DNS reverse lookups, you must configure a reverse lookup zone containing a PTR record for each Mailbox Server on a DNS server that is accessible from this BIG-IP system."
            }
            optional ( ntlm_spn_pattern == "Use the Outlook Anywhere host header" ) {
                message ntlm_host_header_warning "To use the host header value,  you must configure IIS Application Pools for Outlook Anywhere, Autodiscover, and Exchange Web Services to run using the previously created Active Directory user account for Kerberos delegation.  See the Deployment Guide for detailed information."
            }
        }

        optional ( deploying_oa != "No" ) {
            optional ( intro.help == "max" ) {
                message deploying_ews_warning1 "This option creates a destination virtual server and associated objects for Exchange Web Services traffic only; if you are deploying Outlook and EWS, select 'Yes, deploying Microsoft Outlook with EWS and OAB' above."
                message deploying_ews_warning2 "Outlook Address Book traffic will be forwarded to the Exchange Web Services pool."
            }
            optional ( deployment_scenario.scenario ==
                "LTM will load balance and optimize CAS traffic" &&
                deployment.combined_or_seperate_ips ==
                "Different IP addresses for different services" ) {
                string ews_addr required display "xxlarge" validator "IpAddress"
                optional ( intro.help == "max" ) {
                    message deploying_ews_help "Because you chose different IP addresses for the different client access services, specify the IP address you want the system to use for the EWS virtual server."
                }
                optional ( advanced_pool_settings == "Customize pool settings" ) {
                    message ews_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."
                    multichoice ews_irules display "xxlarge" tcl {
                        set ::choices [join [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items / ltm rule] "\n"]
                        return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                    }
                     optional ( intro.help == "max" ) {
                      message ews_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                      }
                }
            }
            optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                table ews_servers {
                    string addr required validator "IpAddress" display "large"
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                        optional ( lb_method_choice == "ratio-member" ||
                            lb_method_choice == "ratio-node" ||
                            lb_method_choice == "ratio-session" ||
                            lb_method_choice == "ratio-least-connections-member" ||
                            lb_method_choice == "ratio-least-connections-node" ||
                            lb_method_choice == "dynamic-ratio-member" ||
                            lb_method_choice == "dynamic-ratio-node" ) {
                            string ratio default "1" validator "NonNegativeNumber" display "small"
                        }
                        optional ( use_pga == "yes" ) {
                            string priority default "0" required
                                validator "NonNegativeNumber" display "small"
                        }
                    }
                }
                optional ( intro.help == "max" ) {
                    message ews_servers_help "Because you indicated that each client access service is handled by a unique set of Mailbox Servers, you must specify the IP address of the servers running Exchange Web Services. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
                }
            }
        }
        yesno deploying_as
        optional ( intro.help == "max" ) {
            message deploying_as_help "Select whether you are deploying the BIG-IP system for ActiveSync at this time. You can always reconfigure this template at another time to add or remove ActiveSync from the configuration."
         }
        optional ( deploying_as == "Yes" ) {
            optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" &&
                    deployment.combined_or_seperate_ips == "Different IP addresses for different services" ) {
                string as_addr required display "xxlarge" validator "IpAddress"
                optional ( intro.help == "max" ) {
                    message deploying_as_help1 "Because you chose different IP addresses for the different client access services, specify the IP address you want the system to use for the ActiveSync virtual server."
                }
                optional ( advanced_pool_settings == "Customize pool settings" ) {
                    message as_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

                    multichoice as_irules display "xxlarge" tcl {
                        set ::choices [join [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items / ltm rule] "\n"]
                        return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( intro.help == "max" ) {
                        message as_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                    }
                }
            }
            optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                table as_servers {
                    string addr required validator "IpAddress" display "large"
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                        optional ( lb_method_choice == "ratio-member" ||
                            lb_method_choice == "ratio-node" ||
                            lb_method_choice == "ratio-session" ||
                            lb_method_choice == "ratio-least-connections-member" ||
                            lb_method_choice == "ratio-least-connections-node" ||
                            lb_method_choice == "dynamic-ratio-member" ||
                            lb_method_choice == "dynamic-ratio-node" ) {
                            string ratio default "1" validator "NonNegativeNumber" display "small"
                        }
                        optional ( use_pga == "yes" ) {
                            string priority default "0" required
                                validator "NonNegativeNumber" display "small"
                        }
                    }
                }
                optional ( intro.help == "max" ) {
                    message as_servers_help "Because you indicated that each client access service is handled by a unique set of Mailbox Servers, you must specify the IP address of the servers running ActiveSync. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
                }
            }
        }
        yesno deploying_ad
        optional ( intro.help == "max" ) {
            message deploying_ad_help "Select whether you are deploying the BIG-IP system for Autodiscover at this time. You can always reconfigure this template at another time to add or remove Autodiscover from the configuration."
         }
        optional ( deploying_ad == "Yes" )    {
            message deploying_ad_prereq1 "To deploy Autodiscover, you must either create an 'SRV' record in DNS or create 'A' records in order for external clients to be able to make use of Autodiscover. See Additional Steps at the bottom of this template for more information."
            optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" &&
                    deployment.combined_or_seperate_ips == "Different IP addresses for different services" ) {
                string ad_addr required display "xxlarge" validator "IpAddress"
                optional ( intro.help == "max" ) {
                    message deploying_ad_help1 "Because you chose different IP addresses for the different client access services, specify the IP address you want the system to use for the Autodiscover virtual server."
                }
                optional ( advanced_pool_settings == "Customize pool settings" ) {
                    message ad_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

                    multichoice ad_irules display "xxlarge" tcl {
                        set ::choices [join [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items / ltm rule] "\n"]
                        return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( intro.help == "max" ) {
                    message ad_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                    }
                }
            }
            optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                table ad_servers {
                    string addr required validator "IpAddress" display "large"
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                        optional ( lb_method_choice == "ratio-member" ||
                            lb_method_choice == "ratio-node" ||
                            lb_method_choice == "ratio-session" ||
                            lb_method_choice == "ratio-least-connections-member" ||
                            lb_method_choice == "ratio-least-connections-node" ||
                            lb_method_choice == "dynamic-ratio-member" ||
                            lb_method_choice == "dynamic-ratio-node" ) {
                            string ratio default "1" validator "NonNegativeNumber" display "small"
                        }
                        optional ( use_pga == "yes" ) {
                            string priority default "0" required
                                validator "NonNegativeNumber" display "small"
                        }
                    }
                }
                optional ( intro.help == "max" ) {
                    message ad_servers_help "Because you indicated that each client access service is handled by a unique set of Mailbox Servers, you must specify the IP address of the servers running Autodiscover. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
                }
            }
        }
        optional ( intro.apm_provisioned == "yes" &&
              apm.deploying_apm == "Yes" && apm.apm_profile == "/#create_new#" &&
           (( deploying_owa == "Yes" && owa_smartcard_auth == "No" && owa_ntlm_sso == "Yes" ) ||
            ( deploying_oa == "Yes" && oa_ntlm_auth == "No" ) ||
              deploying_oa == "ews" ||
            ( deploying_ad == "Yes" && deploying_oa == "No"))) {
            choice ntlm_sso_version display "xxlarge" default "1" {
                "NTLMv1 authentication" => "1"  ,
                "NTLMv2 authentication" => "2"
            }
            optional ( intro.help == "max" ) {
                message ntlm_sso_version_help "Select the version of NTLM your implementation is using.  This determines the type of SSO Configuration object BIG-IP APM configures.  If you choose NTLMv2 authentication, the iApp only creates simple health monitors for Autodiscover, Outlook Anywhere, EWS, and MAPI-over-HTTP, no matter which selection you make in the iApp."
            }
        }

        noyes deploying_pop3
        optional ( intro.help == "max" ) {
            message deploying_pop3_help "Select whether you are deploying the BIG-IP system for POP3 at this time. You can always reconfigure this template at another time to add or remove POP3 from the configuration."
        }
        optional ( deploying_pop3 == "Yes" ) {
            message deploying_pop3_note "You must enable POP3 on each of your Exchange Mailbox Servers before that service will be available. POP3 is not enabled by default on Exchange Mailbox Servers."

            optional (( deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
                message deploying_pop3_note_ssloffload "Because you are offloading SSL, you must configure the Authentication properties for POP3 on each of your Exchange Mailbox Servers to allow logins using plain text. By default, POP3 is configured to only allow secure (encrypted) logins."
            }
            optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" &&
                    deployment.combined_or_seperate_ips == "Different IP addresses for different services" ) {
                string pop3_addr required display "xxlarge" validator "IpAddress"
                optional ( intro.help == "max" ) {
                    message deploying_pop3_help1 "Because you chose different IP addresses for the different client access services, specify the IP address you want the system to use for the POP3 virtual server."
                }
            }
            optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                table pop3_servers {
                    string addr required validator "IpAddress" display "large"
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                        optional ( lb_method_choice == "ratio-member" ||
                            lb_method_choice == "ratio-node" ||
                            lb_method_choice == "ratio-session" ||
                            lb_method_choice == "ratio-least-connections-member" ||
                            lb_method_choice == "ratio-least-connections-node" ||
                            lb_method_choice == "dynamic-ratio-member" ||
                            lb_method_choice == "dynamic-ratio-node" ) {
                            string ratio default "1" validator "NonNegativeNumber" display "small"
                        }
                        optional ( use_pga == "yes" ) {
                            string priority default "0" required
                                validator "NonNegativeNumber" display "small"
                        }
                    }
                }
                optional ( intro.help == "max" ) {
                    message pop3_servers_help "Because you indicated that each client access service is handled by a unique set of Mailbox Servers, you must specify the IP address of the servers running Autodiscover. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
                }
            }
        }
        noyes deploying_imap4
        optional ( intro.help == "max" ) {
            message deploying_imap4_help "Select whether you are deploying the BIG-IP system for POP3 at this time. You can always reconfigure this template at another time to add or remove POP3 from the configuration."
        }
        optional ( deploying_imap4 == "Yes" ) {
            message deploying_imap4_note "You must enable IMAP4 on each of your Exchange Mailbox Servers before that service will be available. IMAP4 is not enabled by default on Exchange Mailbox Servers."

            optional (( deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
                message deploying_imap4_note_ssloffload "Because you are offloading SSL, you must configure the Authentication properties for IMAP4 on each of your Exchange Mailbox Servers to allow logins using plain text. By default, IMAP4 is configured to only allow secure (encrypted) logins."
            }
            optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" &&
                    deployment.combined_or_seperate_ips == "Different IP addresses for different services" ) {
                string imap4_addr required display "xxlarge" validator "IpAddress"
                optional ( intro.help == "max" ) {
                    message deploying_imap4_help1 "Because you chose different IP addresses for the different client access services, specify the IP address you want the system to use for the IMAP4 virtual server."
                }
            }
            optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                table imap4_servers {
                    string addr required validator "IpAddress" display "large"
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                        optional ( lb_method_choice == "ratio-member" ||
                            lb_method_choice == "ratio-node" ||
                            lb_method_choice == "ratio-session" ||
                            lb_method_choice == "ratio-least-connections-member" ||
                            lb_method_choice == "ratio-least-connections-node" ||
                            lb_method_choice == "dynamic-ratio-member" ||
                            lb_method_choice == "dynamic-ratio-node" ) {
                            string ratio default "1" validator "NonNegativeNumber" display "small"
                        }
                        optional ( use_pga == "yes" ) {
                            string priority default "0" required
                                validator "NonNegativeNumber" display "small"
                        }
                    }
                }
                optional ( intro.help == "max" ) {
                    message imap4_servers_help "Because you indicated that each client access service is handled by a unique set of Mailbox Servers, you must specify the IP address of the servers running Autodiscover. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
                }
            }
        }

        optional ( deployment.service_distribution == "All services will be handled by the same set of Client Access Servers"
              && (deploying_owa   == "Yes"
              ||  deploying_oa    != "No"
              ||  deploying_as    == "Yes"
              ||  deploying_ad    == "Yes"
              ||  deploying_pop3  == "Yes"
              ||  deploying_imap4 == "Yes")) {
            table servers {
                string addr required validator "IpAddress" display "large"
                optional ( advanced_pool_settings == "Customize pool settings" ) {
                    string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                    optional ( lb_method_choice == "ratio-member" ||
                        lb_method_choice == "ratio-node" ||
                        lb_method_choice == "ratio-session" ||
                        lb_method_choice == "ratio-least-connections-member" ||
                        lb_method_choice == "ratio-least-connections-node" ||
                        lb_method_choice == "dynamic-ratio-member" ||
                        lb_method_choice == "dynamic-ratio-node" ) {
                        string ratio default "1" validator "NonNegativeNumber" display "small"
                    }
                    optional ( use_pga == "yes" ) {
                        string priority default "0" required
                            validator "NonNegativeNumber" display "small"
                    }
                }
            }
            optional ( intro.help == "max" ) {
                message servers_addr_help "Specify the IP addresses of the Mailbox Servers. Because you specified all services are handled by the same set of Mailbox Servers, you only have to enter the IP addresses once. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
            }
        }
    }

    section monitors {
        choice default_or_advanced display "xxlarge" default "Use simple monitors" {
            "No, do not create external monitors (use standard monitors)" => "Use simple monitors"  ,
            "Yes, create external monitors" => "Use advanced monitors"
        }
        optional ( intro.help == "max" ) {
            message advanced_monitor_description "By default, the iApp creates the Microsoft-recommended Managed Availability monitors.  You can choose to have the iApp also create External monitors, which use SNMP queries to check the status of five services critical to proper Exchange functionality.  SNMP must be enabled on each Exchange server in the pool.  More information about these services is available in the Exchange iApp deployment guide."
        }
        optional ( default_or_advanced == "Use advanced monitors" ) {
            optional ( services.deploying_owa == "Yes" || services.deploying_oa != "No" ||
                       services.deploying_as == "Yes" || services.deploying_ad == "Yes" ||
                       services.deploying_pop3 == "Yes" || services.deploying_imap4 == "Yes" ) {
                string snmp_community_string display "xxlarge" required
                    optional ( intro.help == "max" ) {
                        message snmp_community_string_help "Type the SNMP community string for your Mailbox servers. Because Microsoft only supports SNMP v2 in their default SNMP service, you must use an SNMP v2 community string.  If you require SNMP v3 support, and have configured that using a custom solution on your Exchange servers then you can manually modify the external monitor script created by the iApp.  See the deployment guide for details."
                    }
            }
        optional ( services.deploying_pop3 == "Yes" || services.deploying_imap4 == "Yes" ) {
            message advanced_monitor_prereq1 "For the POP3 and/or IMAP4 monitors to function correctly, you must configure at least one account and mailbox to use for monitoring. F5 recommends using two accounts with mailboxes located on separate Mailbox servers in your site. F5 further recommends that the accounts for those mailboxes have no other privileges in the domain and are set to have passwords that do not expire."
            string username display "xxlarge" required
            optional ( intro.help == "max" ) {
                message username_help "Specify the mailbox account for use in the POP3 and/or IMAP4 monitors. This name corresponds to the Account Name field in Active Directory (rather than the email address)."
            }
            password passwd display "xxlarge" required
            optional ( intro.help == "max" ) {
                    message passwd_help "Type the password associated with the mailbox account."
                    }
                string account_domain display "xxlarge" required
                optional ( intro.help == "max" ) {
                    message account_domain_help "Type the Domain name for the user account. This domain can be entered in either FQDN (mydomain.example.com) or NetBIOS (MYDOMAIN) format."
                }
                choice second_mailbox_account display "xxlarge" default "Monitor a second mailbox (recommended)" {
                    "Monitor a second mailbox (recommended)"  ,
                    "Monitor only one mailbox"
                }
                optional ( intro.help == "max" ) {
                    message second_mailbox_account_help "Choose whether you want to monitor a second mailbox. We strongly recommend configuring a second mailbox account to be used by a second set of monitors, using a mailbox that is configured to reside on a different Mailbox server. The system only marks a Client Access service on a specific server down if both sets of credentials fail."
                }
                optional ( second_mailbox_account == "Monitor a second mailbox (recommended)" ) {
                    string second_username display "xxlarge" required
                    password second_passwd display "xxlarge" required
                    string second_account_domain display "xxlarge" required
                }
            }
            string interval display "medium" default "30" required
            optional ( intro.help == "max" ) {
                message monitor_interval_max_help    "Specify how often the system should check the health of the servers. We recommend the default of 30 seconds. The maximum value for the interval is 28799 seconds."
            }
        }
        optional ( services.deploying_owa == "Yes" ||
                services.deploying_oa == "Yes" ||
                services.deploying_oa == "ews" ||
                services.deploying_as == "Yes" ||
                services.deploying_ad == "Yes"  ) {
            optional ( deployment.combined_or_seperate_ips == "Single IP address" ) {
                choice using_single_domain display "xxlarge" default "One FQDN for all HTTP services" {
                    "One FQDN for all HTTP services"  ,
                    "Different FQDNs for each HTTP service"
                }
                optional ( intro.help == "max" ) {
                    message using_single_domain_help "Select whether you are using one FQDN for all HTTP-based services or separate FQDNs for each service. The FQDN values are used for HTTP 1.1-based health monitors."
                }
            }
            optional ( deployment.combined_or_seperate_ips == "Single IP address"
                    && using_single_domain == "One FQDN for all HTTP services" ) {
                string single_domain display "xxlarge" required validator "FQDN"

                optional ( intro.help == "max" ) {
                    message single_domain_help "Specify the fully qualified domain name you are using for all of the HTTP-based client access services."
                }
            }
            optional ( deployment.combined_or_seperate_ips != "Single IP address" ||
                    (deployment.combined_or_seperate_ips == "Single IP address"
                    && using_single_domain == "Different FQDNs for each HTTP service") ) {
                optional ( services.deploying_owa == "Yes" ) {
                    string owa_domain display "xxlarge" required validator "FQDN"
                }
                    optional ( services.deploying_oa == "Yes" &&
                               services.deploying_mapi != "No" ) {
                        string mapi_domain display "xxlarge" required validator "FQDN"
                    }
                    optional ( services.deploying_oa == "Yes" &&
                               services.deploying_mapi != "Yes" ) {
                        string oa_domain display "xxlarge" required validator "FQDN"
                    }
                optional ( services.deploying_oa != "No" ) {
                    string ews_domain display "xxlarge" required validator "FQDN"
                }
                optional ( services.deploying_as == "Yes" ) {
                    string as_domain display "xxlarge" required validator "FQDN"
                }
                optional ( services.deploying_ad == "Yes" ) {
                    string ad_domain display "xxlarge" required validator "FQDN"
                }
            }
        }
    }
}

optional ( intro.apm_provisioned == "yes" &&
    deployment_scenario.scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" ) {
    section edge_deployment {
        string addr required display "xxlarge" validator "IpAddress" display "large"
        optional ( intro.help == "max" ) {
            message addr_help "Specify the IP address you want to use for the BIG-IP Access Policy Manager virtual server. This is the address clients will use to access the HTTP-based Mailbox services by way of the BIG-IP Access Policy Manager."
        }

                choice reencrypt_2013 display "xxlarge"
                    default "Do not re-encrypt (SSL Offload)" {
                    "Re-encrypt (SSL Bridging)"  ,
                    "Do not re-encrypt (SSL Offload)"
                }
        message reencrypt_note "If you are deploying BIG-IP APM and forwarding traffic to a separate BIG-IP LTM, we generally recommend that you do not re-encrypt traffic between your BIG-IP APM and BIG-IP LTM because both BIG-IP systems must process the SSL transactions. However, if you do choose to re-encrypt, we strongly recommend you use a valid certificate (usually SAN-enabled) rather than the default, self-signed certificate for the Client SSL profile on your BIG-IP LTM system. If not re-encrypting traffic, you do not need a certificate on your BIG-IP LTM."

        choice client_ssl_profile display "xxlarge" default "/#create_new#" tcl {
            set ::choices "Create a new Client SSL profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items ltm profile client-ssl]"
            return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
        }
        optional ( intro.help == "max" ) {
            message client_ssl_profile_help "Choose whether you want the template to create a new Client SSL profile for your implementation or use an existing one. Unless you have created a custom Client SSL profile which includes the appropriate SSL certificate and key, specifically for this implementation, we recommend allowing the iApp to create a new profile."
        }

        optional ( client_ssl_profile == "/#create_new#" ) {

            choice cert default "/Common/default.crt" display "xxlarge" tcl {
                set ::choices [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]
                return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
            }
            optional ( intro.help == "max" ) {
                message cert_help "Select the certificate the system uses for client-side SSL processing. Importing SSL certificates and keys is not a part of this template; see Local Traffic >> SSL Certificate List. To select any new certificates and keys you import, you need to restart or reconfigure this template to have them appear in the list."
            }
            choice key default "/Common/default.key" display "xxlarge" tcl {
                set ::choices [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -norecursive -filter security-type ne "password" sys file ssl-key]
                return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
            }
            optional ( intro.help == "max" ) {
                message key_help "Select the name of the associated SSL key."
            }
            choice chain_cert default "/#do_not_use#" display "xxlarge" tcl {
                set ::choices "Do not use a chain certificate\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]"
                return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
            }
            optional ( intro.help == "max" ) {
                 message chain_cert_help "Intermediate certificates, also called intermediate certificate chains or chain certificates, are used to help systems which depend on SSL certificates for peer identification. These certificates are intended to create a chain of trust between the CA that signed the certificate and the CA that is already trusted by the recipient of the certificate. This allows the recipient to verify the validity of the certificates presented, even when the signing CA is unknown."
            }
        }

        optional (( reencrypt_2013 == "Re-encrypt (SSL Bridging)")) {

            choice server_ssl_profile display "xxlarge" default "/#create_new#" tcl {
                set ::choices "Create a new Server SSL profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items ltm profile server-ssl]"
                return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
            }
            optional ( intro.help == "max" ) {
                message server_ssl_profile_help "Choose whether you want the template to create a new Server SSL profile for your implementation or use an existing one. Unless you have created a custom Server SSL profile specifically for this implementation, we recommend allowing the iApp to create a new profile."
            }

            optional ( server_ssl_profile == "/#create_new#" ) {
                choice insecure_compatible display "xxlarge"
                    default "Self-signed or default certificate and key" {
                    "Self-signed or default certificate and key"  ,
                    "Certificate Authority-provided certificate and key"
                }
            }
            optional ( intro.help == "max" ) {
                message insecure_compatible_help "In order to determine the correct Secure Renegotiation setting on the Server SSL profile, the iApp needs to know if the remote BIG-IP LTM system to which this BIG-IP APM is forwarding traffic is using a default or self-signed certificate, or a certificate signed by a Certificate Authority. This question pertains to the certificate used by the remote BIG-IP LTM, NOT the certificates present and assigned on the local BIG-IP system you are configuring."
            }
        }
        string vs_addr required display "xxlarge" validator "IpAddress"
         optional ( intro.help == "max" ) {
            message vs_addr_help "This is the IP address of the virtual server on the remote BIG-IP LTM which receives the Mailbox traffic from this BIG-IP device. This BIG-IP APM sends traffic to this address after performing authentication."
        }
        choice lan_or_wan display "xxlarge" default "WAN" {
            "Optimize TCP connections for WAN clients" => "WAN"  ,
            "Optimize TCP connections for LAN clients" => "LAN"
        }
        optional ( intro.help == "max" ) {
            message wan_lan_help "In order for the template to configure the proper TCP optimization settings, you must specify whether you want the system to optimize connections for WAN or LAN clients.  This answer should be based on whether the majority of your Exchange clients will be connecting to the BIG-IP system over a WAN or a LAN."
        }

            optional ( apm.apm_profile == "/#create_new#" ) {
                choice restrict_eac_apm display "xxlarge" default "No" {
                    "Yes, restrict EAC access by group membership" => "Yes"  ,
                    "No, do not restrict EAC access by group membership" => "No" }
                optional ( intro.help == "max" ) {
                    message restrict_eac_apm_help "Because you are deploying the BIG-IP APM, you can restrict Exchange Administration Center (EAC) access to members of Exchange 2016's Organizational Management group. The BIG-IP APM module queries Active Directory group membership and the BIG-IP APM policy allows or denies access based on membership."
                }
            }
        optional ( intro.apm_provisioned == "yes" ) {
            choice owa_smartcard_auth display "xxlarge" default "No" {
                "Outlook Web App clients use Smart Card authentication" => "Yes"  ,
                "Outlook Web App not used or clients use Forms-based authentication" => "No" }
            optional ( intro.help == "max" ) {
                    message owa_smartcard_auth_help "The BIG-IP APM v11.3 and later supports Outlook Web App clients using Smart Card authentication, as well as Forms-based Authentication.  Choose which authentication method your Outlook Web App clients are using."
            }

            optional ( owa_smartcard_auth == "Yes" ) {
                choice ssl_chain_cert default "/Common/default.crt" display "xxlarge" tcl {
                    set ::choices [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]
                    return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
                }
                optional ( intro.help == "max" ) {
                    message ssl_chain_cert_help "Select the certificate you imported onto the BIG-IP system from a CA that is trusted by this system for client-side processing of smart card authentication.  Importing certificates is not a part of this template, see System > File Management > SSL Certificate list. "
                }
            }

            optional ( owa_smartcard_auth == "No" ) {
                choice owa_ntlm_sso default "No" display "xxlarge" {
                    "Outlook Web App is configured for Windows authentication" => "Yes"  ,
                    "Outlook Web App is configured for Forms-based authentication" => "No"
                }
                optional ( intro.help == "max" ) {
                    message owa_ntlm_sso_help "Select whether you have configured Outlook Web App to use Windows authentication or Forms-based authentication. This selection is only for OWA, and not for Outlook clients."
                }
                optional ( owa_ntlm_sso == "No" ) {
                    choice owa_logon_options display "xxlarge" default "No" {
                        "No, do not display the OWA logon options" => "No"  ,
                        "Yes, display the OWA logon options" => "Yes"
                    }
                    optional ( intro.help == "max" ) {
                        message owa_logon_options_2013_help "In Exchange 2013, you must enable the logon page options by running specific PowerShell commands in Exchange Management Shell prior to logging into OWA.  Consult the Microsoft documentation for more information."
                        message owa_logon_options_2013_help2 "For the blind and low vision experience to function correctly when accessing OWA with Internet Explorer 11, the OWA site must be added to the Compatibility View websites list. Consult Microsoft documentation for specific information."
                    }
                }
            }
            optional ( owa_smartcard_auth == "Yes" || owa_ntlm_sso == "Yes" ) {
                string owa_login_timeout default "480"
                optional ( intro.help == "max" ) {
                    message owa_login_timeout_help "Type the number of minutes you want to pass before idle Outlook Web App sessions timeout."
                }
            }
            choice oa_ntlm_auth display "xxlarge" default "No" {
                "Outlook clients use NTLM authentication" => "Yes"  ,
                "Outlook not used or clients use Basic auth" => "No" }
            optional ( intro.help == "max" ) {
                    message oa_ntlm_auth_help "The BIG-IP APM v11.3 and later supports Outlook Anywhere clients using NTLM authentication, as well as Basic Authentication.  Choose which authentication method your Outlook Anywhere clients are using."
            }

            optional ( apm.apm_profile == "/#create_new#" ) {
                optional ( owa_smartcard_auth == "No" && oa_ntlm_auth == "No") {
                    choice ntlm_sso_version display "xxlarge" default "1" {
                        "NTLMv1 authentication" => "1"  ,
                        "NTLMv2 authentication" => "2"
                    }
                    optional ( intro.help == "max" ) {
                        message ntlm_sso_version_help "Select the version of NTLM your implementation is using.  This determines the type of SSO Configuration object BIG-IP APM configures.  If you choose NTLMv2 authentication, the iApp only creates simple health monitors for Autodiscover, Outlook Anywhere, EWS, and MAPI-over-HTTP, no matter which selection you make in the iApp."
                    }
                }
                optional ( owa_smartcard_auth == "Yes" || oa_ntlm_auth == "Yes" ) {

                    optional ( oa_ntlm_auth == "Yes" ) {
                        message oa_ntlm_auth_warning1 "Before completing this section, you must create an NTLM Machine Account object on the BIG-IP system to join this system to the Active Directory domain. Creating an NTLM Machine Account is not a part of this template, see Access Policy>> Access Profiles: NTLM: NTLM Machine Account List. You must also create a user account in the same domain that has been properly configured for NTLM delegation."
                        message oa_ntlm_auth_warning2 "To use client NTLM authentication, you must correctly configure Kerberos delegation in the Active Directory domain where Outlook Anywhere users will be authenticated. See the Deployment Guide for complete details on configuring NTLM authentication for Outlook Anywhere."
                        choice ntlm_machine_account display "xxlarge" tcl {
                            set ::choices [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items -nocomplain apm ntlm machine-account]
                            return [expr { $::choices eq "" ? "REQUIRED" : [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices] }]
                        }
                        optional ( intro.help == "max" ) {
                            message ntlm_machine_account_help "The Machine Account creates a computer account for this BIG-IP system in your Active Directory domain. If you do not see any items in this list, you must exit this template and create the NTLM Machine Account before it appears. See see Access Policy>> Access Profiles: NTLM: NTLM Machine Account List."
                        }
                    }
                    string ntlm_kdc required display "xxlarge" validator "IpOrFqdn"
                    optional ( intro.help == "max" ) {
                        message ntlm_kdc_help "Specify the IP address or fully qualified domain name of the Kerberos Key Distribution Center (KDC). "
                    }
                    message ntlm_kdc_warning "If using an FQDN for the Key Distribution Center, the BIG-IP system must be able to resolve the IP address of the KDC using DNS."
                    string ntlm_realm display "xxlarge" required
                    optional ( intro.help == "max" ) {
                        message ntlm_realm_help "Specify the Kerberos realm, such as MYDOMAIN.COM."
                    }
                    string ntlm_user display "xxlarge" required
                    optional ( intro.help == "max" ) {
                        message ntlm_user_help "This is the user account in Active Directory you should have created prior to beginning the template.  This account must be correctly configured in Active Directory for Kerberos delegation.  See the Deployment Guide for more information."
                    }
                    password ntlm_passwd display "xxlarge" required
                    optional ( intro.help == "max" ) {
                        message ntlm_passwd_help "Specify the password associated with the Active Directory user account."
                    }
                }
            }
        }

        message irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

        multichoice irules display "xxlarge" tcl {
            set ::choices [join [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_get_items / ltm rule] "\n"]
            return [tmsh::run_proc f5.iapp.1.5.0.cli:iapp_safe_display ::choices]
        }
        optional ( intro.help == "max" ) {
            message irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
            }

    }
}
section postreq {
    message postreq_1 "You must configure a DNS entry for each fully qualified host name that clients will use for Mailbox services. Each DNS record must resolve to the corresponding IP address you configured for the virtual server assigned to each service."
    optional ( ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ||
        deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ) && ( services.deploying_ad == "Yes" ) ) {
        message autodiscover_dns "In order for external clients to be able to make use of Autodiscover, you must either create an 'SRV' record in DNS or create 'A' records."
        message autodiscover_dns_srv "An SRV record must take the form '_autodiscover._tcp.example.com', port 443, and must resolve to a fully-qualified domain name that is valid for the certificate and key you have installed on the BIG-IP system and that resolves to the IP address you have configured for your virtual server."
        message autodiscover_dns_a "If you do not want to use an 'SRV' record, then you must have 'A' records for either 'autodiscover.<yourdomain>' or '<yourdomain>' that resolve to the IP address you have designated for your Autodiscover virtual server."
    }
    optional ( deployment_scenario.scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" ) {
        message autodiscover_dns_edge "If you are deploying Autodiscover, you must either create an 'SRV' record in DNS or create 'A' records in order for external clients to be able to make use of the service."
        message autodiscover_dns_srv_edge "An SRV record must take the form '_autodiscover._tcp.example.com', port 443, and must resolve to a fully-qualified domain name that is valid for the certificate and key you have installed on the BIG-IP system and that resolves to the IP address you have configured for your virtual server."
        message autodiscover_dns_a_edge "If you do not want to use an 'SRV' record, then you must have 'A' records for either 'autodiscover.<yourdomain>' or '<yourdomain>' that resolve to the IP address you have designated for your Autodiscover virtual server."
    }
    optional ( ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ||
        deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ) && ( services.deploying_oa == "Yes" ) ) {
        message outlookanywhere_dns "To prevent internal users from receiving a password prompt, your internal DNS must not have an 'A' record for the FQDN for Outlook Anywhere."
    }
    message configure_cas "You may have to perform additional steps before your Mailbox Server become available."

    # Start of LTM, LTM+APM, and LTM behind Edge Gateway or APM postreq section.
    optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ||
        deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ) {

            optional (( deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
                message ssloffload "You have to enable SSL Offloading on your Mailbox Servers. See the Microsoft documentation at https://technet.microsoft.com/en-us/library/dn635115(v=exchg.150).aspx (2013) or http://social.technet.microsoft.com/wiki/contents/articles/how-to-configure-ssl-offloading-in-exchange-2010.aspx (2010)."
            }
            optional ( services.deploying_oa == "Yes" ) {
                message oa_note "You must enable Outlook Anywhere on your Mailbox Servers before the service will be available. Outlook Anywhere is not enabled by default on Exchange Mailbox Servers."
            }
            optional ( services.deploying_pop3 == "Yes" ) {
                message pop3_note "You must enable POP3 on your Mailbox Servers before the service will be available."

                optional (( deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
                    message pop3_note_ssloffload "You must configure the Authentication properties for POP3 on each of your Exchange Mailbox Servers to allow logins using plain text."
                }
            }
            optional ( services.deploying_imap4 == "Yes") {
                message imap4_note "You must enable IMAP4 on your Mailbox Servers before the service will be available."

                    optional
            (( deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
                        message imap4_note_ssloffload "You must configure the Authentication properties for IMAP4 on each of your Exchange Mailbox Servers to allow logins using plain text."
                    }
            }
            optional (deployment.cert == "/Common/default.crt" ||
                deployment.cert == "/Common/f5-irule.crt" ||
                deployment.cert == "/Common/ca-bundle.crt" ||
                deployment.key == "/Common/default.key" ) {
                message insecure_ssl_key_or_cert "You have selected a default BIG-IP certificate and/or key. This application service configuration is incomplete and will not be secure until you import and assign a trusted certificate and key that are valid for all fully qualified domain names used for your Mailbox Servers. See Local Traffic >> SSL Certificate List for importing certificates and keys. To select any new certificates and keys you import, you need to restart or reconfigure this template."
            }
    }
    # end of LTM, LTM+APM and LTM behind Edge Gateway or APM postreq section

    # start of Edge Gateway postreq section
    optional ( deployment_scenario.scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" ) {
        optional (( edge_deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
            message ssloffload_edge "You have to enable SSL Offloading on your Mailbox Servers. See the Microsoft documentation at https://technet.microsoft.com/en-us/library/dn635115(v=exchg.150).aspx (2013) or http://social.technet.microsoft.com/wiki/contents/articles/how-to-configure-ssl-offloading-in-exchange-2010.aspx (2010)."
        }
        optional ( edge_deployment.cert == "/Common/default.crt" ||
            edge_deployment.cert == "/Common/ca-bundle.crt" ||
            edge_deployment.cert == "/Common/f5-irule.crt" ||
            edge_deployment.key == "/Common/default.key") {
                message insecure_ssl_key_or_cert_edge "You have selected a default BIG-IP certificate and/or key. This application service configuration is incomplete and will not be secure until you import and assign a trusted certificate and key that are valid for all fully qualified domain names used for your Mailbox Servers. See Local Traffic >> SSL Certificate List for importing certificates and keys. To select any new certificates and keys you import, you need to restart or reconfigure this template."
        }
    }
    # end of Edge Gateway postreq section

    # common section with messages for all scenarios
    message troubleshooting "You can find common troubleshooting tips on the Help tab or in the deployment guide."
}
text {
    intro "Welcome to the Microsoft Exchange Server 2016 template"

    intro.hello "Introduction"
    intro.hello2 ""
    intro.hello3 ""
    intro.hello4 ""
    intro.check_for_updates "Check for updates"
    intro.analytics_opportunity "Additional features available"
    intro.wa_opportunity "Additional features available"
    intro.prereqs_1 "Prerequisites"
    intro.prereqs_2 ""
    intro.prereqs_3 ""
    intro.help "Do you want to see inline help?"

    deployment_scenario "Deployment Scenario"
    deployment_scenario.scenario "Which scenario describes how you will use the BIG-IP system?"
    deployment_scenario.scenario_1_help ""
    deployment_scenario.scenario_1_max_help ""
    deployment_scenario.scenario_2_help ""
    deployment_scenario.scenario_3_help ""
    deployment_scenario.apm_warning "CRITICAL"
    deployment_scenario.scenario_3_max_help ""

    analytics "Analytics"
    analytics.add_analytics "Do you want to enable Analytics to view application statistics?"
    analytics.about_analytics ""
    analytics.about_analytics_profiles ""
    analytics.important_analytics_profiles "IMPORTANT"
    analytics.create_new_analytics "Use the default Analytics profile or select a custom profile?"
    analytics.create_new_analytics_help ""
    analytics.analytics_profile "Which Analytics profile do you want to use?"
    analytics.analytics_profile_help ""

    apm "BIG-IP Access Policy Manager (APM)"
    apm.deploying_apm "Provide secure authentication to HTTP-based client access services with BIG-IP APM?"
    apm.about_apm_help ""
    apm.apm_profile "Do you want to create a new Access Profile or use an existing Access Profile?"
    apm.apm_profile_help ""
    apm.aaa_profile "Do you want to create a new AAA server, or use an existing AAA server?"
    apm.aaa_profile_help ""
    apm.login_domain "What is the FQDN of the Active Directory domain for your Exchange users?"
    apm.login_domain_help ""
    apm.active_dir_servers "Which Active Directory servers in your domain can this BIG-IP system contact?"
    apm.active_dir_servers.fqdn "FQDN"
    apm.active_dir_servers.addr "IP"
    apm.apm_binding_help ""
    apm.apm_ad_username_help ""
    apm.apm_active_dir_help ""
    apm.allow_anonymous_binding "Does your Active Directory domain allow anonymous binding?"
    apm.ad_username "Which Active Directory user with administrative permissions do you want to use?"
    apm.ad_password "What is the password associated with that account?"
    apm.provision_warning "IMPORTANT"
    apm.ad_monitor "How do you want to handle health monitoring for this pool?"
    apm.ad_monitor_help ""
    apm.ad_monitor_choice "Which monitor do you want to use?"
    apm.ad_monitor_user "What is the Common Name of a user account that can search Active Directory?"
    apm.ad_monitor_user_critical "CRITICAL"
    apm.ad_monitor_user_info ""
    apm.ad_monitor_password "What is the associated password?"
    apm.ad_monitor_password_info ""
    apm.ad_monitor_tree "What is the LDAP tree for this user account?"
    apm.ad_monitor_tree_info ""
    apm.ad_monitor_secure "Does your Active Directory domain require a secure protocol for communication?"
    apm.ad_monitor_secure_info ""
    apm.ad_monitor_interval "How many seconds between Active Directory health checks?"
    apm.ad_monitor_interval_info ""
    apm.logon_text "What text should appear in the user access logon prompt?"
    apm.logon_text_warning_help "WARNING"
    apm.logon_text_help ""
    apm.logging "Which APM logging profile do you want to use?"
    apm.logging_inline_help ""

    afm "BIG-IP Advanced Firewall Manager (AFM)"
    afm.policy "Do you want to use AFM network firewall and IP Intelligence to protect your application?"
    afm.policy_max ""
    afm.restrict_by_addr "Do you want to forbid access to your application from specific networks or IP addresses?"
    afm.restrict_max ""
    afm.allowed_addr "What IP or network addresses should be allowed to access your application?"
    afm.allowed_addr_max ""
    afm.restrict_by_reputation "How should the system control connections from networks suspected of malicious activity?"
    afm.restrict_by_reputation_max ""
    afm.restrict_by_reputation_log ""
    afm.restrict_by_reputation_warn "IMPORTANT"
    afm.staging_policy "Would you like to stage a policy for testing purposes?"
    afm.staging_policy_max ""
    afm.staging_policy1_max "CRITICAL"
    afm.security_logging "Which logging profile would you like to use?"
    afm.security_logging_max ""
    afm.security_logging1_max ""

    deployment "Tell us about your deployment"
    deployment.incoming_encrypted "Will incoming traffic arrive at this BIG-IP system encrypted or unencrypted?"
    deployment.incoming_encrypted_prereq1 "IMPORTANT"
    deployment.incoming_encrypted_prereq3 ""
    deployment.incoming_encrypted_lb_help ""
    deployment.incoming_encrypted_rec_help ""
    deployment.cert_help ""
    deployment.key_help ""
    deployment.ssl_warn_1 "WARNING:"
    deployment.ssl_warn_2 "NOTE:"
    deployment.chain_cert "Which intermediate certificate do you want to use?"
    deployment.chain_cert_help ""
    deployment.reencrypt_help ""
    deployment.reencrypt_2013 "Do you want to re-encrypt this traffic to your Mailbox Servers?"
    deployment.encrypt "Do you want to encrypt the traffic to your Mailbox Servers?"
    deployment.client_ssl_profile "Which Client SSL profile do you want to use?"
    deployment.client_ssl_profile_help ""
    deployment.server_ssl_profile "Which Server SSL profile do you want to use?"
    deployment.server_ssl_profile_help ""
    deployment.lan_or_wan "How should the system optimize client-side TCP connections to the BIG-IP LTM?"
    deployment.wan_lan_help ""
    deployment.cert "Which SSL certificate do you want to use?"
    deployment.key "Which SSL key do you want to use?"
    deployment.location "Where will your BIG-IP virtual servers be in relation to your Mailbox Servers?"
    deployment.location_help ""
    deployment.location_help1 ""
    deployment.snat "How have you configured routing on your Mailbox Servers?"
    deployment.snat_help ""
    deployment.automap_or_pool "What is the maximum number of concurrent users you expect per Mailbox Server?"
    deployment.snatpool_help ""
    deployment.snatpool_message ""
    deployment.snatpool "Create a new SNAT pool or use an existing one?"
    deployment.create_snatpool_help ""
    deployment.snatpool_members "Which IP addresses do you want to use for the SNAT pool?"
    deployment.snatpool_members_help ""
    deployment.snatpool_members.addr "IP address"
    deployment.combined_or_seperate_ips "Do you want to use a single IP address for all Mailbox Server connections?"
    deployment.combined_or_seperate_ips_help ""
    deployment.service_distribution "How are you distributing the client access service protocols between servers?"
    deployment.service_distribution_help ""

    services "Tell us about which services you are deploying"
    services.combined_addr "What IP address do you want to use for your virtual servers?"
    services.combined_addr_help ""
    services.servers "What are the IP addresses of your Mailbox Servers?"
    services.servers_addr_help ""
    services.servers.addr "IP address"
    services.servers.ratio "Ratio"
    services.servers.connection_limit "Connection Limit"
    services.servers.priority "Priority"
    services.advanced_pool_settings "Do you want to customize your server pool settings?"
    services.advanced_pool_settings_help ""
    services.lb_method_choice "Which load balancing method do you want to use?"
    services.lb_method_choice_help ""
    services.use_pga "Do you want to give priority to specific groups of servers?"
    services.use_pga_help ""
    services.min_active_members "What is the minimum number of active members in a group?"
    services.min_active_members_help ""
    services.tcp_request_queuing_enable_question "Do you want the BIG-IP system to queue TCP requests?"
    services.tcp_request_queuing_enable_question_help ""
    services.note "IMPORTANT"
    services.tcp_request_queue_length "What is the maximum number of TCP requests for the queue?"
    services.tcp_request_queue_timeout "How many milliseconds should requests remain in the queue?"
    services.restrict_eac_apm "Should BIG-IP APM restrict EAC access to members of the Exchange Organization Management Security Group?"
    services.restrict_eac_apm_help ""
    services.deploying_owa "Are you deploying Outlook Web App (includes ECP)?"
    services.deploying_owa_help ""
    services.owa_smartcard_auth "Which type of authentication do Outlook Web App clients use?"
    services.owa_smartcard_auth_help ""
    services.ssl_chain_cert "Which certificate from a CA trusted by this BIG-IP system for client-side processing of smart card authentication do you want to use?"
    services.ssl_chain_cert_help ""
    services.owa_ntlm_sso "Which type of authentication have you configured on the Outlook Web App virtual directory?"
    services.owa_ntlm_sso_help ""
    services.owa_login_timeout "What should the timeout be for inactive OWA sessions (in minutes)?"
    services.owa_login_timeout_help ""
    services.owa_logon_options "Would you like to display the OWA computer type and light version options on the APM logon page?"
    services.owa_logon_options_2013_help ""
    services.owa_logon_options_2013_help2 ""
    services.owa_addr "What IP address do you want to use for the OWA virtual server?"
    services.owa_addr_help ""
    services.owa_servers "What are the IP addresses of your OWA servers?"
    services.owa_servers.addr "IP address"
    services.owa_servers.ratio "Ratio"
    services.owa_servers.connection_limit "Connection Limit"
    services.owa_servers.priority "Priority"
    services.owa_servers_help ""
    services.deploying_oa "Are you deploying Microsoft Outlook, including EWS and OAB?"
    services.deploying_mapi "Which protocol(s) will Microsoft Outlook use to connect to Exchange?"
    services.deploying_mapi_help ""
    services.mapi_addr "What IP address do you want to use for the MAPI virtual server?"
    services.mapi_addr_help ""
    services.mapi_servers "What are the IP addresses of your MAPI servers?"
    services.mapi_servers_help ""
    services.mapi_servers.addr "IP address"
    services.mapi_servers.ratio "Ratio"
    services.mapi_servers.connection_limit "Connection Limit"
    services.mapi_servers.priority "Priority"
    services.mapi_irule_1_note "IMPORTANT"
    services.mapi_irule_2_note ""
    services.mapi_irules "Do you want to add any custom iRules to this virtual server?"
    services.deploying_oa_help ""
    services.deploying_oa_prereq1 "IMPORTANT"
    services.oa_addr "What IP address do you want to use for the Outlook Anywhere virtual server?"
    services.oa_addr_help ""
    services.oa_servers "What are the IP addresses of your Outlook Anywhere servers?"
    services.oa_servers_help ""
    services.oa_servers.addr "IP address"
    services.oa_servers.ratio "Ratio"
    services.oa_servers.connection_limit "Connection Limit"
    services.oa_servers.priority "Priority"
    services.oa_ntlm_auth "Which type of authentication do Outlook clients use?"
    services.oa_ntlm_auth_help ""
    services.ntlm_sso_version "What version of NTLM authentication does your deployment require?"
    services.ntlm_sso_version_help ""
    services.oa_ntlm_auth_warning1 "CRITICAL"
    services.oa_ntlm_auth_warning2 ""
    services.ntlm_machine_account "Which NTLM machine account should be used for Kerberos delegation?"
    services.ntlm_machine_account_help ""
    services.ntlm_kdc "What is the Kerberos Key Distribution Center IP or FQDN?"
    services.ntlm_kdc_help ""
    services.ntlm_kdc_warning "IMPORTANT"
    services.ntlm_realm "What is the name of the Kerberos Realm?"
    services.ntlm_realm_help ""
    services.ntlm_user "What is the user name for the Active Directory delegation account you created?"
    services.ntlm_user_help ""
    services.ntlm_passwd "What is the associated password?"
    services.ntlm_spn_pattern "How do  you want to construct the Kerberos ticket request?"
    services.ntlm_spn_pattern_help ""
    services.ntlm_dns_lookup_warning "IMPORTANT"
    services.ntlm_host_header_warning "IMPORTANT"
    services.deploying_ews_warning1 ""
    services.deploying_ews_warning2 ""
    services.ews_addr "What IP address do you want to use for the Exchange Web Services virtual server?"
    services.deploying_ews_help ""
    services.ews_servers "What are the IP addresses of your EWS servers?"
    services.ews_servers_help ""
    services.ews_servers.addr "IP address"
    services.ews_servers.ratio "Ratio"
    services.ews_servers.connection_limit "Connection Limit"
    services.ews_servers.priority "Priority"
    services.deploying_as "Are you deploying ActiveSync?"
    services.deploying_as_help ""
    services.as_addr "What IP address do you want to use for the ActiveSync virtual server?"
    services.deploying_as_help1 ""
    services.as_servers "What are the IP addresses of your ActiveSync servers?"
    services.as_servers_help ""
    services.as_servers.addr "IP address"
    services.as_servers.ratio "Ratio"
    services.as_servers.connection_limit "Connection Limit"
    services.as_servers.priority "Priority"
    services.deploying_ad "Are you deploying Autodiscover?"
    services.deploying_ad_help ""
    services.deploying_ad_prereq1 "CRITICAL"
    services.ad_addr "What IP address do you want to use for the Autodiscover virtual server?"
    services.deploying_ad_help1 ""
    services.ad_servers "What are the IP addresses of your Autodiscover servers?"
    services.ad_servers_help ""
    services.ad_servers.addr "IP address"
    services.ad_servers.ratio "Ratio"
    services.ad_servers.connection_limit "Connection Limit"
    services.ad_servers.priority "Priority"
    services.deploying_pop3 "Are you deploying POP3?"
    services.deploying_pop3_help ""
    services.deploying_pop3_note "IMPORTANT"
    services.deploying_pop3_note_ssloffload ""
    services.pop3_addr "What IP address do you want to use for the POP3 virtual server?"
    services.deploying_pop3_help1 ""
    services.pop3_servers "What are the IP addresses of your POP3 servers?"
    services.pop3_servers_help ""
    services.pop3_servers.addr "IP address"
    services.pop3_servers.ratio "Ratio"
    services.pop3_servers.connection_limit "Connection Limit"
    services.pop3_servers.priority "Priority"
    services.deploying_imap4 "Are you deploying IMAP4?"
    services.deploying_imap4_help ""
    services.deploying_imap4_note "IMPORTANT"
    services.deploying_imap4_note_ssloffload ""
    services.imap4_addr "What IP address do you want to use the IMAP4 virtual server?"
    services.deploying_imap4_help1 ""
    services.imap4_servers "What are the IP addresses of your IMAP4 servers?"
    services.imap4_servers_help ""
    services.imap4_servers.addr "IP address"
    services.imap4_servers.ratio "Ratio"
    services.imap4_servers.connection_limit "Connection Limit"
    services.imap4_servers.priority "Priority"
    services.combined_irule_1_note "IMPORTANT"
    services.combined_irule_2_note ""
    services.combined_irules "Do you want to add any iRules to this combined virtual server?"
    services.owa_irule_1_note "IMPORTANT"
    services.owa_irule_2_note ""
    services.owa_irules "Do you want to add any custom iRules to this virtual server?"
    services.oa_irule_1_note "IMPORTANT"
    services.oa_irule_2_note ""
    services.oa_irules "Do you want to add any custom iRules to this virtual server?"
    services.ews_irule_1_note "IMPORTANT"
    services.ews_irule_2_note ""
    services.ews_irules "Do you want to add any custom iRules to this virtual server?"
    services.as_irule_1_note "IMPORTANT"
    services.as_irule_2_note ""
    services.as_irules "Do you want to add any custom iRules to this virtual server?"
    services.ad_irule_1_note "IMPORTANT"
    services.ad_irule_2_note ""
    services.ad_irules "Do you want to add any custom iRules to this virtual server?"

    monitors "Server Health Monitors"
    monitors.default_or_advanced "Do you want to create external monitors for client access services?"
    monitors.advanced_monitor_description ""
    monitors.advanced_monitor_prereq1 "IMPORTANT"
    monitors.snmp_community_string "What is the SNMP community string for your Mailbox servers?"
    monitors.snmp_community_string_help ""
    monitors.username "Which mailbox account should be used for the external monitors?"
    monitors.username_help ""
    monitors.second_username "Which mailbox account should be used for the second set of monitors?"
    monitors.passwd "What is the password for that mailbox account?"
    monitors.passwd_help ""
    monitors.second_passwd "What is the password for that mailbox account?"
    monitors.second_mailbox_account "Do you want to monitor a second mailbox?"
    monitors.second_mailbox_account_help ""
    monitors.account_domain "What is the domain name of the user account for the monitors?"
    monitors.account_domain_help ""
    monitors.second_account_domain "What is the domain name of the user account for the second set of monitors?"
    monitors.interval "How many seconds should pass between health checks?"
    monitors.monitor_interval_max_help ""
    monitors.using_single_domain "Are you using the same FQDN for all HTTP-based services?"
    monitors.using_single_domain_help ""
    monitors.single_domain "What is the FQDN for your HTTP-based client access services?"
    monitors.single_domain_help ""
    monitors.owa_domain "What is the FQDN for your OWA service?"
    monitors.mapi_domain "What is the FQDN for your MAPI service?"
    monitors.oa_domain "What is the FQDN for your Outlook Anywhere service?"
    monitors.ews_domain "What is the FQDN for your Exchange Web Services?"
    monitors.as_domain "What is the FQDN for your ActiveSync service?"
    monitors.ad_domain "What is the FQDN for your Autodiscover service?"

    edge_deployment "Tell us about your BIG-IP Access Policy Manager deployment"
    edge_deployment.addr "What IP address do you want to use for the BIG-IP APM virtual server?"
    edge_deployment.addr_help ""
    edge_deployment.cert "Which SSL certificate do you want to use?"
    edge_deployment.cert_help ""
    edge_deployment.key "Which SSL key do you want to use?"
    edge_deployment.key_help ""
    edge_deployment.chain_cert "Which intermediate certificate do you want to use?"
    edge_deployment.chain_cert_help ""
    edge_deployment.reencrypt_2013 "Do you want to re-encrypt the traffic that will be forwarded to your BIG-IP LTM?"
    edge_deployment.reencrypt_note "IMPORTANT"
    edge_deployment.client_ssl_profile "Which Client SSL profile do you want to use?"
    edge_deployment.client_ssl_profile_help ""
    edge_deployment.server_ssl_profile "Which Server SSL profile do you want to use?"
    edge_deployment.server_ssl_profile_help ""
    edge_deployment.insecure_compatible "Is the remote BIG-IP LTM receiving this traffic using a self-signed or default certificate for decryption, or is the certificate signed by a CA?"
    edge_deployment.insecure_compatible_help ""
    edge_deployment.vs_addr "What is the virtual IP address on the remote BIG-IP system to which you will forward traffic?"
    edge_deployment.vs_addr_help ""
    edge_deployment.lan_or_wan "Will clients be connecting to this BIG-IP virtual server primarily over a LAN or a WAN?"
    edge_deployment.wan_lan_help ""
    edge_deployment.restrict_eac_apm "Should BIG-IP APM restrict EAC access to members of the Exchange Organization Management Security Group?"
    edge_deployment.restrict_eac_apm_help ""
    edge_deployment.owa_smartcard_auth "Which type of authentication do Outlook Web App clients use?"
    edge_deployment.owa_smartcard_auth_help ""
    edge_deployment.ssl_chain_cert "Which certificate from a CA trusted by this BIG-IP system for client-side processing of smart card authentication do you want to use?"
    edge_deployment.ssl_chain_cert_help ""
    edge_deployment.owa_ntlm_sso "Which type of authentication have you configured on the Outlook Web App virtual directory?"
    edge_deployment.owa_ntlm_sso_help ""
    edge_deployment.owa_login_timeout "What should the timeout be for inactive OWA sessions (in minutes)?"
    edge_deployment.owa_login_timeout_help ""
    edge_deployment.owa_logon_options "Would you like to display the OWA computer type and light version options on the APM logon page?"
    edge_deployment.owa_logon_options_2013_help ""
    edge_deployment.owa_logon_options_2013_help2 ""
    edge_deployment.ntlm_sso_version "What version of NTLM authentication does your deployment require?"
    edge_deployment.ntlm_sso_version_help ""
    edge_deployment.oa_ntlm_auth "Which type of authentication do Outlook clients use?"
    edge_deployment.oa_ntlm_auth_help ""
    edge_deployment.oa_ntlm_auth_warning1 "CRITICAL"
    edge_deployment.oa_ntlm_auth_warning2 ""
    edge_deployment.ntlm_machine_account "Which NTLM machine account should be used for Kerberos delegation?"
    edge_deployment.ntlm_machine_account_help ""
    edge_deployment.ntlm_kdc "What is the Kerberos Key Distribution Center IP or FQDN?"
    edge_deployment.ntlm_kdc_help ""
    edge_deployment.ntlm_kdc_warning "IMPORTANT"
    edge_deployment.ntlm_realm "What is the name of the Kerberos Realm?"
    edge_deployment.ntlm_realm_help ""
    edge_deployment.ntlm_user "What is the user name for the Active Directory delegation account you created?"
    edge_deployment.ntlm_user_help ""
    edge_deployment.ntlm_passwd "What is the associated password?"
    edge_deployment.ntlm_passwd_help ""
    edge_deployment.irules "Do you want to add any custom iRules to this configuration?"
    edge_deployment.irule_1_note "IMPORTANT"
    edge_deployment.irule_2_note ""

    postreq "Additional Steps"
    postreq.postreq_1 "Modifying your DNS Settings"
    postreq.autodiscover_dns ""
    postreq.autodiscover_dns_srv ""
    postreq.autodiscover_dns_a ""
    postreq.autodiscover_dns_edge ""
    postreq.autodiscover_dns_srv_edge ""
    postreq.autodiscover_dns_a_edge ""
    postreq.outlookanywhere_dns ""
    postreq.configure_cas "Configure your Mailbox Servers"
    postreq.ssloffload ""
    postreq.ssloffload_edge ""
    postreq.oa_note ""
    postreq.pop3_note ""
    postreq.pop3_note_ssloffload ""
    postreq.imap4_note ""
    postreq.imap4_note_ssloffload ""
    postreq.insecure_ssl_key_or_cert "CRITICAL"
    postreq.insecure_ssl_key_or_cert_edge "CRITICAL"
    postreq.troubleshooting "Troubleshooting"
}

            }
            role-acl { admin manager resource-admin }
            run-as none
        }
    }
    requires-bigip-version-max none
    requires-bigip-version-min 11.3
    requires-modules { }
}
