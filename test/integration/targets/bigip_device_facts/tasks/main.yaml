---

- import_tasks: setup.yaml

- name: Select multiple facts
  bigip_device_facts:
    include:
      - interfaces
      - system-info
  register: result

- name: Assert Select multilple facts
  assert:
    that:
      - result is success
      - "'interfaces' in result"
      - "'system_info' in result"

- name: Select partition facts
  bigip_device_facts:
    include:
      - partitions
  register: result

- name: Assert Select partition facts
  assert:
    that:
      - result is success
      - result.partitions | selectattr("name", "match", "part1") | map(attribute='default_route_domain') | first == 0
      - result.partitions | json_query("[?name=='part1'].default_route_domain") | first == 0

- name: Select route domain facts
  bigip_device_facts:
    include:
      - route-domains
  register: result

- name: Assert Select route domain facts
  assert:
    that:
      - result is success
      - result.route_domains | selectattr("name", "match", "foo") | map(attribute='id') | first == 100
      - result.route_domains | json_query("[?name=='foo'].id") | first == 100

- name: Select system-info facts
  bigip_device_facts:
    include:
      - system-info
  register: result

- name: Assert Select system-info facts
  assert:
    that:
      - result is success
      - result.system_info.product_code == 'BIG-IP'

- name: Select interface facts
  bigip_device_facts:
    include:
      - interfaces
  register: result

- name: Assert Select interface facts
  assert:
    that:
      - result is success
      - result.interfaces | selectattr("name", "match", "1.0") | map(attribute='mtu') | first == 1500
      - result.interfaces | json_query("[?name=='1.0'].mtu") | first == 1500

- name: Select internal data group facts
  bigip_device_facts:
    include:
      - internal-data-groups
  register: result

- name: Assert Select internal data group facts
  assert:
    that:
      - result is success
      - result.internal_data_groups | selectattr("name", "match", "aol") | map(attribute='type') | first == 'ip'
      - result.internal_data_groups | json_query("[?name=='aol'].type") | first == 'ip'

- name: Select virtual server facts
  bigip_device_facts:
    include:
      - virtual-servers
  register: result

- name: Assert Select virtual server facts
  assert:
    that:
      - result is success
      - result.virtual_servers | selectattr("name", "match", "virtual1") | map(attribute='description') | first == 'my virtual1'
      - result.virtual_servers | json_query("[?name=='virtual1'].description") | first == 'my virtual1'

- name: Select virtual address facts
  bigip_device_facts:
    include:
      - virtual-addresses
  register: result

- name: Assert Select virtual address facts
  assert:
    that:
      - result is success
      - result.virtual_addresses | selectattr("name", "match", "2.3.4.5") | map(attribute='address') | first == '2.3.4.5'
      - result.virtual_addresses | json_query("[?name=='2.3.4.5'].address") | first == '2.3.4.5'

- name: Select device group facts
  bigip_device_facts:
    include:
      - device-groups
  register: result

- name: Assert Select device group facts
  assert:
    that:
      - result is success
      - result.device_groups | selectattr("name", "match", "mydg1") | map(attribute='autosync_enabled') | first == 'no'
      - result.device_groups | json_query("[?name=='mydg1'].autosync_enabled") | first == 'no'

- name: Select ssl-cert facts
  bigip_device_facts:
    include:
      - ssl-certs
  register: result

- name: Assert Select ssl-cert facts
  assert:
    that:
      - result is success
      - result.ssl_certs | selectattr("name", "match", "ca-bundle.crt") | map(attribute='key_type') | first == 'rsa-public'
      - result.ssl_certs | json_query("[?name=='ca-bundle.crt'].key_type") | first == 'rsa-public'

- name: Select ssl-key facts
  bigip_device_facts:
    include:
      - ssl-keys
  register: result

- name: Assert Select ssl-key facts
  assert:
    that:
      - result is success
      - result.ssl_keys | selectattr("name", "match", "default.key") | map(attribute='security_type') | first == 'normal'
      - result.ssl_keys | json_query("[?name=='default.key'].security_type") | first == 'normal'

- name: Select device facts
  bigip_device_facts:
    include:
      - devices
  register: result

- name: Assert Select device facts
  assert:
    that:
      - result is success
      - result.devices | selectattr("name", "match", "bigip1") | map(attribute='hostname') | first == 'bigip1'
      - result.devices | json_query("[?name=='bigip1'].hostname") | first == 'bigip1'

- name: Select client-ssl-profile facts
  bigip_device_facts:
    include:
      - client-ssl-profiles
  register: result

- name: Assert Select client-ssl-profile facts
  assert:
    that:
      - result is success
      - result.client_ssl_profiles | selectattr("name", "match", "clientssl") | map(attribute='ciphers') | first | first == 'DEFAULT'
      - result.client_ssl_profiles | json_query("[?name=='clientssl'].ciphers") | first | first == 'DEFAULT'

- name: Select traffic group facts
  bigip_device_facts:
    include:
      - traffic-groups
  register: result

- name: Assert Select traffic group facts
  assert:
    that:
      - result is success
      - result.traffic_groups | selectattr("name", "match", "tg1") | map(attribute='auto_failback_time') | first == 60
      - result.traffic_groups | json_query("[?name=='tg1'].auto_failback_time") | first == 60

- name: Select node facts
  bigip_device_facts:
    include:
      - nodes
  register: result

- name: Assert Select node facts
  assert:
    that:
      - result is success
      - result.nodes | selectattr("name", "match", "5.6.7.8") | map(attribute='connection_limit') | first == 100
      - result.nodes | json_query("[?name=='5.6.7.8'].connection_limit") | first == 100

- name: Select trunk facts
  bigip_device_facts:
    include:
      - trunks
  register: result

- name: Assert Select trunk facts
  assert:
    that:
      - result is success
      - result.trunks | selectattr("name", "match", "trunk1") | map(attribute='description') | first == "my trunk"
      - result.trunks | json_query("[?name=='trunk1'].description") | first == "my trunk"

- name: Select selfip facts
  bigip_device_facts:
    include:
      - self-ips
  register: result

- name: Assert Select selfip facts
  assert:
    that:
      - result is success
      - result.self_ips | selectattr("name", "match", "net1") | map(attribute='floating') | first == "no"
      - result.self_ips | json_query("[?name=='net1'].floating") | first == "no"

- name: Select irule facts
  bigip_device_facts:
    include:
      - irules
  register: result

- name: Assert Select irule facts
  assert:
    that:
      - result is success
      - result.irules | selectattr("name", "match", "_sys_https_redirect") | map(attribute='ignore_verification') | first == "no"
      - result.irules | json_query("[?name=='_sys_https_redirect'].ignore_verification") | first == "no"

- name: Select ltm-pool facts
  bigip_device_facts:
    include:
      - ltm-pools
  register: result

- name: Assert Select ltm-pool facts
  assert:
    that:
      - result is success
      - result.ltm_pools | selectattr("name", "match", "pool1") | map(attribute='lb_method') | first == "round-robin"
      - result.ltm_pools | json_query("[?name=='pool1'].lb_method") | first == "round-robin"

- name: Select software-volume facts
  bigip_device_facts:
    include:
      - software-volumes
  register: result

- name: Assert Select software-volume facts
  assert:
    that:
      - result is success
      - result.software_volumes | selectattr("name", "match", "HD1.1") | map(attribute='active') | first == "yes"
      - result.software_volumes | json_query("[?name=='HD1.1'].active") | first == "yes"
      - "'HD1.1' not in result.software_volumes | json_query(\"[?active!='yes'].name\")"

- name: Select vlans facts
  bigip_device_facts:
    include:
      - vlans
  register: result

- name: Assert Select vlans facts
  assert:
    that:
      - result is success
      - result.vlans | selectattr("name", "match", "alice") | map(attribute='mtu') | first == 1500
      - result.vlans | json_query("[?name=='alice'].mtu") | first == 1500
      - "'alice' not in result.vlans | json_query(\"[?vlan_id!=`3605`].name\")"

- name: Select provision-info facts
  bigip_device_facts:
    include:
      - provision-info
  register: result

- name: Assert Select provision-info facts
  assert:
    that:
      - result is success
      - result.provision_info | selectattr("name", "match", "ltm") | map(attribute='level') | first == "nominal"
      - result.provision_info | json_query("[?name=='ltm'].level") | first == "nominal"
      - "'ltm' not in result.provision_info | json_query(\"[?level=='none'].name\")"

- name: Try an invalid provision-info include choice
  bigip_device_facts:
    include:
      - provision
  register: result
  failed_when: result is success

- name: Assert Try an invalid provision-info include choice
  assert:
    that:
      - "'options are invalid: provision' in result.msg"
      - result is success

- name: Select all facts
  bigip_device_facts:
    include:
      - client-ssl-profiles
      - device-groups
      - devices
      - interfaces
      - internal-data-groups
      - irules
      - ltm-pools
      - nodes
      - provision-info
      - self-ips
      - software-volumes
      - ssl-certs
      - ssl-keys
      - system-info
      - traffic-groups
      - trunks
      - virtual-addresses
      - virtual-servers
      - vlans
  register: result

- name: Assert Select all facts
  assert:
    that:
      - result is success
      - "'client_ssl_profiles' in result"
      - "'device_groups' in result"
      - "'devices' in result"
      - "'interfaces' in result"
      - "'internal_data_groups' in result"
      - "'irules' in result"
      - "'ltm_pools' in result"
      - "'nodes' in result"
      - "'provision_info' in result"
      - "'self_ips' in result"
      - "'software_volumes' in result"
      - "'ssl_certs' in result"
      - "'ssl_keys' in result"
      - "'system_info' in result"
      - "'traffic_groups' in result"
      - "'trunks' in result"
      - "'virtual_addresses' in result"
      - "'virtual_servers' in result"
      - "'vlans' in result"

- name: Select all facts, single keyword
  bigip_device_facts:
    include:
      - all
  register: result

- name: Assert Select all facts, single keyword
  assert:
    that:
      - result is success
      - "'client_ssl_profiles' in result"
      - "'device_groups' in result"
      - "'devices' in result"
      - "'interfaces' in result"
      - "'internal_data_groups' in result"
      - "'irules' in result"
      - "'ltm_pools' in result"
      - "'nodes' in result"
      - "'provision_info' in result"
      - "'self_ips' in result"
      - "'software_volumes' in result"
      - "'ssl_certs' in result"
      - "'ssl_keys' in result"
      - "'system_info' in result"
      - "'traffic_groups' in result"
      - "'trunks' in result"
      - "'virtual_addresses' in result"
      - "'virtual_servers' in result"
      - "'vlans' in result"

- name: Select all facts, except trunks
  bigip_device_facts:
    include:
      - all
      - "!trunks"
  register: result

- name: Assert Select all facts, except trunks
  assert:
    that:
      - result is success
      - "'client_ssl_profiles' in result"
      - "'device_groups' in result"
      - "'devices' in result"
      - "'interfaces' in result"
      - "'internal_data_groups' in result"
      - "'irules' in result"
      - "'ltm_pools' in result"
      - "'nodes' in result"
      - "'provision_info' in result"
      - "'self_ips' in result"
      - "'software_volumes' in result"
      - "'ssl_certs' in result"
      - "'ssl_keys' in result"
      - "'system_info' in result"
      - "'traffic_groups' in result"
      - "'trunks' not in result"
      - "'virtual_addresses' in result"
      - "'virtual_servers' in result"
      - "'vlans' in result"

- import_tasks: software-images.yaml
  when: software_image is defined
  tags:
    - software-images

- import_tasks: hotfix-images.yaml
  when: hotfix_image is defined
  tags:
    - hotfix-images

- import_tasks: teardown.yaml

- import_tasks: issue-00082.yaml
  tags: issue-00082

- import_tasks: issue-00149.yaml
  tags: issue-00149

- import_tasks: issue-00289.yaml
  tags: issue-00289

- import_tasks: issue-00327.yaml
  tags: issue-00327

- import_tasks: issue-00700.yaml
  tags: issue-00700

- import_tasks: issue-00799.yaml
  tags:
    - issue-00799
    - vcmp-no-slots
    - vcmp-slots

- import_tasks: issue-00819.yaml
  tags: issue-00819

- import_tasks: issue-00897.yaml
  tags: issue-00897
