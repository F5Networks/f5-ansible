cli script f5.iapp.1.3.0.cli {
 
#  Initialization proc for all templates.
#  Parameters "start" and "stop" or "end".
proc iapp_template { action } {
    set lev [tmsh::get_field_value [lindex [tmsh::get_config sys scriptd \
        log-level] 0] log-level]
    switch $action {
        start {
            set ::clock_clicks [clock clicks]
            if { $lev eq {debug} } {
                puts "\nStarting iApp $tmsh::app_template_name [clock format \
                    [clock seconds] -format {%m/%d/%Y %T}]\n"
            }
            tmsh::log_level $lev
            tmsh::log info "Starting iApp template $tmsh::app_template_name"
        }
        stop -
        end {
            if { $lev eq {debug} } {
                if { [info exists ::substa_debug] } {
                    puts $::substa_debug
                }
                puts "\nEnding iApp $tmsh::app_template_name [clock format \
                    [clock seconds] -format {%m/%d/%Y %T}]\nRun time [expr \
                    { ([clock clicks] - $::clock_clicks) / 1000 }] msec\n"
            }
            tmsh::log info "Ending iApp template $tmsh::app_template_name"
        }
    }
    set ::HTTP_CONTENT_TYPES { application/(css\|css-stylesheet\|doc\|excel\|javascript\|json\|lotus123\|mdb\|mpp\|msaccess\|msexcel\|ms-excel\|mspowerpoint\|ms-powerpoint\|msproject\|msword\|ms-word\|photoshop\|postscript\|powerpoint\|ps\|psd\|quarkexpress\|rtf\|txt\|visio\|vnd\\.excel\|vnd\\.msaccess\|vnd\\.ms-access\|vnd\\.msexcel\|vnd\\.ms-excel\|vnd\\.mspowerpoint\|vnd\\.ms-powerpoint\|vnd\\.ms-pps\|vnd\\.ms-project\|vnd\\.msword\|vnd\\.ms-word\|vnd\\.ms-works\|vnd\\.ms-works-db\|vnd\\.powerpoint\|vnd\\.visio\|vnd\\.wap\\.cmlscriptc\|vnd\\.wap\\.wmlc\|vnd\\.wap\\.xhtml\\+xml\|vnd\\.word\|vsd\|winword\|wks\|word\|x-excel\|xhtml\\+xml\|x-java-jnlp-file\|x-javascript\|x-json\|x-lotus123\|xls\|x-mdb\|xml\|x-mscardfile\|x-msclip\|x-msexcel\|x-ms-excel\|x-mspowerpoint\|x-msproject\|x-ms-project\|x-msword\|x-msworks-db\|x-msworks-wps\|x-photoshop\|x-postscript\|x-powerpoint\|x-ps\|x-quark-express\|x-rtf\|x-vermeer-rpc\|x-visio\|x-vsd\|x-wks\|x-word\|x-xls\|x-xml) image/(photoshop\|psd\|x-photoshop\|x-vsd) text/(css\|html\|javascript\|json\|plain\|postscript\|richtext\|rtf\|vnd\\.wap\\.wml\|vnd\\.wap\\.wmlscript\|wap\|wml\|x-component\|xml\|x-vcalendar\|x-vcard) }
}

proc iapp_is { args } {
    set up_var [lindex $args 0]
    upvar $up_var var
    if { [info exists var] } {
        foreach val [lrange $args 1 end] {
            if { [subst $var] eq $val } {
                return 1
            }
        }
    }
    return 0
}

proc iapp_substa { args } {
    upvar substa_in  argx \
          substa_out rval
    set   argx $args

    # check the explicit value first.
    # multiple layers of variable substitution requires multiple subst.
    # error occurs here if any of the substituted variables do not exist
    # valid wildcard (*) array entries will fail here first.
    uplevel {
        append ::substa_debug "\n$substa_in"
        if { [info exists [set substa_in]] } {
            set substa_out [subst $$substa_in]
            set substa_out [subst $substa_out]
        } else {
            # since explicit value did not exist, try a wildcard value.
            # substitute "*" as the array key and repeat.
            set substa_tmp [split $substa_in "()"]
            set substa_in "[lindex $substa_tmp 0](*)"
            append ::substa_debug "*"
            if { [info exists [set substa_in]] } {
                set substa_out [subst $$substa_in]
                set substa_out [subst $substa_out]
            } else {
                error "substa \"$substa_in\" array value not found"
            }
        }
    }
    return $rval
}

proc iapp_conf { args } {

    # Return value $object_name is set to the first word in $arg that
    # contains an underscore, since the position of the object name in
    # tmsh syntax is not consistent.
    set args [join $args]
    set object_name [lindex $args [lsearch -glob $args "*_*"]]

    # Global array ::tmsh_history persists between calls to iapp_conf
    # in order to suppress duplicate commands.
    if { ![info exists ::tmsh_history($args)] } {
        set ::tmsh_history($args) 1
        iapp_debug $args
        switch -exact -- [string range $args 0 5] {
            create { tmsh::create [string range $args 7 end] }
            modify { tmsh::modify [string range $args 7 end] }
            delete { tmsh::delete [string range $args 7 end] }
            default { error "iapp_conf illegal parameter" }
        }
    }
    return $object_name
}

proc iapp_make_safe_password { password } {
    return [string map { \' \\\' \" \\\" \{ \\\{ \} \\\} \; \\\; \| \\\| \# \\\# \  \\\  \\ \\\\ } $password]
}

proc iapp_pull { loc items_list } {
    upvar $items_list items
    if { [set item [lindex $items $loc]] != "" } {
        set items [lreplace $items $loc $loc]
    }
    return $item
}

proc iapp_process_flags { flags_array args_list } {
    upvar $flags_array flags
    upvar $args_list args

    if { [set dubdash [lsearch $args "--"]] != -1 } {
        set args [lreplace $args $dubdash $dubdash];
    } else {
        set dubdash end
    }

    foreach flag [array names flags] {
        while { [set ptr [lsearch [lrange $args 0 $dubdash] $flag]] != -1 } {
            set args [lreplace $args $ptr $ptr];

            # we want to run the code in the flags_array at the calling
            # proc's level so that the variables that it sets up are
            # available there.
            set access_var [format "$%s(%s)" $flags_array $flag]
            set command [subst -nocommands { set ptr $ptr ; subst $access_var }]

            uplevel 1 $command
        }
    }
    return $args
}

proc iapp_tmos_version { args } {
    # if $::version equals "", it might just mean that it hasn't been
    # initialized yet - use a global variable so that subsequent comparisons
    # don't have to fetch this from the MCP
    if { ![info exists ::version] || $::version eq "" } {
        if { [catch { set version_blob [tmsh::show sys version] } err] } {
            tmsh::log err "unable to retrieve TMOS version"
            error "unable to retrieve TMOS version"
        }
        # the first and last few lines of this output can be skipped because
        # they are either blank or don't represent key/value pairs
        # TODO: this won't work for hotfixes
        foreach line [string trim [lrange [split $version_blob "\n"] 3 end-2]] {
            set key [lindex $line 0]
            if { $key eq "Version" } {
                set ::cversion [lindex $line 1]
                break
            }
        }
    }

    if { $::cversion eq "" } {
        tmsh::log err "unable to determine TMOS version"
        error "unable to determine TMOS version"
    }

    # if no op+version was specified, just return the version
    if { $args eq "" } { return $::cversion }
    if { [llength $args] > 2 } {
        error "Too many arguments"
    }

    set op [lindex $args 0]; # operator
    set NOTFOUND -1
    # constrain to valid operators - adding more is fine as long as
    # they're supported by [expr] (and makes sense)
    if { [lsearch -exact { < > <= >= == != } $op] == $NOTFOUND } {
        tmsh::log err "illegal operator: $op"
        error "illegal operator: $op"
    }

    set tversion [lindex $args 1]; # target version
    # one or two decimal digits, optionally followed by 0-2 complete groups of
    # dots followed by one or two decimal digits with nothing before or after
    set regex {^\d{1,2}(\.\d{1,2}){0,2}$}
    if { ! [regexp -- $regex $tversion] } {
        tmsh::log err "cannot parse version from: $tversion"
        error "cannot parse version from: $tversion"
    }

    set cversion $::cversion; # current version
    # p=>prefix, c=>current, t=>target
    foreach p { c t } {
        # extract major/minor/point components
        scan [set [set p]version] "%d.%d.%d" [set p]mjr [set p]mnr [set p]pnt
        # ensure that these are each set to at least 0
        foreach level { mjr mnr pnt } {
            if { ! [info exists [set p]${level}] } { set [set p]${level} 0 }
        }
        # turn them into one big number that we can compare
        # leave room in-between just to be safe
        set [set p]num [expr {
            [set [set p]mjr]*1000000 +
            [set [set p]mnr]*10000 +
            [set [set p]pnt]*100
        }]
    }
    # a simple numeric comparison is all that is needed at this point
    return [eval expr $cnum $op $tnum ]
}

proc iapp_safe_display { args } {
    # strings sent to APL must be truncated to 65535 bytes, see BZ435592
    if { [string length [set [set args]]] > 65535 } {
        set last_newline [string last "\n" [set [set args]] 65500]
        return "[string range [set [set args]] 0 $last_newline]Error: Too many items for display"
    } else {
        return [set [set args]]
    }
}

proc iapp_get_items { args } {

    # Set default values.
    set error_msg  "iapp_get_items $args:"
    set do_binary  0
    set nocomplain 0
    set items      ""
    set join_char  "\n"
    set recursive  "recursive"
    set com_dir    "/Common"
    set loc_dir    "[tmsh::pwd]"

    # Set up flag-related work.
    array set flags  {
        -exists      { [set do_binary 1] }
        -nocomplain  { [set nocomplain 1] }
        -list        { [set join_char " "] }
        -norecursive { [set recursive ""] }
        -local       { [set com_dir   ""] }
        -dir         { [set loc_dir      [iapp_pull $ptr args]] }
        -filter      { [set filter_field [iapp_pull $ptr args]] \
                       [set filter_op    [iapp_pull $ptr args]] \
                       [set filter_value [iapp_pull $ptr args]] }
    }
    iapp_process_flags flags args

    # Get system object names in all requested directories.
    set save_dir [tmsh::pwd]
    foreach dir [lsort -unique "$com_dir $loc_dir"] {
        tmsh::cd $dir
        set tmsh_rval [catch {
            foreach obj [tmsh::get_config $args $recursive] {

                if { [info exists filter_field] } {
                    if { $filter_field eq "NAME" } {
                        set val [tmsh::get_name $obj]
                    } else {
                        # If get_field_value throws error, assume "none" value
                        if { [catch {
                            set val [tmsh::get_field_value $obj $filter_field]
                            # strip quotes per BZ442531
                            set val [string map {\" ""} $val]
                        }]} { set val none }
                    }
                    # Non-Tcl operators =~ and !~ added for extra flexibility
                    if { $filter_op eq "=~" } {
                        set filter "\[regexp \"$filter_value\" \"$val\"\]"
                    } elseif { $filter_op eq "!~" } {
                        set filter "!\[regexp \"$filter_value\" \"$val\"\]"
                    } else {
                        set filter "\\\"$val\\\" $filter_op \\\"$filter_value\\\""
                    }
                    # If filter fails, skip to next object
                    if { ![eval expr $filter] } {
                        continue
                    }
                }
                # string map catches /Common added by ltm profile ntlm,
                # which is unlike all other ltm profile return values.
                lappend items $dir/[string map {/Common/ ""} [tmsh::get_name $obj]]
            }
        } err ]
    }
    tmsh::cd $save_dir

    # array keys: $do_binary,$tmsh_rval,$nocomplain. Do not insert whitespace.
    array set rval {
        0,0,0 {[join $items $join_char]}
        0,0,1 {[join $items $join_char]}
        0,1,0 {[error "$error_msg $err"]}
        0,1,1 {}
        1,0,0 {[llength $items]}
        1,0,1 {[llength $items]}
        1,1,0 {0}
        1,1,1 {0}
    }

    return [subst $rval($do_binary,$tmsh_rval,$nocomplain)]
}

proc iapp_get_provisioned { args } {

    array set lnum {
        none      0
        minimum   1
        nominal   2
        dedicated 3
    }

    # Set defaults.
    set required minimum
    set do_binary 1

    # Set up flag-related work.
    array set flags  {
        -is          { [set required [iapp_pull $ptr args]] }
        -level       { [set do_binary 0] }
    }
    iapp_process_flags flags args
    if { [llength $args] > 1 } {
        error "Too many arguments"
    }

    # If checking for AM provisioning on TMOS < 11.4,
    # check for WAM provisioning instead.
    if { $args eq "am" && [iapp_tmos_version < 11.4] } {
        set args "wam"
    }

    # Get the provisioning level. If blank, assume none.
    # Proc only checks 1 module at a time, so only 1 object is returned.
    if { [catch {
        set obj [tmsh::get_config sys provision $args]
        set level [tmsh::get_field_value [lindex $obj 0] level]
    }]} { set level none }

    if { $do_binary } {
        return [expr { $lnum($level) >= $lnum($required) }]
    } else {
        return $level
    }
}

proc iapp_get_user { args } {

    # Set defaults.
    set do_role 0
    set do_binary 0

    # Set up flag-related work.
    array set flags  {
        -is_admin    { [set do_binary 1] }
    }
    iapp_process_flags flags args
    if { [llength $args] > 1 } {
        error "Too many arguments"
    }

    # Show user auth was introduced in v11.6
    set user "unknown"
    catch {
        set user [tmsh::show auth user field-fmt]
    } err
    if { $do_binary } {
        return [expr { $user == "unknown"
        || [string first "role " $user] == -1
        || [string first "role admin" $user] != -1
        || [string first "role resource-admin" $user] != -1 }]
    } else {
        return $user
    }
}

proc iapp_destination { args } {
    # Set defaults. Flag actions may overwrite defaults later.
    set route_domain    0
    set do_mask         0
    set port            0

    # Set up flag-based actions.
    array set flags  {
        -route_domain { [set route_domain [iapp_pull $ptr args]] }
        -mask         { [set do_mask 1] }
        -length       { [set cidr_bits [iapp_pull $ptr args]] }
    }

    if { [llength [set non_switches [iapp_process_flags flags args]]] > 2 } {
        error "Too many arguments"
    }
    if { [llength $non_switches] == 2 } { set port [lindex $non_switches 1] }
    set addr [lindex $non_switches 0]

    # Pull the route-domain off the addr string, but only use it as the
    # route domain if it wasn't overridden by -route_domain flag.
    if { [string first "%" $addr] != -1 } {
        if { $route_domain == 0 } {
            # route-domain is still default, so use value from addr string
            set route_domain [lindex [split $addr "%"] 1]
        }
        set addr [lindex [split $addr "%"] 0]
    }

    if { $do_mask } { ;# calculate a mask

        # Define the delta between ipv4 and ipv6.
        # length: ipv4 mask is 32 bits, ipv6 is 128 bits.
        # group: ipv4 is grouped in octets, ipv6 as 16 bit words.
        # format: ipv4 is decimal notation, ipv6 is hex.
        # format1 also has the delimiter, format2 does not.
        array set v {
            0,length  32
            0,group   8
            0,format1 d.
            0,format2 d
            1,length  128
            1,group   16
            1,format1 .4x:
            1,format2 .4x
        }

        # Detect a node name and convert it to an ip address, then detect IPv6.
        if { [string first / $addr] != -1 } {
            set node [lindex [tmsh::get_config ltm node $addr] 0]
            set addr [tmsh::get_field_value $node address]
        }
        set is_ipv6 [string match "*:*:*" $addr]

        # Soften result of an illegal -length parameter.
        if { ![info exists cidr_bits] || $cidr_bits > $v($is_ipv6,length) } {
            set cidr_bits $v($is_ipv6,length)
        } elseif { $cidr_bits < 0 } {
            set cidr_bits 0
        }

        # Loop on the full length of the mask: 32 bits for ipv4, 128 for ipv6
        for { set octet 0; set i 0 } { $i < $v($is_ipv6,length) } { incr i } {

           # Take a break at intervals to save the grouping and add delimiter.
           # Interval is 8 bits for ipv4 and 16 bits for ipv6.
           if { $i && ![expr {$i % $v($is_ipv6,group)}] } {

               # Add the grouping and delimiter to the mask, then reset.
               append mask [format %$v($is_ipv6,format1) $octet]
               set octet 0
           }
           # Shift the prior bits left by multiplying by 2.
           # Then add the current bit, which is 1 if part of the mask, 0 if not.
           # Current bit is part of the mask if $i < number of bits in the mask.
           set octet [expr { 2 * $octet + ($i < $cidr_bits) }]
        }
        # Add the final grouping, then return the finished mask.
        set ret_val [format $mask%$v($is_ipv6,format2) $octet]

    } else { ;# calculate a destination
        # the route domain might be a name and we need a number.
        if { ![string is integer $route_domain] } {
            set route_domains [tmsh::get_config "/ net route-domain $route_domain"]
            if { [llength $route_domains] != 1 } {
                error "no such route domain: $route_domain"
            }
            # since we have already determined that the list is 1 long,
            # this explicit reference to element 0 is safe
            set route_domain [tmsh::get_field_value [lindex $route_domains 0] "id"]
        }

        set route_domain [expr { $route_domain == 0 ? "" : "%$route_domain" }]

        # 0 and * represent wildcard port assignments in the GUI,
        # but TMSH requires the string 'any' to specify a wildcard.
        if { $port == 0 || $port == "*" } {
            set port any
        }

        # Build the final destination. Use ":" for node names even if ipv6.
        set is_ipv6_literal [string match "*:*:*" $addr]
        set addr_delimiter  [expr { $is_ipv6_literal ? "." : ":" }]
        set ret_val ${addr}${route_domain}${addr_delimiter}${port}
    }
    return $ret_val
}

proc iapp_pool_members { args } {

    # Set defaults.
    array set fields {
        address          addr
        port             port
        port-secure      port_secure
        connection-limit connection_limit
        priority-group   priority
        ratio            ratio
    }
    set route_domain ""
    set port_override -1
    set aaa_domain 0
    set aaa_priority -1

    # Set up flag-related work.
    array set flags {
        -fields       { [array set fields  [iapp_pull $ptr args]] }
        -route_domain { [set route_domain  [iapp_pull $ptr args]] }
        -port         { [set port_override [iapp_pull $ptr args]] }
        -aaa_domain   { [set aaa_domain    1] }
        -aaa_pool     { [set aaa_priority  0] }
    }
    iapp_process_flags flags args

    # Identify the non-address/non-port fields. These go inside braces in tmsh.
    set nonport_fields [lsearch -all -not -inline -regexp \
        [array names fields] {address|port|port-secure}]

    set members ""
    foreach row [join $args] {

        # Skip invalid table rows.
        if { [llength [join $row]] %2 == 1 } {
            continue
        }

        # Import APL table into an array for processing.
        array unset columns
        array set columns [join $row]
        set addr $columns($fields(address))

        # Identify the port number, either from table columns or by -port flag.
        if { $port_override != -1 } {
            set port $port_override
        } elseif { [info exists columns($fields(port))] } {
            set port $columns($fields(port))
        } elseif { [info exists columns($fields(port-secure))] } {
            set port $columns($fields(port-secure))
        } else {
            set port 80
        }

        # If specified, strip entered route domain and append the flag value.
        if { $route_domain != "" } {
            set addr [lindex [split $addr "%"] 0]
            set addr "$addr%$route_domain"
        }

        # If -aaa_domain, use domain controller format, otherwise use pool format
        if { $aaa_domain } {
            append members " $columns($fields(host)) \{ ip $addr \}"
        } else {
            append members " [iapp_destination $addr $port] \{"

            # Transfer non-port fields from the table to the tmsh string.
            foreach name $nonport_fields {
                if { [info exists columns($fields($name))] } {
                    append members " $name $columns($fields($name))"
                }
            }

            # If -aaa_pool, add priority field with incrementing value.
            # This is required by APM.
            if { $aaa_priority >= 0 } {
                append members " priority-group [incr aaa_priority]"
            }
            append members " \}"
        }
    }

    return "[expr { $aaa_domain ? "" : "members " }][expr { $members eq "" \
        ? "none" : "replace-all-with \{ $members \}" }]"
}

proc iapp_debug { args } {

    # Passwords should be obscured in all logs. Fields shown here are handled
    # in this proc, but the global variable may be overwritten if alternate
    # fields should be obscured.
    if { ![info exists ::SENSITIVES] } {
        set ::SENSITIVES {
            account-password
            admin-encrypted-password
            password
            passwd
            secret
        }
    }

    # look for any of the sensitive words, and replace the word that follows it
    set regex "(\\m([join $::SENSITIVES |])\\M)\\s+\[^\\s\]*"
    regsub -all $regex [join $args] {\1 -OBSCURED-} args
    regsub -all "(<Password.*>).*(</Password>)" $args {\1-OBSCURED-\2} args

    set lev [tmsh::get_field_value [lindex [tmsh::get_config sys scriptd \
        log-level] 0] log-level]
    if { $lev eq {debug} } {
        puts $args
    }
}

# The apm_config proc provides a tmsh pre-processor for APM
# configuration, which in most cases will drastically reduce
# implementation code. To configure APM with this proc, pass
# it an array of object names and associated meta-tag substitutions.
# Each object must be categorized as a profile, a resource, or
# a policy-item. APM agents and customization-groups are derived
# from these 3 categories as needed.
#
# apm_config's return value is a list of the APM profiles defined
# in the argument and instantiated by the proc. This allows the
# procedure call to be embedded directly into a virtual server
# definition.
#
# These universal meta-tags may be placed anywhere in the array:
# <ITEM> The object name, eg. apm_access
# <PREFIX> The app name, including folder, eg. /Common/my_app.app/my_app
#
# Profile objects require the following meta-tags:
# <PROFILE_TYPE> The tmsh object type, eg. "apm profile access"
# <PROFILE_DEF>  The body of the object, eg.:
#     "access-policy <PREFIX>
#      defaults-from /Common/access
#      eps-group <PREFIX>_eps
#      errormap-group <PREFIX>_errormap
#      general-ui-group <PREFIX>_general_ui"
#
# apm_config will automatically create default customization-groups
# for the "-group" lines specified in access profile definitions.
# In the above example, there is no need to additionally specify a
# customization-group for errormap and general-ui.
#
# <PROFILE_TYPE> is a catch-all for other APM types, eg:
#      apm_sso {
#          <PROFILE_TYPE> {apm sso kerberos}
#          <PROFILE_DEF>  "account-name <USER>
#                          account-password <PASS>
#                          realm <REALM>" }
#
# In the example above, <PROFILE_TYPE> and <PROFILE_DEF> are
# apm_config meta-tags, while <USER>, <PASS>, and <REALM> must
# be substituted before calling apm_config, eg. if these tags are
# defined in $pre_proc_map, they may be substituted with:
# array set apm_map [string map [subst $pre_proc_map] [array get apm_map]]
#
# Resource objects require the following meta-tags:
# <RESOURCE_TYPE> The apm resource object type, eg. "webtop"
# <RESOURCE_DEF>  The body of the object, eg.:
#     "customization-group <ITEM>
#      minimize-to-tray false
#      webtop-type full"
#
# In the above example, a customization-group is specified. Any
# customization-group is assumed to be blank unless further defined by the
# <GROUP_DEF> meta-tag, eg. <GROUP_DEF> {type webtop}
#
# Policy-item objects are defined by the following meta-tags:
# <AGENT_TYPE>   default "resource-assign"
# <AGENT_DEF>    default "customization-group <ITEM>"
# <ITEM_AGENT>   default "agents { <ITEM>_ag { type <AGENT_TYPE> }}"
# <ITEM_CAPTION> default "<ITEM>"
# <ITEM_COLOR>   default "1"
# <ITEM_TYPE>    default "action"
# <ITEM_RULES>   defaults to a set of expressions/next-items where specified
# <RULE_CAPTION_0> default "fallback"
# <RULE_CAPTION_1> default "Successful"
# <RULE_CAPTION_2> default "successful"
#
# apm_config generates the APM agent and customization-group definitions
# as required for each policy-item, but specific objects may be defined
# by using the <AGENT_DEF> and <GROUP_DEF> meta-tags.
# To suppress the formation of an APM agent, specify <ITEM_AGENT> {}.

proc iapp_apm_config { map_array_name } {
    upvar $map_array_name map_array

    # Pull $prefix from the array
    set prefix $map_array(prefix)
    unset map_array(prefix)

    # Stencils for creating apm objects
    set access_form \
       "<TMSH_CREATE> apm policy access-policy <ITEM> {\n   \
          caption general\n   \
          start-item <ACCESS_START_ITEM>\n   \
          default-ending <ACCESS_ENDING>\n   \
          items replace-all-with {\n<ACCESS_ITEMS>    }\n}"

    set profile_form "<TMSH_CREATE> <PROFILE_TYPE> <ITEM> {\n   \
        <PROFILE_DEF>\n}"

    set resource_form "<TMSH_CREATE> apm resource <RESOURCE_TYPE> <ITEM> {\n   \
        <RESOURCE_DEF>\n}"

    set agent_form "<TMSH_CREATE> apm policy agent <AGENT_TYPE> <ITEM>_ag {\n   \
        <AGENT_DEF>\n}"

    set group_form "<TMSH_CREATE> apm policy customization-group <ITEM> {\
        <GROUP_DEF>}"

    set agent_group_form "<TMSH_CREATE> apm policy customization-group <ITEM>_ag {\
        <GROUP_DEF>}"

    set policy_item_form "<TMSH_CREATE> apm policy policy-item <ITEM> {
    <ITEM_AGENT>caption <ITEM_CAPTION>
    color <ITEM_COLOR>
    <ITEM_TYPE>
    <ITEM_RULES>\n}"

    # 1st round apm string map
    set default_map_1 {
        <ACCESS_ITEM> {}
        <AGENT_DEF> "customization-group <ITEM>_ag"
        <ITEM_AGENT> "agents replace-all-with {
        <ITEM>_ag { type <AGENT_TYPE> }}\n    "
        <ITEM_CAPTION> <ITEM>
        <ITEM_COLOR> {1}
        <ITEM_TYPE> "item-type action"
        <ITEM_RULES> "rules
        {[expr {[string first <RULE_NEXT_2> $map_array($item)] != -1 ? "{
            caption <RULE_CAPTION_2>
            expression <RULE_EXPR_2>
            next-item ${prefix}_<RULE_NEXT_2>
        }":""}][expr {[string first <RULE_NEXT_1> $map_array($item)] != -1 ? "{
            caption <RULE_CAPTION_1>
            expression <RULE_EXPR_1>
            next-item ${prefix}_<RULE_NEXT_1>
        }":""}]{
            caption <RULE_CAPTION_0>
            next-item ${prefix}_<RULE_NEXT_0>
        }}"
    }

    # 2nd round apm string map
    set default_map_2 {
        <ITEM> [expr { $item eq {default} ? "$prefix" : "${prefix}_$item" }]
        <PREFIX> $prefix
        <LOCAL_PATH> [string map {/ :} $prefix]
        <GROUP_DEF> ""
        <AGENT_TYPE> "resource-assign"
        <RULE_CAPTION_2> "successful"
        <RULE_CAPTION_1> "Successful"
        <RULE_CAPTION_0> "fallback"
    }

    # Build APM access profile and access-policy from the access_form.
    # Tags <ACCESS_ITEM> and <ACCESS_ENDING> are picked up from
    # $map_array items. <ITEM> and <GROUP_DEF> are picked up from
    # $default_map_2.
    foreach item [lsort [array names map_array]] {

        # Pick up the <ACCESS_ENDING> tag. There should be just 1.
        set access_form [string map $map_array($item) $access_form]

        # Filter out items that do not belong in the access-policy.
        # Anything with an ITEM_xxx tag belongs
        if { [string first <ITEM_ $map_array($item)] == -1 } {
            continue
        }

        # Add to the items list for the access-policy, e.g. priority
        append access_items "        ${prefix}_$item {<ACCESS_ITEM>}\n"
        set access_items [string map $map_array($item) $access_items]
        set access_items [string map [subst $default_map_1] $access_items]
    }

    # Build APM resources, policy-items, agents, and customization-groups from
    # the policy_item_form and resource_form.
    foreach item [lsort [array names map_array]] {

        # Each item starts as a profile, a resource, or a policy-item.
        # Profiles are free-form, so other apm objects can use the profile form.
        # In most cases, a policy-item spawns an agent.
        # Any definition specifying a customization-group will spawn that group.
        if { [string first "<PROFILE_DEF>" $map_array($item)] != -1 } {

            # Collect profile names for attachment to the virtual server
            if { [string first "apm profile " $map_array($item)] != -1 } {
                lappend profiles [expr { $item eq {default}
                                 ? "$prefix" : "${prefix}_$item" }]
                # When an access profile is found, built a policy of the same name
                if { [string first "apm profile access" $map_array($item)] != -1 } {
                    set def [string map "<ACCESS_ITEMS> {$access_items}" $access_form]
                    append cmds "[string map [subst $default_map_2] $def]\n"
                }
            }
            set def $profile_form
        } elseif { [string first "<RESOURCE_DEF>" $map_array($item)] != -1 } {
            set def $resource_form
        } else {
            set def $policy_item_form
            if { [string first "<ITEM_AGENT> {}" $map_array($item)] == -1 } {
                append def $agent_form
            }
        }

        # Apply 1st pass of string maps
        set def [string map $map_array($item) $def]
        set def [string map [subst $default_map_1] $def]

        # If a customization-group is specified, add its definition
        if { [string first "customization-group" $def] != -1 } {
            if { [string first "apm policy agent" $def] != -1 } {
                append def $agent_group_form
            } elseif { [string first "apm profile access" $def] == -1 } {
                append def $group_form
            }
        }

        # Apply 2nd pass of string maps
        set def [string map $map_array($item) $def]
        append cmds [string map [subst $default_map_2] $def]
    }

    # Divide and execute tmsh commands
    set tag "<TMSH_CREATE>"
    set tag_length [string length $tag]
    set last [expr { [string first $tag $cmds] + $tag_length }]
    while { [set pos [string first $tag $cmds $last]] != -1 } {
        incr pos -1
        iapp_conf create [string range $cmds $last $pos]
        set last [expr { $pos + $tag_length + 1 }]
    }
    iapp_conf create [string range $cmds $last end]
    return $profiles
}

proc iapp_upgrade_template { upgrade_var upgrade_trans } {
    upvar $upgrade_var   upgrade_var_arr
    upvar $upgrade_trans upgrade_trans_arr

    # create the new variables from the old
    foreach { var } [array names upgrade_var_arr] {

        # substitute old variable name for abbreviation "##"
        regsub -all {##} $upgrade_var_arr($var) \$$var map_cmd

        # run the mapping command from inside the array
        if { [catch { subst $map_cmd } err] } {
            if { [string first "no such variable" $err] == -1 } {
                puts "ERROR $err"
            }
        }
    }

    # move variables over and apply translations
    set var_mods ""
    set var_adds ""
    foreach var [array names vx] {

        # if the APL variable name is in the translation array,
        # then use the custom translation built for that variable.
        if { [info exists upgrade_trans_arr($var)] } {
            array set sub_arr [subst $upgrade_trans_arr($var)]
            if { [info exists sub_arr($vx($var))] } {
                set vx($var) $sub_arr($vx($var))
            }
            array unset sub_arr
        # else, if the APL variable value is in the translation array,
        # then use the generic translation of that value.
        } elseif { [info exists upgrade_trans_arr($vx($var))] } {
            set vx($var) [subst $upgrade_trans_arr($vx($var))]
        }

        # add to tmsh command string
        if { [info exists ::$var] } {
            append var_mods "\n $var \{ value \"$vx($var)\" \} "
        } else {
            append var_adds "\n $var \{ value \"$vx($var)\" \} "
        }
    }

    # move tables over
    set tbl_mods ""
    set tbl_adds ""
    foreach tbl [array names tx] {

        # convert table from APL format to TMSH format
        if { ![llength $tx($tbl)] } {
            set tbl_def "column-names none"
        } else {
            set rows_def ""
            foreach apl_row $tx($tbl) {
                array set row_arr [join $apl_row]
                append rows_def "\n  \{ row \{ "
                foreach apl_col [array names row_arr] {
                    append rows_def "$row_arr($apl_col) "
                }
                append rows_def "\}\}"
            }
            set tbl_def \
            "\n  column-names \{ [array names row_arr] \} rows \{ $rows_def \}"
            array unset row_arr
        }

        # add to tmsh command string
        if { [info exists ::$tbl] } {
            append tbl_mods "\n $tbl \{ $tbl_def \} "
        } else {
            append tbl_adds "\n $tbl \{ $tbl_def \} "
        }
    }

    # construct the "tmsh modify" command
    set cmd "sys application service $tmsh::app_name "
    if { [llength $var_mods] } {
        append cmd "\nvariables modify { $var_mods }"
    }
    if { [llength $var_adds] } {
        append cmd "\nvariables add { $var_adds }"
    }
    if { [llength $tbl_mods] } {
        append cmd "\ntables modify { $tbl_mods }"
    }
    if { [llength $tbl_adds] } {
        append cmd "\ntables add { $tbl_adds }"
    }

    # Execute with debug output. This conversion takes place within the
    # existing ASO, so tmsh modify is used instead of tmsh create.
    iapp_debug "TEMPLATE UPGRADE"
    iapp_conf modify $cmd
    return
}

proc iapp_downgrade_template { pivot_var upgrade_var downgrade_table } {
    upvar $downgrade_table downgrade_tbl_arr

    # The ASO variable "offload_history" is used to recover the legacy
    # choice a user made about SSL offload. It should be present in all cases.
    # This conditional only handles the case where a user has deliberately
    # deleted it by manipulating the ASO directly from tmsh.
    if { ![info exists ::offload_history] } {
        set ::offload_history "No"
    }

    # BIG-IP erases table contents when the APL optional hides the table.
    # Since the prior data is not available, this downgrade must back-convert
    # existing table data. Unlike tables, variables remain intact from the
    # legacy ASO.
    set tbl_def ""
    foreach tbl [array names downgrade_tbl_arr] {
        # Check for existence of each table in the current context.
        # If not, skip to next.
        if { ![info exists [set tbl]] } {
            continue
        }
        # Check for existence of each table in the legacy context.
        # If not, add an empty table so "tmsh tables modify" does not fail.
        if { ![info exists ::$downgrade_tbl_arr($tbl)] } {
            iapp_conf modify sys app ser $tmsh::app_name tables add \{ $downgrade_tbl_arr($tbl) \}
        }
        append tbl_def "$downgrade_tbl_arr($tbl) \{ "
        if { [llength [subst $$tbl]] } {
            set rows_def ""
            foreach apl_row [subst $$tbl] {
                array set row_arr [join $apl_row]
                append rows_def "\n  \{ row \{ "
                foreach apl_col [array names row_arr] {
                    append rows_def "$row_arr($apl_col) "
                }
                append rows_def "\}\}"
            }
            append tbl_def \
            "column-names \{ [array names row_arr] \} rows \{ $rows_def \}"
            array unset row_arr
        } else {
            append tbl_def "rows none"
        }
        append tbl_def " \} "
    }
    regsub -all "\n" $tbl_def {} tbl_def
    set cmd "sys app ser $tmsh::app_name \
        variables modify \{ \
            $pivot_var \{ value $::offload_history \} \
            $upgrade_var \{ value No \} \
        \} \
        tables modify \{ $tbl_def \}"
    iapp_debug "TEMPLATE DOWNGRADE"
    iapp_conf modify $cmd
    return
}
}
sys application template f5.microsoft_adfs.v1.0.0 {
     actions {
          definition {
               html-help {
               }
               implementation {

tmsh::include f5.iapp.1.3.0.cli
iapp_template start

#constants
set DEFAULT_ANSWER    /#default#
set DO_NOT_USE_ANSWER /#do_not_use#
set CREATE_NEW_ANSWER /#create_new#

proc arrange_tcp_profiles { client_profile server_profile } {
     if { $client_profile == $server_profile } {
          set profile_list "$client_profile \{ context all \} "
          } else {
          set profile_list "$client_profile \{ context clientside \} \
          $server_profile \{ context serverside \} "
     }
     return $profile_list
}

array set forms {
     adfs_monitor_eav_script {#!/bin/sh
# These arguments supplied automatically for all external monitors:
# $1 = IP (nnn.nnn.nnn.nnn notation)
# $2 = port (decimal, host byte order)
#
# This script expects the following Name/Value pairs:
# HOST = the host name of the SNI-enabled site
# URI  = the URI to request
# RECV = the expected response
#
# Remove IPv6/IPv4 compatibility prefix (LTM passes addresses in IPv6 format)
NODE=`echo ${1} | sed 's/::ffff://'`
if [[ $NODE =~ ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$ ]]; then
NODE=${NODE}
else
NODE=[${NODE}]
fi
PORT=${2}
PIDFILE="/var/run/`basename ${0}`.sni_monitor_${HOST}_${PORT}_${NODE}.pid"
if [ -f $PIDFILE ]
then
echo "EAV exceeded runtime needed to kill ${HOST}:${PORT}:${NODE}" | logger -p local0.error
kill -9 `cat $PIDFILE` > /dev/null 2>&1
fi
echo "$$" > $PIDFILE
<CURL> -k -i --resolve $HOST:$PORT:$NODE https://$HOST$URI | grep -i "${RECV}" > /dev/null 2>&1
STATUS=$?
rm -f $PIDFILE
if [ $STATUS -eq 0 ]
then
echo "UP"
fi
exit
     }
}
# Writes the external monitor for the autodiscover service.
proc create_eav_script { script_name } {
     set app $tmsh::app_name
     set eav_script_name /config/monitors/${app}_$script_name
     set map "microsoft_adfs $app
     <CURL> [expr { [file exists /usr/bin/curl-apd] ? "curl-apd" : "curl" }]"
     set fn [open "$eav_script_name" "w" "0755"]
     # This string map pulls the static bash script out of the forms array and
     # customizes it for http or https based on the user's SSL selections.
     puts $fn [string map $map $::forms($script_name)]
     close $fn
     return $eav_script_name
}

proc configure_apm {  } {
     tmsh::include f5.iapp.1.3.0.cli
     set is_120 [iapp_tmos_version >= 12.0]
     set app $tmsh::app_name
     set advanced [expr { [iapp_is ::basic__advanced "yes"] }]
     # APM
     # AAA config
     # array keys: $advanced,$::apm__ad_secure
     array set aaa_port {
          1,ssl  {$::apm__ad_port_ssl}
          1,tls  {$::apm__ad_port_not_ssl}
          1,none {$::apm__ad_port_not_ssl}
          0,ssl  {636}
          0,tls  {389}
          0,none {389}
     }

     # array key: $::apm__ad_monitor
     array set aaa_monitor {
          /#create_new#  { [iapp_conf create ltm monitor ldap ${app}_ldap \
                                   base \"$::apm__ad_tree\" \
                                   chase-referrals yes \
                                   debug no \
                                   defaults-from ldap \
                                   destination *:[subst $aaa_port($advanced,$::apm__ad_secure)] \
                                   filter \"cn=$::apm__ad_user\" \
                                   interval [expr { $advanced ? $::apm__ad_interval : "10" }] \
                                   timeout [expr {$advanced ? ($::apm__ad_interval * 3 + 1):"31"}] \
                                   mandatory-attributes no \
                                   password [iapp_make_safe_password $::apm__ad_password] \
                                   security $::apm__ad_secure \
                                   time-until-up 0 \
                                   username \"cn=${::apm__ad_user},${::apm__ad_tree}\"] }
          /#use_icmp#    { [iapp_conf create ltm monitor gateway-icmp ${app}_icmp \
                                   defaults-from gateway_icmp \
                                   interval 5 \
                                   timeout 16] }
          /#do_not_use#  { none }
     }

     # array key: $multiple_ad
     array set aaa_pool {
          1 { domain-controllers [iapp_pool_members -aaa_domain -fields { host fqdn } $::apm__active_directory_servers] \
               pool [iapp_conf create ltm pool ${app}_aaa [iapp_pool_members $::apm__active_directory_servers -port any -aaa_pool] \
               load-balancing-mode "round-robin" \
               monitor [expr { [iapp_is ::apm__ad_monitor "/#create_new#"] \
               || [iapp_is ::apm__ad_monitor "/#use_icmp#"] \
               || [iapp_is ::apm__ad_monitor "/#do_not_use#"] \
               ? [subst $aaa_monitor($::apm__ad_monitor)] \
               : $::apm__ad_monitor } ] \
               min-active-members 1] }
          0 { domain-controller $::apm__active_directory_server }
     }

     set do_new_aaa [iapp_is ::apm__aaa_profile "/#create_new#"]
     set credentials [iapp_is ::apm__credentials "yes"]
     set multiple_ad 1

     # array key: $do_new_aaa
     array set aaa_server {
          1 {[iapp_conf create apm aaa active-directory ${app}_apm_aaa \
          \{ admin-encrypted-password [expr { $credentials  ? "[iapp_make_safe_password $::apm__active_directory_password]"  : "none" }] \
          admin-name [expr { $credentials  ? "$::apm__active_directory_username"  : "none" }] \
          domain "$::apm__login_domain" [subst $aaa_pool($multiple_ad)] \}] }
          0 { $::apm__aaa_profile }
     }

     set ad_aaa [iapp_substa aaa_server($do_new_aaa)]

     # APM config
     set pre_proc_map "
     <NTLM_DOMAIN>  $::apm__login_domain
     <AAA>                  $ad_aaa"
     
     if { $is_120 } {
        if { $::apm__log_settings == "/#do_not_use#" } {
            append pre_proc_map { <LOG_SETTINGS> "log-settings none" }
        } else {
            append pre_proc_map { <LOG_SETTINGS> "log-settings replace-all-with \{ $::apm__log_settings \}" }
        }
     } else {
        append pre_proc_map { <LOG_SETTINGS> "" }
     } 

     array set apm_map {
          apm_ntlm_sso {
               <PROFILE_TYPE> {apm sso ntlmv1}
          <PROFILE_DEF>  "ntlm-domain <NTLM_DOMAIN>" }
          default {
               <PROFILE_TYPE> {apm profile access}
               <GROUP_DEF> {type logout }
               <PROFILE_DEF> "accept-languages replace-all-with { en }
               access-policy <PREFIX>
               defaults-from /Common/access
               generation-action increment
               domain-mode single-domain
               domain-cookie none
               persistent-cookie false
               secure-cookie true
               logout-uri-include none
               logout-uri-timeout 5
               customization-group <PREFIX>_logout
               eps-group <PREFIX>_eps
               errormap-group <PREFIX>_errormap
               framework-installation-group <PREFIX>_frameworkinstallation
               general-ui-group <PREFIX>_general_ui
               sso-name <PREFIX>_apm_ntlm_sso
               <LOG_SETTINGS>" }
          apm_ent {
               <ITEM_AGENT> {}
               <ITEM_CAPTION> {"Start"}
               <ITEM_TYPE> {}
          <RULE_NEXT_0> apm_logon }
          apm_logon {
               <ACCESS_ITEM> { priority 2 }
               <AGENT_TYPE> logon-page
               <ITEM_CAPTION> {"Logon Page"}
          <RULE_NEXT_0> apm_auth }
          apm_auth {
               <ACCESS_ITEM> { priority 3 }
               <AGENT_TYPE> aaa-active-directory
               <AGENT_DEF> "server <AAA>\n    type auth"
               <ITEM_CAPTION> {"AD Auth"}
               <RULE_EXPR_1> {"expr {[mcget {session.ad.last.authresult}] == \"1\"}"}
               <RULE_NEXT_1> apm_credentials
          <RULE_NEXT_0> apm_deny }
          apm_credentials {
               <ACCESS_ITEM> { priority 4 }
               <AGENT_TYPE> variable-assign
               <AGENT_DEF> "type sso-cred-mapping
               variables {{
               expression \"mcget {session.logon.last.username}\"
               varname session.sso.token.last.username }{
               expression \"mcget {session.logon.last.password}\"
               varname session.sso.token.last.password }}"
               <ITEM_CAPTION> {"SSO Credential Mapping"}
          <RULE_NEXT_0> apm_allow }
          apm_allow {
               <ACCESS_ITEM> { priority 7 }
               <AGENT_DEF> {}
               <AGENT_TYPE> ending-allow
               <ITEM_CAPTION> {"Allow"}
               <ITEM_TYPE> {item-type ending}
          <ITEM_RULES> {} }
          apm_deny {
               <ACCESS_ITEM> { priority 8 }
               <ACCESS_START_ITEM> <PREFIX>_apm_ent
               <ACCESS_ENDING> <PREFIX>_apm_deny
               <AGENT_TYPE> ending-deny
               <GROUP_DEF> {type logout }
               <ITEM_CAPTION> {"Deny"}
               <ITEM_TYPE> {item-type ending}
               <ITEM_COLOR> {2}
          <ITEM_RULES> {} }
     }

     set apm_map(prefix) [tmsh::pwd]/$app

     # Instantiate the APM configuration (plus websso and rba)
     array set apm_map [string map [subst $pre_proc_map] [array get apm_map]]
     set apm_profiles "[iapp_apm_config apm_map] /Common/websso /Common/rba"

     # APM policies do not commit in a reliable manner when configured via iApp.
     # This time-bomb script insures that the policy gets committed.
     set dir [tmsh::pwd]
     set fn "/var/tmp/iapp_${app}.sh"
     set fh [open $fn w]
     puts $fh "sleep 5"
     puts $fh "tmsh modify apm profile access ${dir}/${app} generation-action increment"
     close $fh
     exec chmod 777 $fn
     exec $fn &

     return $apm_profiles
}

proc configure_adfs_deployment {  } {
     tmsh::include f5.iapp.1.3.0.cli
     set app $tmsh::app_name
     set lb_lcm_licensed [expr {[string first ltm_lb_least_conn  [tmsh::show sys license detail]] != -1}]
     set advanced [expr { [iapp_is ::basic__advanced "yes"] }]
     set adfs_version $::basic__version
     set do_fastl4 [expr { ( ![info exists ::apm__use_apm] || \
                   [iapp_is ::apm__use_apm "no"] ) && \
                   [iapp_is ::ssl__mode "passthru"]}]

     # MONITOR
     set need_monitor [expr { $::vs_pool__pool_to_use == "/#create_new#" }]

     set new_monitor [iapp_is ::app_health__monitor "/#create_new#"]
     # array keys: $need_monitor,$new_monitor, $adfs_version
     array set monitor_arr {
          1,1,v2   { monitor [iapp_conf create ltm monitor https ${app}_adfs_https \
               defaults-from https \
               interval $::app_health__frequency \
               timeout [ expr {( $::app_health__frequency * 3 ) + 1} ] \
               send $::app_health__send\
          recv \"$::app_health__recv\"] }
          1,1,v3   { monitor [iapp_conf create ltm monitor external ${app}_adfs_eav \
               run [iapp_conf create sys file external-monitor adfs_eav \
               source-path file:[create_eav_script adfs_monitor_eav_script]] \
               user-defined HOST $::vs_pool__fqdn \
               user-defined URI $::app_health__send \
               user-defined RECV \"$::app_health__recv\" \
               interval $::app_health__frequency \
          timeout [ expr {( $::app_health__frequency * 3 ) + 1} ] ] }
          1,0,v2    { monitor $::app_health__monitor }
          1,0,v3   { monitor $::app_health__monitor }
          *   { monitor none }
     }

     # POOL
     set use_slow_ramp [iapp_is ::vs_pool__use_slow_ramp yes]
     # array keys: $advanced,$use_slow_ramp
     array set pool_slow_ramp {
          *   { slow-ramp-time 300 }
          1,0 { slow-ramp-time 10 }
          1,1 { slow-ramp-time $::vs_pool__slow_ramp_setvalue }
     }

     set use_pga [iapp_is ::vs_pool__use_pga yes]
     # array keys: $advanced,$use_pga
     array set pool_pga {
          1,1 { min-active-members $::vs_pool__min_active_members }
          *   { min-active-members 0 }
     }

     set tcp_queuing [expr { $advanced && !$do_fastl4 && [iapp_is ::vs_pool__tcp_req_queuing "yes"] }]
     # array keys: $advanced,$tcp_queuing
     array set tcp_req_queuing {
          1,1 { queue-on-connection-limit enabled \
               queue-depth-limit $::vs_pool__tcp_queue_length \
               queue-time-limit  $::vs_pool__tcp_queue_timeout }
          *   { queue-on-connection-limit disabled queue-depth-limit 0 queue-time-limit 0 }
     }

     # array keys: $advanced,$lb_lcm_licensed
     array set pool_lb_method {
          0,0 { load-balancing-mode round-robin }
          0,1 { load-balancing-mode least-connections-member }
          *   { load-balancing-mode $::vs_pool__lb_method_choice }
     }

     set new_pool [iapp_is ::vs_pool__pool_to_use "/#create_new#"]
     # array keys: $new_pool
     array set pool {
          1 { pool [iapp_conf create ltm pool ${app}_adfs_pool \
               [iapp_substa pool_lb_method($advanced,$lb_lcm_licensed)] \
               [iapp_pool_members $::vs_pool__members \
               -fields {connection-limit conn_limit}] \
               [iapp_substa monitor_arr($need_monitor,$new_monitor,$adfs_version)] \
               [iapp_substa pool_slow_ramp($advanced,$use_slow_ramp)] \
               [iapp_substa tcp_req_queuing($advanced,$tcp_queuing)] \
          [iapp_substa pool_pga($advanced,$use_pga)] ] }
          0   { pool $::vs_pool__pool_to_use }
     }

     # PROFILES
     # CLIENT TCP OPTIMIZATION PROFILE
     # In order to show the correct recommendation per the chosen topology,
     # the presentation of client tcp optimization has a split presentation.
     # Only one of tcp_lan_opt or tcp_wan_opt contains the user's selection.
     # This statement identifies whether the user has selected the recommended
     # option from this split presentation.
     set new_client_tcp [expr { !$advanced || ( \
          [iapp_is ::net__client_mode lan] ? \
          [iapp_is ::client_opt__tcp_lan_opt "/#create_new#"] : \
     [iapp_is ::client_opt__tcp_wan_opt "/#create_new#"] )}]

     # array keys: $new_client_tcp,$::net__client_mode
     array set client_tcp {
          0,lan    { $::client_opt__tcp_lan_opt }
          0,wan    { $::client_opt__tcp_wan_opt }
          1,lan    { [iapp_conf create ltm profile tcp ${app}_lan-optimized-tcp \
          defaults-from tcp-lan-optimized idle-timeout 1200] }
          *        { [iapp_conf create ltm profile tcp ${app}_wan-optimized-tcp \
          defaults-from tcp-wan-optimized idle-timeout 1200] }
     }

     # SERVER TCP OPTIMIZATION PROFILE
     # See above comments regarding the client tcp optimization array.
     set new_server_tcp [expr { !$advanced || ( \
          [iapp_is ::net__server_mode lan] ? \
          [iapp_is ::server_opt__tcp_lan_opt "/#create_new#"] : \
     [iapp_is ::server_opt__tcp_wan_opt "/#create_new#"] )}]

     # array keys: $new_server_tcp,$::net__server_mode
     array set server_tcp {
          0,lan    { $::server_opt__tcp_lan_opt }
          0,wan    { $::server_opt__tcp_wan_opt }
          1,lan    { [iapp_conf create ltm profile tcp ${app}_lan-optimized-tcp \
          defaults-from tcp-lan-optimized] }
          *        { [iapp_conf create ltm profile tcp ${app}_wan-optimized-tcp \
          defaults-from tcp-wan-optimized] }
     }

     set client_mode [expr { $advanced ? $::net__client_mode : "wan" }]
     set server_mode [expr { $advanced ? $::net__server_mode : "lan" }]

     # array keys: type = tcp
     array set profiles {
          tcp   { profiles add \{ \
               [arrange_tcp_profiles \
               [iapp_substa client_tcp($new_client_tcp,$client_mode)] \
          [iapp_substa server_tcp($new_server_tcp,$server_mode)] ] \} }
     }

     # HTTP PROFILE
     set new_http [expr { !$advanced || \
     [iapp_is ::vs_pool__http "/#create_new#"] }]

     set xff_action [expr { !$advanced || \
     [iapp_is ::vs_pool__xff "yes"] ? "insert-xforwarded-for enabled" : "" }]

     #array keys: $advanced, $new_http
     array set http_arr {
          1,0   { $::vs_pool__http }
          1,1   { [iapp_conf create ltm profile http ${app}_http \
               defaults-from http  \
          $xff_action] }
          *       { [iapp_conf create ltm profile http ${app}_http \
               defaults-from http  \
          $xff_action] }
     }

     # SSL PROFILES
     # Client SSL
     set new_client_ssl [expr {[iapp_is ::ssl__client_ssl_profile "/#create_new#"]}]

     set do_chain_cert  [expr { $advanced && \
          [info exists ::ssl__use_chain_cert] && \
     ![iapp_is ::ssl__use_chain_cert "/#do_not_use#"] }]

     set cssl_cmd \
     "ltm profile client-ssl ${app}_client-ssl defaults-from clientssl"

     # array keys: $new_client_ssl,$do_chain_cert
     array set client_ssl_arr {
          1,1 { [iapp_conf create $cssl_cmd key $::ssl__key cert $::ssl__cert \
          chain $::ssl__use_chain_cert] \{ context clientside \} }
          1,0 { [iapp_conf create $cssl_cmd key $::ssl__key cert $::ssl__cert \
          chain none] \{ context clientside \} }
          * { $::ssl__client_ssl_profile \{ context clientside \} }
     }

     # Server SSL
     set new_server_ssl [expr {[iapp_is ::ssl__server_ssl_profile "/#create_new#"]}]

     set sssl_cmd [expr {[iapp_is adfs_version "v3"] ? "ltm profile server-ssl ${app}_server-ssl defaults-from serverssl server-name $::vs_pool__fqdn" : "ltm profile server-ssl ${app}_server-ssl defaults-from serverssl server-name none"}]

     # array keys:$new_server_ssl
     array set server_ssl_arr {
          1 { [iapp_conf create $sssl_cmd] \{ context serverside \} }
          0 { $::ssl__server_ssl_profile \{ context serverside \} }
          *     {}
     }

     # SNAT
     set do_snat      [expr { [iapp_is ::net__same_subnet  yes] \
     || ![iapp_is ::net__route_to_bigip yes] }]
     set do_automap   [expr { [iapp_is ::net__snat_type automap] }]
     set new_snatpool [iapp_is ::net__snatpool "/#create_new#"]

     # array keys: $do_snat,$do_automap,$new_snatpool
     array set snat {
          1,1,1 { snat automap }
          1,1,0 { snat automap }
          1,0,1 { snatpool [iapp_conf create ltm snatpool ${app}_snatpool \
               members replace-all-with \{ \
               [string map {"addr " "" \{ "" \} ""} $::net__snatpool_members] \
          \}] }
          1,0,0 { snatpool $::net__snatpool }
          *     { snat none }
     }

     # VLANS
     # array keys: $advanced
     array set vlans {
          1     { vlans-enabled \
          vlans replace-all-with \{ $::net__client_vlan \} }
          *       { vlans-disabled vlans none }
     }

     # RULES
     set have_rules [expr { ![iapp_is ::irules__irules ""] }]
     # array keys $advanced,$have_rules
     array set irules {
          1,1     { rules \{ $::irules__irules \} }
          *       { rules none }
     }

     # FIREWALL POLICY
     # beware: syntactically correct AFM commands fail when AFM is not provisioned
     # extra info exists test benefits BIG-IQ apps that bypass presentation

     set afm_provisioned [expr { [iapp_get_provisioned afm] && [iapp_tmos_version >= 11.4] }]

     set do_firewall [expr { $afm_provisioned && \
          [info exists ::afm__policy] && \
          ![iapp_is ::afm__policy $::DO_NOT_USE_ANSWER] }]

     set new_firewall [iapp_is ::afm__policy $::DEFAULT_ANSWER]

     set allow_by_reputation [iapp_is ::afm__restrict_by_reputation "accept"]

     set staging_policy [expr { $do_firewall && \
          ![iapp_is ::afm__staging_policy $::DO_NOT_USE_ANSWER] \
          ? "$::afm__staging_policy" : "none" }]

     set security_logging [expr { $do_firewall && \
          ![iapp_is ::afm__security_logging $::DO_NOT_USE_ANSWER] \
          ? "\"$::afm__security_logging\"" : "" }]

     # array key: $afm_provisioned,$do_firewall,$new_firewall
     array set firewall_arr {
          1,1,1 { fw-enforced-policy \
               [iapp_conf create security firewall policy ${app}_firewall \
               rules replace-all-with \{ \
               acceptPackets \{ \
               action accept \
               log no \
               ip-protocol tcp \
               status enabled \
               source \{ [iapp_substa afm_restrict($::afm__restrict_by_addr)] \}\} \
               dropPackets \{ \
               action drop \
               log yes \
               ip-protocol tcp \
               status enabled \
               source \{ addresses replace-all-with \{ any/any \}\} \
               \}\}] \
          fw-staged-policy [subst $staging_policy] }
          1,1,0 { fw-enforced-policy $::afm__policy \
          fw-staged-policy [subst $staging_policy] }
          1,0,1 { fw-enforced-policy none \
          fw-staged-policy none }
          1,0,0 { fw-enforced-policy none \
          fw-staged-policy none }
          *     { }
     }

     # array key: $::afm__restrict_by_addr
     array set afm_restrict {
          /#create_new# {addresses replace-all-with \{ $::afm__allowed_addr \}}
          /#do_not_use# {addresses replace-all-with \{ any/any \}}
          *         {address-lists replace-all-with \{ $::afm__restrict_by_addr \}}
     }

     # ip-intelligence was a profile in 11.4, is a policy in 11.5
     set is_v11_5 [iapp_tmos_version >= 11.5]

     # array keys:
     # $afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5
     array set ip_intelligence_arr {
          1,1,0,0 { profiles add \{ [iapp_conf create security ip-intelligence  profile           ${app}_ip_intelligence  defaults-from     ip-intelligence  botnets           $::afm__restrict_by_reputation  denial-of-service $::afm__restrict_by_reputation  infected-sources  $::afm__restrict_by_reputation  phishing          $::afm__restrict_by_reputation  proxy             $::afm__restrict_by_reputation  scanners          $::afm__restrict_by_reputation  spam-sources      $::afm__restrict_by_reputation  web-attacks       $::afm__restrict_by_reputation  windows-exploits  $::afm__restrict_by_reputation] \} }
          1,1,1,0 { profiles add \{ [iapp_conf create security ip-intelligence  profile           ${app}_ip_intelligence  defaults-from     ip-intelligence  botnets           $::afm__restrict_by_reputation  denial-of-service $::afm__restrict_by_reputation  infected-sources  $::afm__restrict_by_reputation  phishing          $::afm__restrict_by_reputation  proxy             $::afm__restrict_by_reputation  scanners          $::afm__restrict_by_reputation  spam-sources      $::afm__restrict_by_reputation  web-attacks       $::afm__restrict_by_reputation  windows-exploits  $::afm__restrict_by_reputation] \} }
          1,1,0,1  { ip-intelligence-policy [iapp_conf create security ip-intelligence  policy            ${app}_ip_intelligence  default-action     $action($::afm__restrict_by_reputation)  blacklist-categories replace-all-with \{ botnets \{ action use-policy-setting \}  cloud_provider_networks \{ action use-policy-setting \}  denial_of_service \{ action use-policy-setting \}  illegal_websites \{ action use-policy-setting \}  infected_sources \{ action use-policy-setting \}  phishing \{ action use-policy-setting \}  proxy \{ action use-policy-setting \}  scanners \{ action use-policy-setting \}  spam_sources \{ action use-policy-setting \}  web_attacks \{ action use-policy-setting \}  windows_exploits \{ action use-policy-setting \}\}] }
          1,0,0,1  { ip-intelligence-policy none }
          1,0,1,1  { ip-intelligence-policy none }
          1,1,1,1  { ip-intelligence-policy none }
          *     { }
     }

     # array key: $::afm__restrict_by_reputation
     array set action {
          accept { accept default-log-blacklist-hit-only no }
          reject { drop   default-log-blacklist-hit-only yes }
          warn   { accept default-log-blacklist-hit-only yes }
     }

     # VIRTUAL SERVER
     set destination [iapp_destination $::vs_pool__vs_addr $::vs_pool__vs_port]
     set mask_action "mask [iapp_destination -mask $::vs_pool__vs_addr]"
     set apm_profiles [expr { [info exists ::apm__use_apm] && [iapp_is ::apm__use_apm "yes"] ? [configure_apm] : "" }]

     # array key: $do_fastl4
     array set vs_arr {
         0    {[iapp_conf create ltm virtual ${app}_adfs_vs \
               destination $destination \
               $mask_action \
               ip-protocol tcp \
               [iapp_substa pool($new_pool)] \
               [iapp_substa firewall_arr($afm_provisioned,$do_firewall,$new_firewall)] \
               [iapp_substa \
               ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5)] \
               security-log-profiles replace-all-with \{ $security_logging \} \
               [iapp_substa profiles(tcp)] \
               profiles add \{ [iapp_substa client_ssl_arr($new_client_ssl,$do_chain_cert)] \
               [iapp_substa server_ssl_arr($new_server_ssl)] \} \
               profiles add \{ $apm_profiles \
               [iapp_substa http_arr($advanced,$new_http)] \} \
               [iapp_substa snat($do_snat,$do_automap,$new_snatpool)] \
               [iapp_substa vlans($advanced)] \
               [iapp_substa irules($advanced,$have_rules)] \
               persist replace-all-with \{ [iapp_conf create ltm persistence source-addr ${app}_source_addr defaults-from source_addr] \}]}

         1    {[iapp_conf create ltm virtual ${app}_adfs_vs \
               destination $destination \
               $mask_action \
               ip-protocol tcp \
               profiles add \{ fastL4 \} \
               [iapp_substa pool($new_pool)] \
               [iapp_substa firewall_arr($afm_provisioned,$do_firewall,$new_firewall)] \
               [iapp_substa \
               ip_intelligence_arr($afm_provisioned,$do_firewall,$allow_by_reputation,$is_v11_5)] \
               security-log-profiles replace-all-with \{ $security_logging \} \
               [iapp_substa snat($do_snat,$do_automap,$new_snatpool)] \
               [iapp_substa vlans($advanced)] \
               [iapp_substa irules($advanced,$have_rules)] \
               persist replace-all-with \{ [iapp_conf create ltm persistence source-addr ${app}_source_addr defaults-from source_addr] \}]}
     }

     iapp_substa vs_arr($do_fastl4)
}

# MAIN
configure_adfs_deployment
iapp_template stop
                            }
               presentation {

define choice lb_method display "xxlarge" tcl {
    if { [string first ltm_lb_least_conn [tmsh::show sys license detail]] != -1 } {
        set choices "Least Connections (member)\tleast-connections-member\nLeast Connections (node)\tleast-connections-node\nLeast Sessions\tleast-sessions\nDynamic Ratio (member)\tdynamic-ratio-member\nDynamic Ratio (node)\tdynamic-ratio-node\nFastest (application)\tfastest-app-response\nFastest (node)\tfastest-node\nObserved (member)\tobserved-member\nObserved (node)\tobserved-node\nPredictive (member)\tpredictive-member\nPredictive (node)\tpredictive-node\nRound Robin\tround-robin\nRatio (member)\tratio-member\nRatio (node)\tratio-node\nRatio (session)\tratio-session\nRatio Least Connections (member)\tratio-least-connections-member\nRatio Least Connections (node)\tratio-least-connections-node\nWeighted Least Connections (member)\tweighted-least-connections-member"
    } else {
        set choices "Round Robin\tround-robin\nRatio (member)\tratio-member\nRatio (node)\tratio-node"
    }
    return $choices
}

section intro {
     
     message intro "Configure high availability and acceleration for AD FS implementations.  For detailed information and configuration assistance, see http://www.f5.com/pdf/deployment-guides/microsoft-adfs-dg.pdf"
     message check_for_updates "Check for new versions of this template on DevCentral (https://devcentral.f5.com/wiki/iApp.Microsoft-Applications.ashx)."

     optional ( intro == "NEVER_SHOW_THIS" ) {
          choice ltm_provisioned tcl {
               return [expr {[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_provisioned ltm] ? "yes" : "no"}]
          }
          choice apm_provisioned tcl {
               return [expr {[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_provisioned apm] ? "yes" : "no"}]
          }
          choice afm_provisioned tcl {
               return [expr {[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_provisioned afm] && [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_tmos_version >= 11.4] ? "yes" : "no"}]
          }
          choice is_120 tcl {
              return [expr {[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_tmos_version >= 12.0] ? "yes" : "no"}]
          }
     }
     optional ( ltm_provisioned == "no" ) {
          message sorry "You must license and provision the Local Traffic Manager (LTM) module to use this template."
     }
}
optional ( intro.ltm_provisioned == "yes" ) {
     section basic {
          choice display_help display "xxlarge" default "hide" {
               "Yes, show inline help" => "max"  ,
               "No, do not show inline help" => "hide"
          }
          optional ( basic.display_help == "max" ) {
               message display_help_max "Inline help is available to provide contextual descriptions to aid in the completion of this configuration.  Select to show or hide the inline help in this template. Important notes and warnings are always visible, no matter which selection you make here."
          }
          choice advanced display "xxlarge" default "no" {
               "Basic - Use F5's recommended settings" => "no"  ,
               "Advanced - Configure advanced options"    => "yes"
          }
          optional ( basic.display_help == "max" ) {
               message advanced_max "This template supports two configurations modes. Basic mode exposes the most commonly used settings, and automatically configures the rest of the options.  Advanced mode allows you to review and change all settings."
          }
          choice version display "xxlarge" default "v2" {
               "AD FS 2.0" => "v2"  ,
               "AD FS 3.0" => "v3"
          }
          optional ( basic.display_help == "max" ) {
               message version_max "Select the version of Active Directory Federation Services you are using."
          }
          choice scenario display "xxlarge" default "adfs" {
               "AD FS" => "adfs"  ,
               "AD FS Proxy" =>"adfs_proxy"
          }
          optional ( basic.display_help == "max" ) {
               message scenario_max "Select the Active Directory Federation Services role you are deploying. You can deploy AD FS Proxy, or AD FS with optional Access Policy configuration, to protect your AD FS servers."
          }
     }

     section net {
          optional ( basic.advanced == "yes" ) {
               choice client_mode display "xxlarge" default "wan" {
                    "Local area network  ( LAN ) " => "lan"  ,
                    "Wide area network  ( WAN ) " => "wan"
               }
          }
          optional ( basic.display_help == "max" && basic.advanced == "yes" ) {
               message client_mode_max "Select the type of network that connects the clients to the BIG-IP system. This is used to determine the client-side TCP optimizations the system uses."
          }
          optional ( basic.advanced == "yes" ) {
               multichoice client_vlan default tcl {

                    set ::choices [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items net vlan]
                    return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                    } tcl {

                    set ::choices [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items net vlan]
                    return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
               }
               optional ( basic.display_help == "max" && basic.advanced == "yes" ) {
                    message client_vlan_max "You can optionally configure the BIG-IP system to accept client traffic from specific VLANs you have configured.   By default, the BIG-IP system accepts traffic from all VLANs configured on the system. The VLAN objects must already be configured on this BIG-IP system before you can select them. If you do not move any VLANs to the Selected box, the BIG-IP system accepts traffic from all VLANs"
               }
          }
          optional ( basic.advanced == "yes" ) {
               choice server_mode display "xxlarge" default "lan" {
                    "Local area network  ( LAN ) " => "lan"  ,
                    "Wide area network  ( WAN ) " => "wan"
               }
          }
          optional ( basic.display_help == "max" && basic.advanced == "yes" ) {
               message server_mode_max "Select the type of network that connects the servers to the BIG-IP system. This is used to determine the server-side TCP optimizations the system uses."
          }
          choice same_subnet display "xxlarge" default "no" {
               "BIG-IP virtual server IP and AD FS servers are on different subnets" => "no"  ,
               "BIG-IP virtual server IP and AD FS servers are on the same subnet"   => "yes"
          }
          optional ( basic.display_help == "max" ) {
               message subnet_1_max "It is important to ensure that responses to client requests made using the BIG-IP virtual server address are returned through the BIG-IP system. If the client receives a response directly from the AD FS server, the connection is dropped. The way the BIG-IP system handles this depends on your network topology."
               message subnet_2_max "For environments in which the virtual server IP address is on a subnet different from the AD FS servers, select BIG-IP virtual server IP and the AD FS servers are on different subnets."
               message subnet_3_max "For environments in which the virtual server IP address provided is on the same subnet as the AD FS servers in the associated pool, select BIG-IP virtual server IP and the AD FS servers are on the same subnet. This enables Secure Network Address Translation (SNAT Auto Map). This configuration results in the BIG-IP system replacing the client IP address of an incoming connection with its local floating self IP address, ensuring the server response returns through the BIG-IP system."
          }
          optional ( same_subnet == "no" ) {
               choice route_to_bigip display "xxlarge" default "no" {
                    "AD FS servers have a route to clients through the BIG-IP"           => "yes"  ,
                    "AD FS servers do not have a route to clients through the BIG-IP"    => "no"
               }
          }
          optional ( basic.display_help == "max" ) {
               message def_rt_1_max "For environments in which the virtual server IP is on a subnet different from the AD FS servers, information regarding the IP setting of the AD FS servers is required to ensure the correct BIG-IP system configuration."
               message def_rt_2_max "If the AD FS servers use the BIG-IP system as their default gateway, select AD FS servers have a route for clients through the BIG-IP. In this scenario, no configuration is needed to support your environment to ensure correct server response handling."
               message def_rt_3_max "If the AD FS servers do not have a route through the BIG-IP system, select AD FS servers do not have a route for clients through the BIG-IP. This enables Secure Network Address Translation (SNAT Auto Map). This configuration results in the BIG-IP system replacing the client IP address of an incoming connection with its local floating self IP address ensuring the server response returns through the BIG-IP system."
          }
          optional ( same_subnet == "yes"
          || ( same_subnet == "no"
          && route_to_bigip == "no" )) {
               choice snat_type display "xxlarge" default "automap" {
                    "Fewer than 64,000 concurrent connections per server" => "automap"  ,
                    "More than 64,000 concurrent connections per server" => "snatpool"
               }
               optional ( basic.display_help == "max" ) {
                    message snat_max "For environments with fewer than 64,000 concurrent connections per server, the BIG-IP system enables SNAT Auto Map, which uses a unique IP:port combination for each client request it sends to the AD FS server. For environments with more than 64,000 concurrent connections per AD FS server, the BIG-IP system enables a SNAT pool, and additional IP addresses are reserved to ensure the system has enough unique combinations. If the system exhausts all combinations, new client connections are refused until one is available."
               }
               optional ( snat_type == "snatpool" ) {
                    choice snatpool display "xxlarge" default "/#create_new#" tcl {
                         set ::choices "Create a new SNAT pool\t/#create_new#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items ltm snatpool]"
                         return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( basic.display_help == "max" ) {
                         message snatpool_max "Choose whether you want the iApp template to create a new SNAT Pool for this implementation. If you have already created a custom SNAT Pool, you can select it from the list."
                    }
                    optional ( snatpool == "/#create_new#" ) {
                         table snatpool_members {
                              string addr required validator "IpAddress" display "xlarge"
                         }
                         optional ( basic.display_help == "max" ) {
                              message snatpool_members_max "SNAT Pool addresses should be available IP addresses, not the self-IP address(es) of the BIG-IP system"
                         }
                    }
               }

          }
     }
     optional ( intro.apm_provisioned == "yes" && basic.scenario == "adfs" )  {
          section apm {
               choice use_apm display "xxlarge" default "no" {
                    "Yes, provide secure authentication using APM" => "yes"  ,
                    "No, do not provide secure authentication using APM" => "no"
               }
               optional ( basic.display_help == "max") {
                    message use_apm_max "If you have fully licensed and provisioned the BIG-IP Access Policy Manager, you have the option of using it to provide proxy authentication and secure remote access for AD FS."
               }
               optional ( use_apm == "yes" ) {
                    choice aaa_profile display "xxlarge" default "/#create_new#" tcl {
                         set ::choices    "Create a new AAA Server\t/#create_new#\n"
                         append ::choices [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items -nocomplain -filter use-pool !~ "disabled" apm aaa active-directory]
                         return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( basic.display_help == "max") {
                         message aaa_profile_max "Choose whether you want the template to create a new BIG-IP APM AAA Server object for your implementation or use an existing one. The AAA Server contains information about your Active Directory deployment. Unless you have created a custom AAA server specifically for this implementation, we recommend allowing the iApp to create a new one."
                    }
                    optional ( aaa_profile != "/#create_new#" ) {
                         message aaa_warning "You have selected an existing AAA server.  For correct functionality, you must use an AAA server configured to use a pool of Domain Controllers."
                    }
                    optional ( aaa_profile == "/#create_new#" ) {
                         table active_directory_servers {
                              string fqdn display "large" required validator "FQDN"
                              string addr display "large" required validator "IpAddress"
                         }
                         optional ( basic.display_help == "max") {
                              message active_directory_servers_help "Specify each of your Active Directory domain controllers, both FQDN and associated IP address, used for this environment. Click the Add button for additional rows."
                         }
                         choice credentials display "xxlarge" default "no" {
                              "Anonymous binding is allowed" => "no"  ,
                              "Require credentials for authentication" => "yes"
                         }
                         optional ( basic.display_help == "max") {
                              message credentials_help "Choose whether your Active Directory implementation allows anonymous binding or not. If it does not, you must provide a user name and password with administrative permissions."
                         }
                         optional ( credentials == "yes" ) {
                              string active_directory_username display "xxlarge" required
                              optional ( basic.display_help == "max") {
                                   message active_directory_username_help "You must type the user name of an Active Directory account that has administrative permissions."
                              }
                              password active_directory_password display "xxlarge" required
                              optional ( basic.display_help == "max") {
                                   message active_directory_password_help "Type the associated password."
                              }
                         }
                         choice ad_monitor display "xxlarge" default "/#create_new#" tcl {
                              set ::choices "Yes, create a new Active Directory monitor\t/#create_new#\nYes, create a simple ICMP monitor\t/#use_icmp#\nNo, do not monitor Active Directory\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items -filter NAME != \"ldap\" ltm monitor ldap]"
                              return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                         }
                         optional ( basic.display_help == "max") {
                              message active_directory_monitor_help "This monitor is for the Active Directory servers you entered in the APM Authentication section, and is attached to the Active Directory pool the template will create. Specify whether you want to create a new Active Directory monitor, use a simple ICMP/ping monitor, or choose an existing monitor. The remaining questions in this section are all related to the Active Directory monitor."
                         }
                         optional ( ad_monitor == "/#create_new#" ) {
                              string ad_user required display "xxlarge"
                              message ad_user_critical "The Active Directory service account you specify here must be set to never expire. A deleted or locked account will cause the BIG-IP system to mark your Active Directory pool members as unavailable, which takes them offline."
                              password ad_password required display "xxlarge"
                              message ad_password_important "Credentials are stored in plaintext on your BIG-IP system."
                              string ad_tree required display "xxlarge"
                              optional ( basic.display_help == "max") {
                                   message ad_tree_info "Specify the LDAP tree for the user name you provided. ADSI editor, an administration tool for Active Directory LDAP administration, is useful for determining the correct LDAP tree value. For example, if the user name is 'user1' which is in the organizational unit 'F5 Users' and is in the domain 'f5.example.com', the LDAP tree would be: ou=F5 Users, dc=f5, dc=example, dc=com."
                              }
                              choice ad_secure display "xxlarge" {
                                   "No, a secure protocol is not required" => "none"  ,
                                   "Yes, SSL communication is required"     => "ssl"  ,
                                   "Yes, TLS communication is required"    => "tls"
                              }
                              optional ( basic.display_help == "max") {
                                   message ad_secure_info "Select whether your Active Directory implementation requires a secure protocol (SSL or TLS) for communication, or if it does not use a secure protocol."
                              }
                              optional ( basic.advanced == "yes"  ) {
                                   string ad_interval default "10" validator "NonNegativeNumber"
                                   optional ( basic.display_help == "max") {
                                        message ad_interval_info "Specify the number of seconds to use between each health monitor attempt. Members of this pool are marked down after four incorrect responses, and marked available after one correct response. "
                                   }
                                   optional ( ad_secure == "ssl" ) {
                                        string ad_port_ssl default "636" required
                                   }
                                   optional ( ad_secure != "ssl" ) {
                                        string ad_port_not_ssl default "389" required
                                   }
                                   optional ( basic.display_help == "max") {
                                        message ad_port_info "Specify the port being used by your Active Directory deployment.  The default port when using the TLS security protocol, or no security, is port 389. The default port used when using the SSL security protocol is 636."
                                   }
                              }
                         }
                    }
                    string login_domain display "xxlarge" required
                    optional ( basic.display_help == "max") {
                         message login_domain_help "Specify the FQDN of the Active Directory deployment for your AD FS users. This is the FQDN for your domain, such as example.com, rather than the FQDN for any specific host."
                    }
                    optional ( intro.is_120 == "yes")  {
                         choice log_settings display "xxlarge" default "/Common/default-log-setting" tcl {
                         set log ""
                         catch {
                              set log [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items apm log-setting]
                         } err
                         set ::choices "Do not specify a logging profile for the APM profile\t/#do_not_use#\n$log"
                         return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                         }
                         optional ( basic.display_help == "max" )  {
                              message log_settings_help "Select APM logging profile to use for the Access Policy created for this iApp deployment. You must have previously created the profile before it will appear in the list."
                         }
                    } 
               }
          }
     }
     optional ( intro.afm_provisioned == "yes" ) {
          section afm {
               choice policy default "/#do_not_use#" display "xxlarge" tcl {
                    set ::choices "Yes, use F5's recommended AFM configuration\t/#default#\nNo, do not use AFM to secure your application\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items -nocomplain security firewall policy]"
                    return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
               }
               optional ( basic.display_help == "max" ) {
                    message policy_max "BIG-IP Advanced Firewall Manager (AFM) is a high-performance, stateful, full-proxy network firewall designed to guard data centers against incoming threats that enter the network on the most widely deployed protocols.  BIG-IP AFM must be fully licensed and provisioned to use this functionality."
               }
               optional ( policy == "/#default#" ) {
                    choice restrict_by_addr default "/#do_not_use#" display "xxlarge" tcl {
                         set ::choices "No, do not restrict source addresses (allow all sources)\t/#do_not_use#\nRestrict source addresses\t/#create_new#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items -nocomplain security firewall address-list]"
                         return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( basic.display_help == "max" ) {
                         message restrict_max "You can use the BIG-IP AFM to restrict access to your application by either IP address or network address. If enabled, the system will only allow access to the virtual server from the address(es) you specify."
                    }
                    optional ( restrict_by_addr == "/#create_new#" ) {
                         string allowed_addr display "xxlarge" required
                         optional ( basic.display_help == "max" ) {
                              message allowed_addr_max "Specify the IP or network address that should have access to the application.  You can use a single IP address, a list of IP addresses separated by spaces, a range of IP addresses separated by a dash (for example 192.0.2.10-192.0.2.100), a single network address, such as 192.0.2.200/24, or any combination of these."
                         }
                    }
               }
               optional ( policy != "/#do_not_use#" ) {
                    choice restrict_by_reputation default "accept" display "xxlarge" {
                         "Allow all sources regardless of reputation" => "accept"  ,
                         "Reject access from sources with a low reputation" => "reject"  ,
                         "Allow but log access from sources with a low reputation" => "warn"
                    }
                    optional ( basic.display_help == "max" ) {
                         message restrict_by_reputation_max "The BIG-IP AFM uses an IP intelligence database to categorize IP addresses coming into the system. Select the way you want the system to handle IP addresses with a low reputation score."
                    }
                    optional ( basic.display_help == "max" && restrict_by_reputation != "accept" ) {
                         message restrict_by_reputation_log "By default, IP Intelligence events are logged to Security > Event Logs > Network > IP Intelligence.  For the best performance, F5 recommends creating a remote logging profile to log IP Intelligence events."
                    }
                    message restrict_by_reputation_warn "You must have an active IP Intelligence license for IP reputation-based access control to function correctly."

                    choice staging_policy default "/#do_not_use#" display "xxlarge" tcl {
                         set ::choices "Do not apply a staging policy\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items -nocomplain security firewall policy]"
                         return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                    }
                    message staging_policy1_max "A policy in Staging mode does not block any traffic, and only logs what would be blocked if the policy were placed into production."

                    optional ( basic.display_help == "max" ) {
                         message staging_policy_max "A staged policy allows you to evaluate the effect a policy has on traffic by analyzing the system logs, without actually modifying traffic based on the firewall rules.  You must already have a policy on the system in order to select it from the list.  For specific information on creating a staging policy, see the AFM documentation."
                    }
                    choice security_logging default "/#do_not_use#" display "xxlarge" tcl {
                         # Menu should display all log profiles with "network none".
                         # tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items will not filter security log profiles,
                         # so the filter has been written inline here.
                         set ::choices "Do not use a logging profile\t/#do_not_use#\n"
                         if { [catch {
                              set profile_list [tmsh::list security log profile all-properties recursive]
                         } err] } {
                         set profile_list " "
                         }
                         array set profiles \
                         [string map {"security log profile" ""} $profile_list]
                         foreach name [array names profiles] {
                              array set subprofile $profiles($name)
                              if { [info exists subprofile(network)] && \
                                   $subprofile(network) != "none" } {
                                   append ::choices "$name\n"
                              }
                         }
                         return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( basic.display_help == "max" ) {
                         message security_logging_max "The logging profile enables you to log detailed information about BIG-IP system Network Firewall events and store those logs on the BIG-IP system or a remote logging server (syslog or Splunk). If you want to use a logging profile, we recommend creating one outside this template. Only logging profiles with Network Firewall enabled appear in the list."
                         message security_logging1_max "If you are also using BIG-IP ASM, and the logging profile you created has both Application Security and Network Firewall enabled in the same profile, you must also select that profile here. See the BIG-IP AFM documentation for specific information on Logging profiles."
                    }
               }
          }
     }
     section ssl {
          optional ( basic.scenario == "adfs_proxy" || ( basic.scenario == "adfs" && ( intro.apm_provisioned == "no" || ( intro.apm_provisioned == "yes" && apm.use_apm == "no" ) ) ) )  {
               choice mode display "xxlarge" default "bridging" {
                    "Terminate SSL from clients, re-encrypt to servers (SSL bridging)" => "bridging"  ,
                    "Encrypted traffic is forwarded without decryption (SSL pass-through)" => "passthru"
               }
               optional ( basic.display_help == "max" ) {
                    message mode_max "Select how BIG-IP should handle encrypted traffic from AD FS clients. SSL bridging is mandatory when protecting AD FS server(s) with F5 Access Policy Manager (APM)."
                    message mode_bridging_max "Select SSL bridging if you need to inspect or optimize encrypted client traffic before forwarding it to AD FS server(s).  A standard BIG-IP virtual server is created."
                    message mode_passthru_max "Select SSL pass-through for best performance, or when SSL decryption is disallowed.  A Performance (Layer 4) BIG-IP virtual server is created."
               }
          }
          optional ( intro.apm_provisioned == "yes" && apm.use_apm == "yes" || ( mode == "bridging" ) )  {
               choice client_ssl_profile display "xxlarge"
               default "/#create_new#" tcl {
                    set ::choices "Create a new Client SSL profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items ltm profile client-ssl]"
                    return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
               }
               optional ( basic.display_help == "max" ) {
                    message client_ssl_profile_max "If you have already created an Client SSL profile that includes the appropriate certificate and key, you can select it from the list.  Otherwise, the iApp creates a new Client SSL profile. "
               }
               optional (client_ssl_profile == "/#create_new#" ) {
                    choice cert default "/Common/default.crt"
                    display "xxlarge" tcl {
                         set ::choices [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]
                         return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( basic.display_help == "max" ) {
                         message cert_max "To establish encrypted communication, a client and server negotiate security parameters that are used for the session. As part of this handshake, a certificate is provided by the server to the client to identify itself. The client can then validate the certificate with an authority for authenticity before sending data. When the BIG-IP system is decrypting communication between the client and server, an SSL certificate and key pair for each fully-qualified DNS name related to this application instance must be configured on the system."
                         message cert1_max "Select the SSL certificate you imported for this deployment.  Importing certificates and keys is not a part of this template, see System > File Management > SSL Certificate List. To select any new certificates and keys you import, you need to restart or reconfigure this template."
                    }
                    choice key default "/Common/default.key"
                    display "xxlarge" tcl {
                         set ::choices [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items -norecursive sys file ssl-key]
                         return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( basic.display_help == "max" ) {
                         message key_max "Select the associated SSL key you imported."
                    }
                    optional ( cert == "/Common/default.crt"
                    || key == "/Common/default.key" ) {
                         message ssl_warn_1 "The BIG-IP system's default certificate and key are not secure. For proper security, acquire a certificate and key from a trusted certificate authority, and then import it onto the BIG-IP system."
                    }
                    optional ( basic.advanced == "yes" ) {
                         choice use_chain_cert display "xxlarge"
                         default "/#do_not_use#" tcl {
                              set ::choices "Do not use an intermediate certificate\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items -norecursive sys file ssl-cert]"
                              return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                         }
                         optional ( basic.display_help == "max" ) {
                              message use_chain_cert_1_max "Intermediate certificates, also called intermediate certificate chains or chain certificates, are used to help systems which depend on SSL certificates for peer identification. These certificates are intended to create a chain of trust between the CA that signed the certificate and the CA that is already trusted by the recipient of the certificate. This allows the recipient to verify the validity of the certificates presented, even when the signing CA is unknown."
                              message use_chain_cert_2_max "Intermediate certificates must be created or imported onto this BIG-IP system prior to running this iApp. See http://support.f5.com/kb/en-us/solutions/public/13000/300/sol13302.html for help on creating an intermediate certificate chain."
                         }
                    }
               }
               choice server_ssl_profile display "xxlarge"
               default "/#create_new#" tcl {
                    set ::choices "Create a new Server SSL profile based on serverssl (recommended)\t/#create_new#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items ltm profile server-ssl]"
                    return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
               }
               optional ( basic.display_help == "max" ) {
                    message server_ssl_profile_max "If you have already created an Server SSL profile on this BIG-IP system, you can select it from the list. Otherwise, the iApp creates a new Server SSL profile."
               }
          }
     }
     section vs_pool {
          string vs_addr display "xxlarge" validator "IPAddress" required
          optional ( basic.display_help == "max" ) {
               message vs_addr_max "This IP and port combination become the BIG-IP virtual server address and port, which clients use to access the application. The system intercepts requests to this IP:Port and distributes them to the AD FS servers."
          }
          string vs_port display "medium" validator "PortNumber" default "443" required
          optional ( basic.display_help == "max" ) {
               message vs_port_max "Specify the service port you want to use for the virtual server. The default port for AD FS is 443."
          }
          string fqdn display "xxlarge" validator "Fqdn" required
          optional ( basic.display_help == "max" ) {
               message fqdn_max "Specify the FQDN (Fully Qualified Domain Name) clients will use to access the AD FS implementation."
          }
          optional ( basic.advanced == "yes" )  {
               optional ( intro.apm_provisioned == "yes" && apm.use_apm == "yes" || ( ssl.mode == "bridging" ) ) {
                    choice http display "xxlarge" default "/#create_new#" tcl {
                         set ::choices "Create a new HTTP profile (recommended)\t/#create_new#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items ltm profile http]"
                         return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( basic.display_help == "max" ) {
                         message http_max "The HTTP profile contains settings that tell the BIG-IP system how to handle the HTTP protocol. If you have created a custom HTTP profile for this application, you can select it from the list."
                    }
                    optional ( http == "/#create_new#" ) {
                         choice xff display "xxlarge" default "yes" {
                              "Insert X-Forwarded-For HTTP header" => "yes"  ,
                              "Do not insert X-Forwarded-For HTTP header" => "no"
                         }
                         optional ( basic.display_help == "max" ) {
                              message xff_max "If you choose to insert the X-Forwarded-For header, the BIG-IP system inserts the original client IP address in the HTTP header for logging purposes. Additional configuration may be required on the server to log the value of the X-Forwarded-For header."
                         }
                    }
               }
          }
          choice pool_to_use display "xxlarge" default "/#create_new#" tcl {

               set ::choices "Create a new pool\t/#create_new#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items ltm pool]"
               return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
          }
          optional ( basic.display_help == "max" ) {
               message pool_max "A load balancing pool is a logical set of devices, such as AD FS servers, grouped together to receive and process traffic. When clients attempt to access the application via the BIG-IP virtual server, the BIG-IP system distributes requests to any of the servers that are members of that pool."
          }
          optional ( pool_to_use == "/#create_new#" ) {
               optional ( basic.advanced == "yes" ) {
                    lb_method lb_method_choice
                    optional ( basic.display_help == "max" ) {
                         message lb_method_max "A load balancing method is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method, where new connections are routed to the node that has the least number of current connections. This is ideal for environments in which pool members have similar performance and capacity capabilities."
                    }
                    optional ( ssl.mode == "bridging" )  {
                         choice tcp_req_queuing display "xxlarge" default "no" {
                              "Enable TCP request queuing"           => "yes"  ,
                              "Do not enable TCP request queuing"    => "no"
                         }
                         optional ( basic.display_help == "max" ) {
                              message tcp_request_queue_2_max "TCP request queuing provides the ability to queue connection requests that exceed the capacity of connections for a pool, pool member, or node, as determined by the connection limit. If you enable TCP request queuing, you must specify a queue length and timeout for queued requests based on server capability, load, and need for shared resources."
                         }
                         optional ( tcp_req_queuing == "yes" ) {
                              message tcp_request_queue_1_max "Improper use or misconfiguration of TCP Request Queuing/Connection Limits can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify these settings impact prior to deployment in a production environment. You MUST add a Connection Limit to your pool members for TCP Request Queuing."
                              string tcp_queue_length display "medium"
                              default "0" required
                              validator "NonNegativeNumber"
                              optional ( basic.display_help == "max" ) {
                                   message tcp_queue_length_max "Specify a number for the length of the queue. You should not use a value of '0', which indicates an unlimited queue length, and is only constrained by available memory."
                              }
                              string tcp_queue_timeout display "medium"
                              default "0" required
                              validator "NonNegativeNumber"
                              optional ( basic.display_help == "max" ) {
                                   message tcp_queue_timeout_max "Specify a number of milliseconds that requests should remain in the queue before timing out."
                              }
                         }
                    }
                    choice use_slow_ramp default "yes" display "xxlarge"  {
                         "Use Slow Ramp"        => "yes"  ,
                         "Do not use Slow Ramp" => "no"
                    }
                    optional ( basic.display_help == "max" ) {
                         message slow_ramp_max "With Slow Ramp, the BIG-IP system gradually adds connections to a newly-enabled or newly-added AD FS server over a time period you specify, rather than sending a full proportion of the traffic immediately. Slow Ramp is essential when using load balancing methods like Least Connections, as the BIG-IP system would otherwise send all new connections to a new server immediately, potentially overwhelming that server. The time period you select for Slow Ramp is highly dependent on the speed of your server hardware and the behavior of your AD FS services. "
                    }
                    optional ( use_slow_ramp == "yes" ) {
                         string slow_ramp_setvalue display "medium"
                         default "300" required
                         validator "NonNegativeNumber"
                    }
                    optional ( basic.display_help == "max" ) {
                         message slow_ramp_setvalue_max "Specify the duration (in seconds) for Slow Ramp time (the amount of time the system sends less traffic to a newly-enabled pool member). The default setting of 300 seconds  (5 minutes) is very conservative in most cases."
                    }
                    choice use_pga default "no" display "xxlarge"  {
                         "Do not use Priority Group Activation" => "no"  ,
                         "Use Priority Group Activation"        => "yes"
                    }
                    optional ( basic.display_help == "max" ) {
                         message pga_max "Priority Group Activation allows you to segment your servers into priority groups.  With Priority Group Activation, the BIG-IP system load balances traffic according to the priority number you assign to the pool members. A higher number indicates higher priority. Traffic is only sent to the servers with the highest priority, unless the number of available servers in that priority group falls below the value you specify as the minimum. The BIG-IP system then sends traffic to the group of servers with the next highest priority, and so on. See the BIG-IP documentation for more details."
                    }
                    optional ( use_pga == "yes" ) {
                         string min_active_members display "medium"
                         default "0" required
                         validator "NonNegativeNumber"
                         optional ( basic.display_help == "max" ) {
                              message min_active_members_max "Specify the minimum number of servers which must be available before the system sends traffic to servers with a lower priority."
                         }
                    }
               }
               table members {
                    editchoice addr display "large" tcl {

                         set ::choices [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items ltm node]
                         return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                    }
                    string port display "small" required
                    default "443" validator "PortNumber"
                    string conn_limit display "small" required
                    default "0" validator "NonNegativeNumber"
                    optional ( lb_method_choice == "ratio-member"
                            || lb_method_choice == "ratio-node"
                            || lb_method_choice == "ratio-session"
                            || lb_method_choice == "ratio-least-connections-member"
                            || lb_method_choice == "ratio-least-connections-node"
                            || lb_method_choice == "dynamic-ratio-member"
                            || lb_method_choice == "dynamic-ratio-node") {
                         string ratio default "1" validator "NonNegativeNumber"
                         display "small"
                    }
                    optional ( use_pga == "yes" ) {
                         string priority default "0" required
                         validator "NonNegativeNumber" display "small"
                    }
               }
               optional ( basic.display_help == "max" ) {
                    message members_max "Specify the IP address(es) of your AD FS servers. If you have existing nodes on this BIG-IP system, you can select them from the list, otherwise type the addresses. Click Add to include additional servers."
               }
          }
     }

     optional ( vs_pool.pool_to_use == "/#create_new#" ) {
          section app_health {
               choice monitor display "xxlarge" default "/#create_new#" tcl {
                    set ::choices "Create a new monitor\t/#create_new#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items -filter NAME != "https" \
                    ltm monitor https]\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items -filter NAME != "external" \
                    ltm monitor external]"
                    return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
               }
               optional ( basic.display_help == "max" ) {
                    message monitor_max "Monitors are used to determine the health of the endpoint on each AD FS server. If an endpoint does not respond or responds incorrectly the system will cease to send client requests to that AD FS server. The system will continue to monitor the instance and will begin sending requests once the endpoint responds correctly."
               }
               optional ( monitor == "/#create_new#" ) {
                    string frequency display "medium" required default "30"
                    optional ( basic.display_help == "max" ) {
                         message freq_max "This is the duration, in seconds, of a single monitor cycle. At this interval, the system checks the health of the endpoint on each AD FS server configured in the AD FS server pool."
                    }
                    string send required display "xxlarge" default "/adfs/fs/federationserverservice.asmx"
                    optional ( basic.display_help == "max" ) {
                         message send_max "The HTTP URI is used to specify the resource on the AD FS server for a given request. This parameter can be customized to request a specific federation endpoint."
                    }
                    string recv required display "xxlarge" default "200 OK"
                    optional ( basic.display_help == "max" ) {
                         message recv_max "When the HTTP response arrives for a monitor request, its contents are searched for the value specified here. If it is not found, the monitoring attempt fails."
                    }
               }
          }
     }
     optional ( basic.advanced == "yes" ) {
          optional ( intro.apm_provisioned == "yes" && apm.use_apm == "yes" || ( ssl.mode == "bridging" ) ) {
               section client_opt {
                    optional ( net.client_mode == "lan" ) {
                         choice tcp_lan_opt display "xxlarge"
                         default "/#create_new#" tcl {

                              set ::choices "New profile based on tcp-lan-optimized ( recommended )\t/#create_new#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items ltm profile tcp]"
                              return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                         }
                    }
                    optional ( net.client_mode != "lan" ) {
                         choice tcp_wan_opt display "xxlarge"
                         default "/#create_new#" tcl {

                              set ::choices "New profile based on tcp-wan-optimized ( recommended )\t/#create_new#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items ltm profile tcp]"
                              return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                         }
                    }
                    optional ( basic.display_help == "max" ) {
                         message tcp_max "The client-side TCP profile optimizes the communication between the BIG-IP system and the client by controlling the behavior of the traffic which results in higher transfer rates, improved connection reliability and increased bandwidth efficiency."
                    }
               }
               section server_opt {
                    optional ( net.server_mode == "lan" ) {
                         choice tcp_lan_opt display "xxlarge"
                         default "/#create_new#" tcl {

                              set ::choices "New profile based on tcp-lan-optimized ( recommended )\t/#create_new#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items ltm profile tcp]"
                              return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                         }
                    }
                    optional ( net.server_mode != "lan" ) {
                         choice tcp_wan_opt display "xxlarge"
                         default "/#create_new#" tcl {

                              set ::choices "New profile based on tcp-wan-optimized ( recommended )\t/#create_new#\n[tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items ltm profile tcp]"
                              return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
                         }
                    }
                    optional ( basic.display_help == "max" ) {
                         message tcp_max "The server-side TCP profile optimizes the communication between the BIG-IP system and the server by controlling the behavior of the traffic which results in higher transfer rates, improved connection reliability and increased bandwidth efficiency."
                    }
               }
          }
          section irules {
               message irule_1_max "Improper use or misconfigurations of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."
               optional ( basic.display_help == "max" ) {
                    message irule_2_max "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                    message irule_3_max "Correct event priority is critical when assigning multiple iRules. For more information about iRule event priority, see https://devcentral.f5.com/wiki/iRules.priority.ashx."
               }
               multichoice irules display "xlarge" tcl {
                    set ::choices [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_get_items -filter NAME !~ "^_sys_" ltm rule]
                    return [tmsh::run_proc f5.iapp.1.3.0.cli:iapp_safe_display ::choices]
               }
          }
     }
     optional ( basic.display_help == "max" ) {
          section addl_steps {
               message dns "You must configure a DNS entry for each fully qualified host name that the clients use to access the AD FS servers.  Each DNS record must resolve to the IP address you configured for the BIG-IP virtual server defined in the High Availability section."
          }
     }
}

text {
     intro "Welcome to the iApp template for Microsoft Active Directory Federation Services"
     
     intro.intro "Introduction"
     intro.check_for_updates "Check for Updates"
     intro.sorry "We're sorry"


     basic "Template Options"
     basic.display_help "Do you want to see inline help?"
     basic.display_help_max ""
     basic.advanced "Which configuration mode do you want to use?"
     basic.advanced_max ""
     basic.version "Which version of AD FS are you deploying?"
     basic.version_max ""
     basic.scenario "Which AD FS server role are you deploying?"
     basic.scenario_max ""

     net "Network"
     net.client_vlan "Which VLANs transport client traffic?"
     net.client_vlan_max ""
     net.client_mode "What type of network connects clients to the BIG-IP?"
     net.client_mode_max ""
     net.server_mode "What type of network connects servers to the BIG-IP?"
     net.server_mode_max ""
     net.same_subnet "Where will the virtual servers be in relation to the AD FS servers?"
     net.subnet_1_max ""
     net.subnet_2_max ""
     net.subnet_3_max ""
     net.route_to_bigip "How have you configured routing on your AD FS servers?"
     net.def_rt_1_max ""
     net.def_rt_2_max ""
     net.def_rt_3_max ""
     net.snat_type "How many connections per server do you expect?"
     net.snatpool "Create a new SNAT pool or use an existing one?"
     net.snatpool_max ""
     net.snatpool_members "What are the IP addresses you want to use for the SNAT pool?"
     net.snatpool_members.addr "IP"
     net.snatpool_members_max ""
     net.snat_max ""

     apm "Access Policy Manager (BIG-IP APM)"
     apm.use_apm "Do you want to provide secure authentication with BIG-IP APM?"
     apm.use_apm_max ""
     apm.aaa_profile "Which AAA Server object do you want to use?"
     apm.aaa_profile_max ""
     apm.aaa_warning "IMPORTANT"
     apm.active_directory_servers "Which Active Directory server IP address in your domain can this BIG-IP system contact?"
     apm.active_directory_servers_help ""
     apm.active_directory_servers.fqdn "FQDN"
     apm.active_directory_servers.addr "IP"
     apm.login_domain "What is the FQDN of the Active Directory implementation for your AD FS users?"
     apm.login_domain_help ""
     apm.credentials "Does your Active Directory domain allow anonymous binding?"
     apm.credentials_help ""
     apm.active_directory_username "Which Active Directory user with administrative permissions do you want to use?"
     apm.active_directory_username_help ""
     apm.active_directory_password "What is the password associated with that account?"
     apm.active_directory_password_help ""
     apm.ad_monitor "Create a new monitor for the Active Directory servers?"
     apm.active_directory_monitor_help ""
     apm.ad_user "Which Active Directory user name should the monitor use?"
     apm.ad_user_critical "CRITICAL"
     apm.ad_password "What is the associated password?"
     apm.ad_password_important "IMPORTANT"
     apm.ad_tree "What is the LDAP tree for this user account?"
     apm.ad_tree_info ""
     apm.ad_secure "Does your Active Directory domain require a secure protocol for communication?"
     apm.ad_secure_info ""
     apm.ad_interval "How many seconds between Active Directory health checks?"
     apm.ad_interval_info ""
     apm.ad_port_ssl "Which port is used for Active Directory communication?"
     apm.ad_port_not_ssl "Which port is used for Active Directory communication?"
     apm.ad_port_info ""
     apm.log_settings "Which log settings would you like to use to log APM events?"
     apm.log_settings_help ""

     afm "Advanced Firewall Manager (BIG-IP AFM)"
     afm.policy "Do you want to use BIG-IP AFM to protect your application?"
     afm.policy_max ""
     afm.restrict_by_addr "Do you want to restrict access to your application by network or IP address?"
     afm.restrict_max ""
     afm.allowed_addr "What IP or network addresses should be allowed to access your application?"
     afm.allowed_addr_max ""
     afm.security_logging "Which logging profile would you like to use?"
     afm.security_logging_max ""
     afm.security_logging1_max ""
     afm.restrict_by_reputation "How do you want to control access to your application from sources with a low reputation score?"
     afm.restrict_by_reputation_max ""
     afm.restrict_by_reputation_log ""
     afm.restrict_by_reputation_warn "IMPORTANT"
     afm.staging_policy "Would you like to stage a policy for testing purposes?"
     afm.staging_policy_max ""
     afm.staging_policy1_max "CRITICAL"

     ssl "SSL Encryption"
     ssl.mode "How should the BIG-IP system handle SSL traffic?"
     ssl.mode_max ""
     ssl.mode_bridging_max ""
     ssl.mode_passthru_max ""
     ssl.cert "Which SSL certificate do you want to use?"
     ssl.cert_max ""
     ssl.cert1_max ""
     ssl.key "Which SSL private key do you want to use?"
     ssl.key_max ""
     ssl.use_chain_cert "Which intermediate certificate do you want to use?"
     ssl.use_chain_cert_1_max ""
     ssl.use_chain_cert_2_max ""
     ssl.ssl_warn_1 "WARNING:"
     ssl.client_ssl_profile "Which Client SSL profile do you want to use?"
     ssl.client_ssl_profile_max ""
     ssl.server_ssl_profile "Which Server SSL profile do you want to use?"
     ssl.server_ssl_profile_max ""

     vs_pool "High Availability"
     vs_pool.vs_addr "What IP address do you want to use for the virtual server?"
     vs_pool.vs_addr_max ""
     vs_pool.vs_port "What service port do you want to use for the virtual server?"
     vs_pool.vs_port_max ""
     vs_pool.fqdn "Which FQDN will clients use to access AD FS?"
     vs_pool.fqdn_max ""
     vs_pool.http "Which HTTP profile do you want to use?"
     vs_pool.http_max ""
     vs_pool.xff "Should the BIG-IP system insert the X-Forwarded-For header?"
     vs_pool.xff_max ""
     vs_pool.pool_to_use "Do you want to create a new pool or use an existing one?"
     vs_pool.pool_max ""
     vs_pool.members "Which servers should be included in this pool?"
     vs_pool.members_max ""
     vs_pool.members.addr "IP Address"
     vs_pool.members.port "Port"
     vs_pool.members.conn_limit "Connection limit"
     vs_pool.members.ratio "Ratio"
     vs_pool.members.priority "Priority"
     vs_pool.lb_method_choice "Which load balancing method do you want to use?"
     vs_pool.lb_method_max ""
     vs_pool.tcp_req_queuing "Should the BIG-IP system queue TCP requests?"
     vs_pool.tcp_queue_length "What is the maximum number of queued TCP requests?"
     vs_pool.tcp_queue_length_max ""
     vs_pool.tcp_queue_timeout "How many milliseconds should requests stay in the queue?"
     vs_pool.tcp_queue_timeout_max ""
     vs_pool.tcp_request_queue_1_max "WARNING"
     vs_pool.tcp_request_queue_2_max ""
     vs_pool.use_slow_ramp "Use a Slow Ramp time for newly added servers?"
     vs_pool.slow_ramp_max ""
     vs_pool.slow_ramp_setvalue "How many seconds should Slow Ramp time last?"
     vs_pool.slow_ramp_setvalue_max ""
     vs_pool.use_pga "Do you want to give priority to specific groups of servers?"
     vs_pool.pga_max ""
     vs_pool.min_active_members "What is the minimum number of active members in a group?"
     vs_pool.min_active_members_max ""

     app_health "Application Health"
     app_health.monitor "Create a new health monitor or use an existing one?"
     app_health.monitor_max ""
     app_health.send "What HTTP URI should be sent to the server(s)"
     app_health.send_max ""
     app_health.recv "What is the expected response to the HTTP request?"
     app_health.recv_max ""
     app_health.frequency "How many seconds between each health check?"
     app_health.freq_max ""

     client_opt "Client Optimization"
     client_opt.tcp_lan_opt "How do you want to optimize client-side connections?"
     client_opt.tcp_wan_opt "How do you want to optimize client-side connections?"
     client_opt.tcp_max ""

     server_opt "Server Optimization"
     server_opt.tcp_lan_opt "How do you want to optimize server-side connections?"
     server_opt.tcp_wan_opt "How do you want to optimize server-side connections?"
     server_opt.tcp_max ""

     irules "iRules"
     irules.irules "Do you want to add any custom iRules to the AD FS virtual server?"
     irules.irule_1_max "WARNING"
     irules.irule_2_max ""
     irules.irule_3_max ""

     addl_steps "Additional Steps"
     addl_steps.dns "AD FS"
}
               }
               role-acl { admin manager resource-admin }
               run-as none
          }
     }
     requires-bigip-version-max none
     requires-bigip-version-min 11.3.0
     requires-modules { ltm }
}
